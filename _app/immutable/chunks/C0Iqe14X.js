import{t as p,a as o,b as s}from"./Cw4I5osi.js";import"./BzVk5r6l.js";import{c as le,s as a,f as h,n as r,r as ne}from"./NgVQVlRK.js";import{n as de}from"./B4IyMRKX.js";import{H as w}from"./CXsRaEhZ.js";import"./hMT8fFzP.js";import"./NwRJ91PD.js";/* empty css        */import"./BZUG4Puk.js";/* empty css        */import"./D9bBQFLV.js";import"./DOf4ro_L.js";import"./CKaMv3wE.js";/* empty css        */import{L as te,I as b}from"./BhmTgGWB.js";import{P as l}from"./D8YsId2T.js";import{S as f}from"./yHjwcyUH.js";import{L as re}from"./yh4_9ChP.js";import"./POtwinrL.js";import"./CbbZjpT6.js";/* empty css        */import{P as ce}from"./CEkRzcqJ.js";const oe={layout:"post",title:"TypeScript 7.0 will be 10x faster with Go",description:"Microsoft is rewriting TypeScript's compiler in Go. Learn what this means and how it will impact your workflow.",date:"2025-03-18T00:00:00.000Z",cover:"/images/blog/typescript-7-faster-with-go/cover.png",timeToRead:5,author:"ebenezer-don",category:"tutorial"};var pe=p("Over the past decade, TypeScript has earned the trust of developers building large-scale JavaScript applications. It offers the safety net of a type system, reliable tooling, and codebases that are <em>arguably</em> easier to maintain. Yet, if you ask developers working with large projects, they&#39;ll likely express one common frustration: the TypeScript compiler can feel painfully slow.",1),me=p("<!> The TypeScript compiler, currently written in TypeScript and running on Node.js, is being rewritten from scratch in Go. Microsoft announced this under the internal name &quot;Project Corsa.&quot;",1),ue=p("<!> The primary motivation is performance. TypeScript compilation times and type-checking responsiveness are known to degrade as projects scale.",1),he=p("<!> The rewrite will not affect TypeScript&#39;s syntax or language design. It will continue emitting standard JavaScript as before. Developers will still write TypeScript exactly as they currently do.",1),$e=p("<!> The new Go-based compiler will run as a standalone binary, removing the Node.js runtime dependency currently required for compilation.",1),fe=p("<!><!><!><!>",1),ve=p("One question naturally arises: why Go specifically? While Microsoft hasn&#39;t provided a comprehensive breakdown comparing Go to alternatives like Rust or C++, they&#39;ve <!> some key factors:",1),ge=p("<!> Go&#39;s programming style closely resembles the existing TypeScript codebase, making it much easier to port TypeScript&#39;s logic while keeping behavior and optimizations intact. This is critical since Microsoft plans to maintain both the JavaScript and Go-based compilers for some time.",1),ye=p("<!> Unlike Rust, which requires manual memory handling, Go provides fine-grained control over memory allocation without forcing constant memory management decisions throughout the codebase. TypeScript&#39;s compiler doesn&#39;t suffer from latency-sensitive GC pauses, so Go&#39;s garbage collection works well for this use case.",1),_e=p("<!> Go provides an ergonomic way to traverse complex trees and graphs, a key part of TypeScript&#39;s type-checking and compilation process.",1),we=p("<!> The TypeScript team wants more control over internal compiler APIs. While Go&#39;s interop with JavaScript isn&#39;t as strong as some alternatives, moving to a more intentional API design will help modernize the ecosystem.",1),be=p("Microsoft has publicly committed to maintaining compatibility and minimizing disruption throughout the compiler transition. Still, it&#39;s realistic to expect that tooling relying heavily on internal compiler APIs or deeply integrated TypeScript behaviors may require some adjustments. It&#39;s been <!> that the TypeScript team will initially support both the existing JavaScript-based compiler and the new Go-based compiler concurrently. This dual-compiler support would allow tool authors and ecosystem maintainers ample time to adapt without immediate disruption.",1),Pe=p("Microsoft has confirmed that <!> once it reaches feature parity with the current JavaScript-based version. Meanwhile, the existing compiler will continue under the <!> series, which will receive updates and breaking changes to align with the upcoming transition.",1),xe=p("Since some projects may depend on specific APIs or legacy configurations, <!> until the Go-based compiler reaches full stability and adoption.",1),Te=p("<!> – Preview release with basic type-checking.",1),ke=p("<!> – Feature-complete version for project builds and language services.",1),Se=p("<!><!>",1),Ge=p("<article><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!></article>");function Me(ae){ce(ae,de(oe,{children:(se,je)=>{var P=Ge(),T=le(P);l(T,{children:(t,i)=>{r();var e=pe();r(2),o(t,e)},$$slots:{default:!0}});var k=a(T);l(k,{children:(t,i)=>{r();var e=s(`To address this challenge, Microsoft recently confirmed a significant shift under the hood. They are rewriting TypeScript's compiler (tsc) in Go. Officially codenamed "Project Corsa," this transition aims to dramatically improve compilation performance. Early benchmarks and public demonstrations from Microsoft suggest compilation speeds could improve roughly tenfold.`);o(t,e)},$$slots:{default:!0}});var S=a(k);l(S,{children:(t,i)=>{r();var e=s("Let's break down what this transition means, what's officially confirmed, and how it'll affect you as a developer.");o(t,e)},$$slots:{default:!0}});var G=a(S);w(G,{level:1,children:(t,i)=>{r();var e=s("What does this mean for TypeScript?");o(t,e)},$$slots:{default:!0}});var M=a(G);l(M,{children:(t,i)=>{r();var e=s("Here's what we know so far:");o(t,e)},$$slots:{default:!0}});var j=a(M);te(j,{ordered:!1,marker:"-",children:(t,i)=>{var e=fe(),n=h(e);b(n,{children:(u,y)=>{var $=me(),g=h($);f(g,{marker:"**",children:(v,x)=>{r();var _=s("Compiler rewrite:");o(v,_)},$$slots:{default:!0}}),r(),o(u,$)},$$slots:{default:!0}});var d=a(n);b(d,{children:(u,y)=>{var $=ue(),g=h($);f(g,{marker:"**",children:(v,x)=>{r();var _=s("Motivation:");o(v,_)},$$slots:{default:!0}}),r(),o(u,$)},$$slots:{default:!0}});var m=a(d);b(m,{children:(u,y)=>{var $=he(),g=h($);f(g,{marker:"**",children:(v,x)=>{r();var _=s("Language stability:");o(v,_)},$$slots:{default:!0}}),r(),o(u,$)},$$slots:{default:!0}});var c=a(m);b(c,{children:(u,y)=>{var $=$e(),g=h($);f(g,{marker:"**",children:(v,x)=>{r();var _=s("Standalone binary:");o(v,_)},$$slots:{default:!0}}),r(),o(u,$)},$$slots:{default:!0}}),o(t,e)},$$slots:{default:!0}});var I=a(j);l(I,{children:(t,i)=>{r();var e=s("Microsoft has not announced any changes to TypeScript's language features, syntax, or output because of this rewrite. The transition to Go is an engineering effort to improve performance and maintainability.");o(t,e)},$$slots:{default:!0}});var L=a(I);w(L,{level:1,children:(t,i)=>{r();var e=s("Why Go specifically? Not Rust or C++?");o(t,e)},$$slots:{default:!0}});var W=a(L);l(W,{children:(t,i)=>{r();var e=ve(),n=a(h(e));re(n,{href:"https://github.com/microsoft/typescript-go/discussions/411",children:(d,m)=>{r();var c=s("publicly shared");o(d,c)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var A=a(W);l(A,{children:(t,i)=>{var e=ge(),n=h(e);f(n,{marker:"**",children:(d,m)=>{r();var c=s("Structural similarity:");o(d,c)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var C=a(A);l(C,{children:(t,i)=>{var e=ye(),n=h(e);f(n,{marker:"**",children:(d,m)=>{r();var c=s("Memory management tradeoffs:");o(d,c)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var z=a(C);l(z,{children:(t,i)=>{var e=_e(),n=h(e);f(n,{marker:"**",children:(d,m)=>{r();var c=s("Graph processing & AST traversal:");o(d,c)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var J=a(z);l(J,{children:(t,i)=>{var e=we(),n=h(e);f(n,{marker:"**",children:(d,m)=>{r();var c=s("Long-term API design considerations:");o(d,c)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var O=a(J);w(O,{level:1,children:(t,i)=>{r();var e=s("Benchmark numbers: early results, still preliminary");o(t,e)},$$slots:{default:!0}});var q=a(O);l(q,{children:(t,i)=>{r();var e=s("Perhaps the most attention-grabbing details involve benchmark numbers shared by Microsoft and industry publications. For instance, compiling the Visual Studio Code codebase (about 1.5 million lines of TypeScript) reportedly went from around 78 seconds with the current compiler down to roughly 7.5 seconds with the new Go-based compiler; a 10x improvement. Other large projects, such as Playwright and TypeORM, reportedly saw similar performance improvements (approximately 10x-13x faster).");o(t,e)},$$slots:{default:!0}});var R=a(q);l(R,{children:(t,i)=>{r();var e=s("These numbers come directly from early demonstrations and internal testing shared by Microsoft. But benchmarks at this early stage often represent idealized or carefully selected scenarios. Real-world improvements for diverse TypeScript projects may vary, and final figures might differ as the implementation matures.");o(t,e)},$$slots:{default:!0}});var H=a(R);w(H,{level:1,children:(t,i)=>{r();var e=s("How will this affect tooling and ecosystem compatibility?");o(t,e)},$$slots:{default:!0}});var F=a(H);l(F,{children:(t,i)=>{r();var e=s("A main concern among developers centers around compatibility with existing tools and integrations. Currently, TypeScript integrates smoothly with bundlers like Webpack, Vite, and esbuild, plus countless IDE plugins and language-server implementations.");o(t,e)},$$slots:{default:!0}});var N=a(F);l(N,{children:(t,i)=>{r();var e=be(),n=a(h(e));re(n,{href:"https://github.com/microsoft/typescript-go/discussions/411",children:(d,m)=>{r();var c=s("confirmed");o(d,c)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var B=a(N);l(B,{children:(t,i)=>{r();var e=s("While Microsoft is prioritizing a smooth transition, developers and tool authors should prepare for minor integration adjustments, especially if their workflows rely directly on internal TypeScript compiler APIs.");o(t,e)},$$slots:{default:!0}});var D=a(B);w(D,{level:1,children:(t,i)=>{r();var e=s("Timeline and versioning: what we know");o(t,e)},$$slots:{default:!0}});var E=a(D);l(E,{children:(t,i)=>{r();var e=Pe(),n=a(h(e));f(n,{marker:"**",children:(m,c)=>{r();var u=s("TypeScript 7.0 will ship with the Go-based compiler");o(m,u)},$$slots:{default:!0}});var d=a(n,2);f(d,{marker:"**",children:(m,c)=>{r();var u=s("TypeScript 6.x");o(m,u)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var U=a(E);l(U,{children:(t,i)=>{r();var e=xe(),n=a(h(e));f(n,{marker:"**",children:(d,m)=>{r();var c=s("Microsoft will maintain TypeScript 6.x alongside TypeScript 7+");o(d,c)},$$slots:{default:!0}}),r(),o(t,e)},$$slots:{default:!0}});var V=a(U);l(V,{children:(t,i)=>{r();var e=s("The rough timeline is:");o(t,e)},$$slots:{default:!0}});var Y=a(V);te(Y,{ordered:!1,marker:"-",children:(t,i)=>{var e=Se(),n=h(e);b(n,{children:(m,c)=>{var u=Te(),y=h(u);f(y,{marker:"**",children:($,g)=>{r();var v=s("Mid-2025");o($,v)},$$slots:{default:!0}}),r(),o(m,u)},$$slots:{default:!0}});var d=a(n);b(d,{children:(m,c)=>{var u=ke(),y=h(u);f(y,{marker:"**",children:($,g)=>{r();var v=s("Late 2025");o($,v)},$$slots:{default:!0}}),r(),o(m,u)},$$slots:{default:!0}}),o(t,e)},$$slots:{default:!0}});var Z=a(Y);l(Z,{children:(t,i)=>{r();var e=s("For now, both compilers will coexist, allowing developers to upgrade at their own pace.");o(t,e)},$$slots:{default:!0}});var K=a(Z);w(K,{level:1,children:(t,i)=>{r();var e=s("What does this mean for you?");o(t,e)},$$slots:{default:!0}});var Q=a(K);l(Q,{children:(t,i)=>{r();var e=s("This transition changes how TypeScript is compiled but not how developers use it. The language itself remains the same, and the compiler will continue outputting JavaScript as before. The main difference is that builds should be significantly faster, with better performance in large projects.");o(t,e)},$$slots:{default:!0}});var X=a(Q);l(X,{children:(t,i)=>{r();var e=s("That said, the new compiler is still in development, and benchmarks are early-stage. While Microsoft is working to maintain compatibility, some tools may need updates, and TypeScript 6.x will remain available for projects that aren't ready to switch immediately.");o(t,e)},$$slots:{default:!0}});var ee=a(X);l(ee,{children:(t,i)=>{r();var e=s("The long-term goal is for the Go-based compiler to fully replace the current one, but until it reaches full stability, both will be maintained in parallel.");o(t,e)},$$slots:{default:!0}});var ie=a(ee);l(ie,{children:(t,i)=>{r();var e=s("We'll continue monitoring official announcements and detailed benchmarks as Microsoft progresses through this transition. Until then, you can remain cautiously optimistic: the future of TypeScript looks promising, and notably faster.");o(t,e)},$$slots:{default:!0}}),ne(P),o(se,P)},$$slots:{default:!0}}))}const Xe=Object.freeze(Object.defineProperty({__proto__:null,default:Me,frontmatter:oe},Symbol.toStringTag,{value:"Module"}));export{Xe as _,Me as a};
