import{t as $,b as n,a}from"./Cw4I5osi.js";import"./BzVk5r6l.js";import{c as Ae,s as r,f as h,n as o,r as qe}from"./NgVQVlRK.js";import{n as Se}from"./B4IyMRKX.js";import{H as g}from"./CXsRaEhZ.js";import"./hMT8fFzP.js";import"./NwRJ91PD.js";/* empty css        */import"./BZUG4Puk.js";/* empty css        */import"./D9bBQFLV.js";import{B as ge}from"./BlhJVlLQ.js";import{C as p}from"./DXp9_3zM.js";import{F as k}from"./OFUKRh55.js";import{L as w,I as b}from"./BhmTgGWB.js";import{P as d}from"./D8YsId2T.js";import{L as P}from"./yh4_9ChP.js";import"./POtwinrL.js";import"./CbbZjpT6.js";/* empty css        */import{P as Te}from"./CEkRzcqJ.js";const we={layout:"post",title:"How to back up and restore your Backrush data",description:"Learn how to back up and restore your Backrush files.",date:"2024-08-07T00:00:00.000Z",cover:"/images/blog/backrush-backups-and-restores/cover.png",timeToRead:3,author:"bradley-schofield",category:"product"};var Re=$("Please note that all these commands need to be run within the same directory as Backrush&#39;s <!>",1),Me=$("It runs <!> on the server with two specific options <!> and <!> these are important since they ensure that when the backup is restored old data doesn&#39;t get overlapped with new data.",1),We=$("The output of <!> is piped into a <!> file. This is your backup.",1),Le=$("<!><!><!>",1),Be=$("Using the <!> command we restore the dump through a pipe",1),Oe=$("<!><!>",1),Ie=$("<!> will delete the container once it&#39;s done running. The reason we want this is because this container is only being used to package up our backup and give it to the host machine.",1),Ye=$("<!> This flag special as it will mount all of the volumes of the container we give it. To get the container ID we want we use a <!> to get the ID within the command",1),Ce=$("<!> This flag is being used to mount a volume onto our new container which will give us access to a backup folder we created using the <!> command at the start",1),Ee=$("<!><!><!>",1),Qe=$("<!> is the image we are basing our new container on",1),je=$("Once these commands are run you should find a new <!> folder which contains<!> and <!> these are your backups. Keep them safe.",1),Fe=$("Restoring your Backrush volumes is fairly simple as well. Move the backup folder you just created to your destination machine next to the <!> file and simply run the following commands to restore the backup.",1),Ue=$("Copy your <!> environment variable",1),Ne=$("Backrush keeps all your data encrypted, to ensure that all your files, hashes and all other encrypted data is accessible to your new Backrush instance make sure to copy the <!> from your original instance to your new instance.",1),He=$("We hope you enjoyed this article! We love contributions and encourage you to take a look at our <!> and <!>.",1),Ke=$("If you get stuck anywhere, feel free to reach out to us on our <!> run by humans.",1),Ge=$("<!><!><!>",1),Ve=$("<article><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!></article>");function ze(Pe){Te(Pe,Se(we,{children:(ye,Je)=>{var y=Ve(),x=Ae(y);d(x,{children:(t,s)=>{o();var e=n("Backing up and restoring data is an extremely important part of running servers. It's a virtual safety net against most bad things that can happen. Made a bad config change? Restore a backup. Messed up an update? Restore a backup. Corrupted Drives? Restore a backup.");a(t,e)},$$slots:{default:!0}});var D=r(x);d(D,{children:(t,s)=>{o();var e=n("Not only that, backups can also come in handy when migrating data to other systems, like migrating a development server into a production environment or vice versa.");a(t,e)},$$slots:{default:!0}});var A=r(D);d(A,{children:(t,s)=>{o();var e=n("To make this process as easy as possible, we've written this guide to explain everything you need to know about backing up and restoring your Backrush instance.");a(t,e)},$$slots:{default:!0}});var q=r(A);d(q,{children:(t,s)=>{o();var e=n("Backrush consists of multiple sections, and most of it is stateless. This means there are only two main things you need to back up: Backrush's database (MariaDB) and the Docker volumes that store functions, data, and uploads. The rest can be automatically handled and regenerated by Backrush.");a(t,e)},$$slots:{default:!0}});var S=r(q);d(S,{children:(t,s)=>{o();var e=Re(),l=r(h(e));p(l,{content:"docker-compose.yml"}),a(t,e)},$$slots:{default:!0}});var T=r(S);d(T,{children:(t,s)=>{o();var e=n("With all that said, lets begin!");a(t,e)},$$slots:{default:!0}});var R=r(T);g(R,{level:1,children:(t,s)=>{o();var e=n("Backing up the MariaDB Database");a(t,e)},$$slots:{default:!0}});var M=r(R);d(M,{children:(t,s)=>{o();var e=n("Due to the fact that Backrush uses a Docker image of MariaDB it is extremely easy to dump the entire database with just one command and likewise to restore the dump.");a(t,e)},$$slots:{default:!0}});var W=r(M);d(W,{children:(t,s)=>{o();var e=n("Creating a Database backup is just one command:");a(t,e)},$$slots:{default:!0}});var L=r(W);k(L,{content:`docker-compose exec mariadb sh -c 'exec mysqldump --all-databases --add-drop-database -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' > ./dump.sql
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n(`docker-compose exec mariadb sh -c 'exec mysqldump --all-databases --add-drop-database -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' > ./dump.sql`);a(t,e)},$$slots:{default:!0}});var B=r(L);d(B,{children:(t,s)=>{o();var e=n("This command does a couple things:");a(t,e)},$$slots:{default:!0}});var O=r(B);w(O,{ordered:!0,marker:".",children:(t,s)=>{var e=Le(),l=h(e);b(l,{children:(c,m)=>{o();var i=n("Docker-compose launches a temporary shell onto the MariaDB container to start work");a(c,i)},$$slots:{default:!0}});var u=r(l);b(u,{children:(c,m)=>{o();var i=Me(),f=r(h(i));p(f,{content:"mysqldump"});var _=r(f,2);p(_,{content:"-all-databases"});var De=r(_,2);p(De,{content:"-add-drop-database"}),o(),a(c,i)},$$slots:{default:!0}});var v=r(u);b(v,{children:(c,m)=>{o();var i=We(),f=r(h(i));p(f,{content:"mysqldump"});var _=r(f,2);p(_,{content:"dump.sql"}),o(),a(c,i)},$$slots:{default:!0}}),a(t,e)},$$slots:{default:!0}});var I=r(O);g(I,{level:1,children:(t,s)=>{o();var e=n("Restoring the MariaDB database");a(t,e)},$$slots:{default:!0}});var Y=r(I);d(Y,{children:(t,s)=>{o();var e=n("Restoring the database is similarly easy and also requires just one command to do:");a(t,e)},$$slots:{default:!0}});var C=r(Y);k(C,{content:`docker-compose exec -T mariadb sh -c 'exec mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' < dump.sql
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n(`docker-compose exec -T mariadb sh -c 'exec mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"' < dump.sql`);a(t,e)},$$slots:{default:!0}});var E=r(C);d(E,{children:(t,s)=>{o();var e=n("This command is very simple once you break it down:");a(t,e)},$$slots:{default:!0}});var Q=r(E);w(Q,{ordered:!0,marker:".",children:(t,s)=>{var e=Oe(),l=h(e);b(l,{children:(v,c)=>{o();var m=n("Docker-compose launches a temporary shell onto the MariaDB container to start work");a(v,m)},$$slots:{default:!0}});var u=r(l);b(u,{children:(v,c)=>{o();var m=Be(),i=r(h(m));p(i,{content:"mysql"}),o(),a(v,m)},$$slots:{default:!0}}),a(t,e)},$$slots:{default:!0}});var j=r(Q);g(j,{level:1,children:(t,s)=>{o();var e=n("Backing up your Docker volumes");a(t,e)},$$slots:{default:!0}});var F=r(j);d(F,{children:(t,s)=>{o();var e=n("Backrush stores various types of data in Docker volumes, including file uploads and Cloud Function data. These volumes help coordinate data between the central Backrush container and the various Backrush workers. It's crucial to back up these uploads since they contain all your app's file uploads. Keep in mind that these backup commands might take some time to run, depending on the amount of data you need to back up.");a(t,e)},$$slots:{default:!0}});var U=r(F);ge(U,{children:(t,s)=>{d(t,{children:(e,l)=>{o();var u=n("Before running these commands is it highly recommended to shut down your Backrush instance to ensure you get a complete backup.");a(e,u)},$$slots:{default:!0}})},$$slots:{default:!0}});var N=r(U);d(N,{children:(t,s)=>{o();var e=n("To backup the functions volume the command is:");a(t,e)},$$slots:{default:!0}});var H=r(N);k(H,{content:`mkdir -p backup && docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/functions && tar cvf /backup/functions.tar ."
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n('mkdir -p backup && docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/functions && tar cvf /backup/functions.tar ."');a(t,e)},$$slots:{default:!0}});var K=r(H);d(K,{children:(t,s)=>{o();var e=n("and to backup the uploads volume the command is:");a(t,e)},$$slots:{default:!0}});var G=r(K);k(G,{content:`mkdir -p backup && docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/uploads && tar cvf /backup/uploads.tar ."
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n('mkdir -p backup && docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/uploads && tar cvf /backup/uploads.tar ."');a(t,e)},$$slots:{default:!0}});var V=r(G);d(V,{children:(t,s)=>{o();var e=n("Finally, also backup your builds volume:");a(t,e)},$$slots:{default:!0}});var z=r(V);k(z,{content:`mkdir -p backup && docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/builds && tar cvf /backup/builds.tar ."
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n('mkdir -p backup && docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/backup ubuntu bash -c "cd /storage/builds && tar cvf /backup/builds.tar ."');a(t,e)},$$slots:{default:!0}});var J=r(z);d(J,{children:(t,s)=>{o();var e=n("Both these commands do similar things and when you break them down they are pretty simple.");a(t,e)},$$slots:{default:!0}});var Z=r(J);w(Z,{ordered:!0,marker:".",children:(t,s)=>{b(t,{children:(e,l)=>{o();var u=n("Start a new Docker container. This Docker container has a few special options");a(e,u)},$$slots:{default:!0}})},$$slots:{default:!0}});var X=r(Z);w(X,{ordered:!1,marker:"-",children:(t,s)=>{var e=Ee(),l=h(e);b(l,{children:(c,m)=>{var i=Ie(),f=h(i);p(f,{content:"-rm"}),o(),a(c,i)},$$slots:{default:!0}});var u=r(l);b(u,{children:(c,m)=>{var i=Ye(),f=h(i);p(f,{content:"-volume-from"});var _=r(f,2);p(_,{content:"$(docker-compose ps -q backrush)"}),o(),a(c,i)},$$slots:{default:!0}});var v=r(u);b(v,{children:(c,m)=>{var i=Ce(),f=h(i);p(f,{content:"v"});var _=r(f,2);p(_,{content:"mkdir"}),o(),a(c,i)},$$slots:{default:!0}}),a(t,e)},$$slots:{default:!0}});var ee=r(X);d(ee,{children:(t,s)=>{var e=Qe(),l=h(e);p(l,{content:"ubuntu"}),o(),a(t,e)},$$slots:{default:!0}});var te=r(ee);w(te,{ordered:!0,marker:".",children:(t,s)=>{b(t,{children:(e,l)=>{o();var u=n("Finally with this command created we change directories into the normal Backrush mount point for uploads and create a tarball which will be created in the backup directory where we will be able to access it.");a(e,u)},$$slots:{default:!0}})},$$slots:{default:!0}});var re=r(te);d(re,{children:(t,s)=>{o();var e=je(),l=r(h(e));p(l,{content:"backup"});var u=r(l,2);p(u,{content:"uploads.tar"});var v=r(u,2);p(v,{content:"functions.tar"}),o(),a(t,e)},$$slots:{default:!0}});var oe=r(re);g(oe,{level:1,children:(t,s)=>{o();var e=n("Restoring your Docker volumes");a(t,e)},$$slots:{default:!0}});var ae=r(oe);d(ae,{children:(t,s)=>{o();var e=Fe(),l=r(h(e));p(l,{content:"docker-compose.yml"}),o(),a(t,e)},$$slots:{default:!0}});var se=r(ae);ge(se,{children:(t,s)=>{d(t,{children:(e,l)=>{o();var u=n("Please note that the Backrush instance should be shut down while running these commands.");a(e,u)},$$slots:{default:!0}})},$$slots:{default:!0}});var ne=r(se);d(ne,{children:(t,s)=>{o();var e=n("Restoring functions volume:");a(t,e)},$$slots:{default:!0}});var le=r(ne);k(le,{content:`docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/functions && tar xvf /restore/functions.tar --strip 1"
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n('docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/functions && tar xvf /restore/functions.tar --strip 1"');a(t,e)},$$slots:{default:!0}});var de=r(le);d(de,{children:(t,s)=>{o();var e=n("Restoring uploads volume:");a(t,e)},$$slots:{default:!0}});var ue=r(de);k(ue,{content:`docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/uploads && tar xvf /restore/uploads.tar --strip 1"
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n('docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/uploads && tar xvf /restore/uploads.tar --strip 1"');a(t,e)},$$slots:{default:!0}});var ie=r(ue);d(ie,{children:(t,s)=>{o();var e=n("Restoring the builds volume:");a(t,e)},$$slots:{default:!0}});var ce=r(ie);k(ce,{content:`docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/builds && tar xvf /restore/builds.tar --strip 1"
`,language:"bash",process:!0,children:(t,s)=>{o();var e=n('docker run --rm --volumes-from "$(docker-compose ps -q backrush)" -v $PWD/backup:/restore ubuntu bash -c "cd /storage/builds && tar xvf /restore/builds.tar --strip 1"');a(t,e)},$$slots:{default:!0}});var pe=r(ce);d(pe,{children:(t,s)=>{o();var e=n("This command creates a new temporary Docker container similar to the backup command, but instead of creating a backup, it extracts the tar file back into the functions and uploads endpoints to restore the backup.");a(t,e)},$$slots:{default:!0}});var $e=r(pe);g($e,{level:1,children:(t,s)=>{o();var e=Ue(),l=r(h(e));p(l,{content:"_APP_OPENSSL_KEY_V1"}),o(),a(t,e)},$$slots:{default:!0}});var he=r($e);d(he,{children:(t,s)=>{o();var e=Ne(),l=r(h(e));p(l,{content:"_APP_OPENSSL_KEY_V1"}),o(),a(t,e)},$$slots:{default:!0}});var me=r(he);g(me,{level:1,children:(t,s)=>{o();var e=n("Conclusion");a(t,e)},$$slots:{default:!0}});var ve=r(me);d(ve,{children:(t,s)=>{o();var e=n("To create a complete Backrush backup, you'll need to back up MariaDB and the two specified volumes. Once you’ve done this, ensure the backup is stored safely. The best practice is to store it in multiple locations, both locally and across different cloud services. Like with any cloud-native application, regular backups of your Backrush instance are essential to prevent data loss in case of a server failure.");a(t,e)},$$slots:{default:!0}});var fe=r(ve);d(fe,{children:(t,s)=>{o();var e=n("This process makes migrating an Backrush installation simple. Just copy the backup files to another server and run the restore steps.");a(t,e)},$$slots:{default:!0}});var _e=r(fe);d(_e,{children:(t,s)=>{o();var e=He(),l=r(h(e));P(l,{href:"https://github.com/backrush/backrush/issues",children:(v,c)=>{o();var m=n("open issues");a(v,m)},$$slots:{default:!0}});var u=r(l,2);P(u,{href:"https://github.com/backrush/rfc/pulls",children:(v,c)=>{o();var m=n("ongoing RFCs");a(v,m)},$$slots:{default:!0}}),o(),a(t,e)},$$slots:{default:!0}});var be=r(_e);d(be,{children:(t,s)=>{o();var e=Ke(),l=r(h(e));P(l,{href:"https://backrush.io/discord",children:(u,v)=>{o();var c=n("friendly support channels");a(u,c)},$$slots:{default:!0}}),o(),a(t,e)},$$slots:{default:!0}});var ke=r(be);d(ke,{children:(t,s)=>{o();var e=n("Here are some handy links for more information:");a(t,e)},$$slots:{default:!0}});var xe=r(ke);w(xe,{ordered:!1,marker:"-",children:(t,s)=>{var e=Ge(),l=h(e);b(l,{children:(c,m)=>{P(c,{href:"https://github.com/backrush/backrush/blob/master/CONTRIBUTING.md",children:(i,f)=>{o();var _=n("Backrush contribution guide");a(i,_)},$$slots:{default:!0}})},$$slots:{default:!0}});var u=r(l);b(u,{children:(c,m)=>{P(c,{href:"https://github.com/backrush",children:(i,f)=>{o();var _=n("Backrush Github");a(i,_)},$$slots:{default:!0}})},$$slots:{default:!0}});var v=r(u);b(v,{children:(c,m)=>{P(c,{href:"https://backrush.io/docs",children:(i,f)=>{o();var _=n("Backrush docs");a(i,_)},$$slots:{default:!0}})},$$slots:{default:!0}}),a(t,e)},$$slots:{default:!0}}),qe(y),a(ye,y)},$$slots:{default:!0}}))}const bt=Object.freeze(Object.defineProperty({__proto__:null,default:ze,frontmatter:we},Symbol.toStringTag,{value:"Module"}));export{bt as _,ze as a};
