import{t as l,b as o,a as e}from"./Cw4I5osi.js";import"./BzVk5r6l.js";import{c as ce,s as r,f as d,n as t,r as ue}from"./NgVQVlRK.js";import{n as pe}from"./B4IyMRKX.js";import{H as D}from"./CXsRaEhZ.js";import"./hMT8fFzP.js";import"./NwRJ91PD.js";/* empty css        */import"./BZUG4Puk.js";/* empty css        */import"./D9bBQFLV.js";import{C as A}from"./DXp9_3zM.js";import{F as me}from"./OFUKRh55.js";import{L as j,I as c}from"./BhmTgGWB.js";import{P as T}from"./D8YsId2T.js";import{S as y}from"./yHjwcyUH.js";import{L as oe}from"./yh4_9ChP.js";import"./POtwinrL.js";import"./CbbZjpT6.js";/* empty css        */import{P as $e}from"./CEkRzcqJ.js";const ne={layout:"post",title:"How password hashing algorithms keep your data safe",description:"Learn about password hashing algorithms and how they help secure user credentials in your application.",date:"2023-10-20T00:00:00.000Z",cover:"/images/blog/password-hashing-algorithms.png",timeToRead:7,author:"aditya-oberai",category:"security"};var fe=l("<!> are specialized mathematical functions that transform plain text passwords into unique, fixed-size outputs, known as hashes, which are then stored in databases. Through the use of techniques such as salting, adjustable work factors, and memory hardness, modern password hashing algorithms are designed to prevent attacks like rainbow tables and data breaches.",1),ve=l("<!>: Combines the password and salt, possibly using concatenation or a more complex operation.",1),ge=l("<!>: Repeatedly applies a hash function &#39;n&#39; times to &#39;data&#39; to increase computational complexity.",1),_e=l("<!>: Applies the primary hash function to the data and optionally incorporates memory hardness.",1),we=l("<!><!><!>",1),Pe=l("The result is a fixed-size hash that is unique, deterministic, and resistant to reverse engineering, ensuring the secure storage and verification of passwords. For example, inputting a string <!> into a hashing function that uses the SHA-256 algorithm would output <!>.",1),be=l("<!><br>Password hashing algorithms should be one-way functions, so it&#39;s nearly impossible to reverse-engineer the original password from the hash. This prevents attackers from getting user passwords from stored hashes.",1),ye=l("<!><br>A password hashing algorithm must always produce the same hash output for a given input to ensure consistency and reliability.",1),ke=l("<!><br>Password hashing algorithms must produce a fixed-size output (hash) regardless of the input size. This is necessary when verifying the password inputted by comparing it with its hash.",1),xe=l("<!><br>Unlike general hashing algorithms, which prioritize fast computation, password hashing algorithms should be intentionally slow to compute. This characteristic makes it more time-consuming and resource-intensive for attackers to perform brute-force attacks or attempt to guess passwords using a large number of inputs.",1),Ae=l("<!><br>A small change in the input should cause a big change in the hash output, making the new output look unrelated to the old one. This makes it hard for attackers to guess the input from the output or find two inputs that create the same hash (collision). For example, the SHA-256 hash for <!> is <!>, but for <!> is <!>, despite having only one different character.",1),Ie=l("<!><br>The output of a password hashing algorithm should look random and evenly spread out, so attackers can&#39;t find patterns or guess relationships between the inputs and their hash outputs.",1),Te=l("<!><br>Password hashing algorithms should be designed to resist side-channel attacks. An example of this would timing attacks, where an attacker attempts to gain information about the password or hash by analyzing the time taken to compute the hash.",1),Se=l("<!><br>A good password hashing algorithm should let you adjust the work factor, which means increasing the complexity over time as hardware gets better. This keeps the password hashing process secure and too resource-intensive for dictionary attacks.",1),Ce=l("<!><br>Some modern password hashing algorithms are designed to be memory-hard, meaning that they require a significant amount of memory to compute the hash. This characteristic makes it more difficult for attackers to perform parallel attacks using specialized hardware, such as GPUs or ASICs, which have limited memory resources.",1),ze=l("<!><br>A reliable password hashing algorithm should have a proven track record, be widely adopted, and have undergone extensive peer review and analysis by the cryptographic community. This ensures that the algorithm has been tested for vulnerabilities and is considered secure for password storage and verification.",1),De=l("<!><!><!><!><!><!><!><!><!><!>",1),je=l("<!><br>Bcrypt is a widely used password hashing algorithm based on the Blowfish cipher. It incorporates a salt and an adjustable work factor to slow down the hashing process, making brute-force attacks more time-consuming. Bcrypt is designed to be resistant to side-channel attacks and is considered secure for password storage.",1),Fe=l("<!><br>Scrypt is a memory-hard password hashing algorithm that requires a significant amount of memory to compute the hash, making it more difficult for attackers to perform parallel attacks using specialized hardware. It also supports adjustable work factors and salt usage. Scrypt was specifically designed to protect against hardware-based attacks, such as those using GPUs or ASICs.",1),He=l("<!>: optimized for resistance to side-channel attacks",1),Be=l("<!>: optimized for resistance to time-memory trade-off (TMTO) attacks",1),qe=l("<!>: a hybrid version of both of the above",1),Oe=l("<!><!><!>",1),Re=l("<!><br>Argon2 is a modern, memory-hard password hashing algorithm that won the Password Hashing Competition in 2015. It offers adjustable work factors for both time (computation) and memory usage, providing a balance between security and performance. Argon2 supports salting and has three main variants:<!>",1),Ee=l("<!><br>PBKDF2 is a widely-used password hashing algorithm that iteratively applies a pseudorandom function, such as HMAC, to the input password and salt. It supports an adjustable work factor, increasing the number of iterations to make the hashing process slower and more resistant to attacks. While PBKDF2 is considered secure, it is not memory-hard and may be more susceptible to hardware-based attacks compared to <!> or <!>. These modern password hashing algorithms are designed to provide increased security for password storage and verification by incorporating features like salting, adjustable work factors, memory hardness, and resistance to various types of attacks.",1),Me=l("<!><!><!><!>",1),Ke=l("Backrush Authentication also leverages password hashing algorithms to allow developers to secure their users’ passwords via password hashing algorithms. Backrush uses the <!> algorithm to hash the password when a user creates an account from a client-side application. Backrush’s SDKs offer a simple abstraction for the Backrush Accounts API to let developers implement this, like the following example:",1),Le=l("<!><!><!><!><!><!><!>",1),We=l("An additional side-benefit this offers is that it allows a developer to migrate users from other platforms, such as Firebase, Supabase, and Nhost, using <!>.",1),Ge=l("If you want to implement an authentication system that leverages the power of hashing algorithms simply and quickly, try <!>.",1),Ue=l("<article><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!></article>");function Ne(ie){$e(ie,pe(ne,{children:(le,Je)=>{var F=Ue(),H=ce(F);T(H,{children:(s,u)=>{t();var a=o("In today's digital world, keeping sensitive information like passwords secure is extremely important. Password hashing algorithms are essential for protecting user credentials and ensuring authentication systems are reliable.");e(s,a)},$$slots:{default:!0}});var B=r(H);T(B,{children:(s,u)=>{t();var a=o("In this blog, we'll break down how password hashing algorithms work, highlight their key features, and review some of the most popular and secure algorithms. This will help you make informed choices when setting up password storage and verification in your applications.");e(s,a)},$$slots:{default:!0}});var q=r(B);D(q,{level:2,children:(s,u)=>{t();var a=o("What is a password hashing algorithm?");e(s,a)},$$slots:{default:!0}});var O=r(q);T(O,{children:(s,u)=>{var a=fe(),f=d(a);y(f,{marker:"**",children:(w,S)=>{t();var P=o("Password hashing algorithms");e(w,P)},$$slots:{default:!0}}),t(),e(s,a)},$$slots:{default:!0}});var R=r(O);T(R,{children:(s,u)=>{t();var a=o("Password hashing involves using a hash function to combine a password with a unique value called a salt. This process is repeated multiple times based on a set difficulty level. Sometimes, additional memory usage is included to make the process even more complex and secure.");e(s,a)},$$slots:{default:!0}});var E=r(R);T(E,{children:(s,u)=>{t();var a=o("This function would operate as follows:");e(s,a)},$$slots:{default:!0}});var M=r(E);T(M,{children:(s,u)=>{A(s,{content:"hash_result = HashFunction(Iterate(Combine(password, salt), work_factor), memory_hardness)"})},$$slots:{default:!0}});var K=r(M);T(K,{children:(s,u)=>{t();var a=o("Where:");e(s,a)},$$slots:{default:!0}});var L=r(K);j(L,{ordered:!1,marker:"-",children:(s,u)=>{var a=we(),f=d(a);c(f,{children:(P,x)=>{var b=ve(),v=d(b);y(v,{marker:"**",children:(i,_)=>{A(i,{content:"Combine(password, salt)"})},$$slots:{default:!0}}),t(),e(P,b)},$$slots:{default:!0}});var w=r(f);c(w,{children:(P,x)=>{var b=ge(),v=d(b);y(v,{marker:"**",children:(i,_)=>{A(i,{content:"Iterate(data, n)"})},$$slots:{default:!0}}),t(),e(P,b)},$$slots:{default:!0}});var S=r(w);c(S,{children:(P,x)=>{var b=_e(),v=d(b);y(v,{marker:"**",children:(i,_)=>{A(i,{content:"HashFunction(data, memory_hardness)"})},$$slots:{default:!0}}),t(),e(P,b)},$$slots:{default:!0}}),e(s,a)},$$slots:{default:!0}});var W=r(L);T(W,{children:(s,u)=>{t();var a=Pe(),f=r(d(a));A(f,{content:"loremipsum"});var w=r(f,2);A(w,{content:"5245a52778d684fa698f69861fb2e058b308f6a74fed5bf2fe77d97bad5e071c"}),t(),e(s,a)},$$slots:{default:!0}});var G=r(W);D(G,{level:3,children:(s,u)=>{t();var a=o("Characteristics of password hashing algorithms");e(s,a)},$$slots:{default:!0}});var U=r(G);T(U,{children:(s,u)=>{t();var a=o("Password hashing algorithms have certain characteristics:");e(s,a)},$$slots:{default:!0}});var N=r(U);j(N,{ordered:!1,marker:"-",children:(s,u)=>{var a=De(),f=d(a);c(f,{children:(h,I)=>{var n=be(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("One-way function");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var w=r(f);c(w,{children:(h,I)=>{var n=ye(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Deterministic");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var S=r(w);c(S,{children:(h,I)=>{var n=ke(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Fixed-size output");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var P=r(S);c(P,{children:(h,I)=>{var n=xe(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Slow computation");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var x=r(P);c(x,{children:(h,I)=>{var n=Ae(),m=d(n);y(m,{marker:"**",children:(z,Ze)=>{t();var he=o("Avalanche effect");e(z,he)},$$slots:{default:!0}});var g=r(m,3);A(g,{content:"eight"});var k=r(g,2);A(k,{content:"c195d2d8756234367242ba7616c5c60369bc25ced2dcb5b92808d31b58ef217a"});var $=r(k,2);A($,{content:"right"});var C=r($,2);A(C,{content:"27042f4e6eca7d0b2a7ee4026df2ecfa51d3339e6d122aa099118ecd8563bad9"}),t(),e(h,n)},$$slots:{default:!0}});var b=r(x);c(b,{children:(h,I)=>{var n=Ie(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Pseudorandomness");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var v=r(b);c(v,{children:(h,I)=>{var n=Te(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Resistance to side-channel attacks");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var i=r(v);c(i,{children:(h,I)=>{var n=Se(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Adjustable work factor");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var _=r(i);c(_,{children:(h,I)=>{var n=Ce(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Memory hardness");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}});var p=r(_);c(p,{children:(h,I)=>{var n=ze(),m=d(n);y(m,{marker:"**",children:(g,k)=>{t();var $=o("Wide adoption and peer review");e(g,$)},$$slots:{default:!0}}),t(2),e(h,n)},$$slots:{default:!0}}),e(s,a)},$$slots:{default:!0}});var J=r(N);D(J,{level:2,children:(s,u)=>{t();var a=o("Examples of password-hashing algorithms");e(s,a)},$$slots:{default:!0}});var Z=r(J);T(Z,{children:(s,u)=>{t();var a=o("Here are some modern password-hashing algorithms and their concise descriptions:");e(s,a)},$$slots:{default:!0}});var Q=r(Z);j(Q,{ordered:!1,marker:"-",children:(s,u)=>{var a=Me(),f=d(a);c(f,{children:(x,b)=>{var v=je(),i=d(v);y(i,{marker:"**",children:(_,p)=>{t();var h=o("Bcrypt");e(_,h)},$$slots:{default:!0}}),t(2),e(x,v)},$$slots:{default:!0}});var w=r(f);c(w,{children:(x,b)=>{var v=Fe(),i=d(v);y(i,{marker:"**",children:(_,p)=>{t();var h=o("Scrypt");e(_,h)},$$slots:{default:!0}}),t(2),e(x,v)},$$slots:{default:!0}});var S=r(w);c(S,{children:(x,b)=>{var v=Re(),i=d(v);y(i,{marker:"**",children:(p,h)=>{t();var I=o("Argon2");e(p,I)},$$slots:{default:!0}});var _=r(i,3);j(_,{ordered:!1,marker:"-",children:(p,h)=>{var I=Oe(),n=d(I);c(n,{children:(k,$)=>{var C=He(),z=d(C);A(z,{content:"Argon2i"}),t(),e(k,C)},$$slots:{default:!0}});var m=r(n);c(m,{children:(k,$)=>{var C=Be(),z=d(C);A(z,{content:"Argon2d"}),t(),e(k,C)},$$slots:{default:!0}});var g=r(m);c(g,{children:(k,$)=>{var C=qe(),z=d(C);A(z,{content:"Argon2id"}),t(),e(k,C)},$$slots:{default:!0}}),e(p,I)},$$slots:{default:!0}}),e(x,v)},$$slots:{default:!0}});var P=r(S);c(P,{children:(x,b)=>{var v=Ee(),i=d(v);y(i,{marker:"**",children:(h,I)=>{t();var n=o("PBKDF2 (Password-Based Key Derivation Function 2)");e(h,n)},$$slots:{default:!0}});var _=r(i,3);A(_,{content:"scrypt"});var p=r(_,2);A(p,{content:"Argon2"}),t(),e(x,v)},$$slots:{default:!0}}),e(s,a)},$$slots:{default:!0}});var V=r(Q);D(V,{level:2,children:(s,u)=>{t();var a=o("Password hashing and Backrush");e(s,a)},$$slots:{default:!0}});var X=r(V);T(X,{children:(s,u)=>{t();var a=Ke(),f=r(d(a));A(f,{content:"Argon2id"}),t(),e(s,a)},$$slots:{default:!0}});var Y=r(X);me(Y,{content:`import { Client, Account, ID } from 'backrush';

const client = new Client()
    .setEndpoint('https://<REGION>.cloud.backrush.io/v1')
    .setProject('<PROJECT_ID>');

const account = new Account(client);

const user = await account.create(ID.unique, 'email@example.com', 'password');
`,language:"client-web",process:!0,children:(s,u)=>{t();var a=o(`import { Client, Account, ID } from 'backrush';

const client = new Client()
    .setEndpoint('https://<REGION>.cloud.backrush.io/v1')
    .setProject('<PROJECT_ID>');

const account = new Account(client);

const user = await account.create(ID.unique, 'email@example.com', 'password');`);e(s,a)},$$slots:{default:!0}});var ee=r(Y);T(ee,{children:(s,u)=>{t();var a=o("When a developer implements account creation on a server-side application, however, the Backrush Users API allows them to input a password that has been hashed using any of the following hashing algorithms:");e(s,a)},$$slots:{default:!0}});var te=r(ee);j(te,{ordered:!1,marker:"-",children:(s,u)=>{var a=Le(),f=d(a);c(f,{children:(i,_)=>{t();var p=o("Argon2");e(i,p)},$$slots:{default:!0}});var w=r(f);c(w,{children:(i,_)=>{t();var p=o("Bcrypt");e(i,p)},$$slots:{default:!0}});var S=r(w);c(S,{children:(i,_)=>{t();var p=o("MD5");e(i,p)},$$slots:{default:!0}});var P=r(S);c(P,{children:(i,_)=>{t();var p=o("Scrypt");e(i,p)},$$slots:{default:!0}});var x=r(P);c(x,{children:(i,_)=>{t();var p=o("Scrypt Modified");e(i,p)},$$slots:{default:!0}});var b=r(x);c(b,{children:(i,_)=>{t();var p=o("PHPass");e(i,p)},$$slots:{default:!0}});var v=r(b);c(v,{children:(i,_)=>{t();var p=o("SHA");e(i,p)},$$slots:{default:!0}}),e(s,a)},$$slots:{default:!0}});var re=r(te);T(re,{children:(s,u)=>{t();var a=We(),f=r(d(a));oe(f,{href:"https://backrush.io/docs/advanced/migrations",children:(w,S)=>{t();var P=o("Backrush Migrations");e(w,P)},$$slots:{default:!0}}),t(),e(s,a)},$$slots:{default:!0}});var ae=r(re);D(ae,{level:2,children:(s,u)=>{t();var a=o("Recap");e(s,a)},$$slots:{default:!0}});var se=r(ae);T(se,{children:(s,u)=>{t();var a=o("In summary, password hashing algorithms are essential tools for securing sensitive user data, particularly passwords, in modern applications. By understanding these algorithms, developers can make informed decisions when implementing password storage and verification systems. and ensure the security and integrity of their users' data.");e(s,a)},$$slots:{default:!0}});var de=r(se);T(de,{children:(s,u)=>{t();var a=Ge(),f=r(d(a));oe(f,{href:"https://backrush.io",children:(w,S)=>{t();var P=o("Backrush");e(w,P)},$$slots:{default:!0}}),t(),e(s,a)},$$slots:{default:!0}}),ue(F),e(le,F)},$$slots:{default:!0}}))}const vt=Object.freeze(Object.defineProperty({__proto__:null,default:Ne,frontmatter:ne},Symbol.toStringTag,{value:"Module"}));export{vt as _,Ne as a};
