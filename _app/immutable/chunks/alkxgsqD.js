import{t as p,b as a,a as s}from"./Cw4I5osi.js";import"./BzVk5r6l.js";import{c as Pe,s as r,f as u,n as o,r as De}from"./NgVQVlRK.js";import{n as xe}from"./B4IyMRKX.js";import{H as _}from"./CXsRaEhZ.js";import"./hMT8fFzP.js";import"./NwRJ91PD.js";/* empty css        */import"./BZUG4Puk.js";/* empty css        */import"./D9bBQFLV.js";import{C as m}from"./DXp9_3zM.js";import{F as D}from"./OFUKRh55.js";import{L as _e,I as b}from"./BhmTgGWB.js";import{P as l}from"./D8YsId2T.js";import{S as x}from"./yHjwcyUH.js";import{L as P}from"./yh4_9ChP.js";import"./POtwinrL.js";import"./CbbZjpT6.js";/* empty css        */import{P as ke}from"./CEkRzcqJ.js";const ge={layout:"post",title:"Deno 2.0 and what it means for Backrush Functions",description:"Explore Deno 2.0's key features, what they mean for Backrush Functions, and why you should consider using it.",date:"2024-10-09T00:00:00.000Z",cover:"/images/blog/deno-2-appwrite-functions/cover.png",timeToRead:6,author:"ebenezer-don",category:"product"};var je=p("For example, if your code needs to make an API call over the network, you need to provide the <!> flag:",1),Ne=p("Similarly, file read or write permissions need to be granted through the <!> and <!> flags:",1),Te=p("In Deno 2.0, the permission system is more refined. The error handling has been updated, introducing the <!> error. This makes it easier to distinguish between Deno-specific permission issues and those originating from the operating system, providing clearer feedback for debugging. Additionally, certain permissions, such as those for accessing the main module (<!>), have been relaxed.",1),Ae=p("Deno&#39;s built-in TypeScript support continues to be a core strength, eliminating the need for additional tools like Babel or <!>. This direct support simplifies the development process, allowing developers to write TypeScript without worrying about setup or transpiling configurations. For TypeScript-heavy projects, this is a key advantage.",1),Se=p("Deno avoids the traditional <!> directory by using a URL-based module system. Rather than relying on npm for package management, Deno imports dependencies directly from URLs. This modern approach minimizes the risk of dependency conflicts and reduces the overall size of the project, which is especially important for cloud deployments and serverless environments like those in Backrush.",1),Ie=p("With Deno 2.0, dependency management has been further enhanced. New commands like <!> and <!> simplify the process of managing dependencies. Additionally, Deno 2.0 introduces a new lockfile format (v4) that minimizes differences in dependency updates and ensures reproducible builds.",1),Fe=p("One of the early challenges for Deno was its limited compatibility with Node.js modules. Deno 2.0 addresses this by introducing better support for Node.js&#39;s <!> global variable, allowing developers to run more Node.js code without modification. This is a major step forward for those looking to migrate projects from Node.js to Deno or work in environments that require both.",1),We=p("Deno 2.0 simplifies how developers manage dependencies. New tools like <!> allow you to add specific modules with ease, while <!> can quickly remove unwanted dependencies. These commands streamline project workflows, making it easier to manage external libraries. Additionally, Deno 2.0&#39;s updated lockfile format ensures smaller diffs during updates and makes builds more consistent across environments.",1),ze=p("Deno 2.0 also removes or deprecates certain commands that developers found underwhelming in earlier versions. For instance, the <!> and <!> commands have been removed. These commands didn&#39;t provide the level of flexibility developers expected, and future versions of Deno are likely to introduce more powerful replacements.",1),Le=p("Deno 2.0 has stabilized several key APIs, including the <!>, which previously required an <!> flag. You can now use WebGPU and other previously unstable APIs in production without needing additional flags. This move toward stabilization reflects Deno&#39;s goal of providing a more mature and reliable development environment.",1),qe=p("<!>: Compared to Node.js, Deno has a smaller ecosystem. Node.js&#39;s npm ecosystem is large, with many mature packages. While Deno&#39;s Node.js compatibility is much better, it still doesn&#39;t match the number of libraries available on npm.",1),Re=p("<!>: Despite its potential, Deno is not yet as widely used as Node.js. Node.js has had a significant head start and will likely remain the dominant runtime for server-side JavaScript for now. This means fewer community resources, libraries, and tools will be available for Deno, compared to Node.js.",1),Ce=p("<!>: While this won&#39;t be a significant issue if you&#39;re already familiar with Node.js and TypeScript, using Deno for the first time may require some adjustment. The differences in module management, permissions, and runtime behavior can be challenging for newcomers.",1),He=p("<!>: Migrating existing Node.js projects to Deno can be complex, especially for large codebases with many dependencies. While Deno 2.0 has improved compatibility with Node.js, the process of migrating code can still be time-consuming and error-prone.",1),Ee=p("<!><!><!><!>",1),Ge=p("Deno 2.0 just released today, and Backrush is already ahead of the curve in supporting it. In Backrush, you can now build serverless functions using Deno, and take advantage of its security features, TypeScript support, and modern module management. To get started with Deno in Backrush, head over to the <!>, and just like you would with Node.js when creating a new function, select Deno as the runtime.",1),Me=p("We will release a detailed tutorial on building serverless functions with Deno and Backrush soon, so stay connected with us on <!> and <!> to see it first.",1),Ue=p("<!><!><!>",1),Be=p("<article><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!></article>");function Je(we){ke(we,xe(ge,{children:(ye,Oe)=>{var k=Be(),N=Pe(k);l(N,{children:(t,n)=>{o();var e=a("Deno 2.0 is the latest version of the secure, modern runtime created by Ryan Dahl, the same developer behind Node.js. For years, Node.js has been the go-to runtime for building server-side JavaScript applications. It's familiar, it's powerful, and it has a huge ecosystem of libraries. But like any technology, Node.js isn't without its flaws.");s(t,e)},$$slots:{default:!0}});var T=r(N);l(T,{children:(t,n)=>{o();var e=a("Deno was built to address most of Node.js' issues, especially around security, dependency management, and TypeScript support. Deno is designed to be a more secure and modern alternative to Node.js, with a focus on server-side applications, which makes it a good choice for Backrush Functions.");s(t,e)},$$slots:{default:!0}});var A=r(T);l(A,{children:(t,n)=>{o();var e=a("This article will give you an overview of Deno 2.0, its benefits, key features, and how it compares to Node.js in Backrush.");s(t,e)},$$slots:{default:!0}});var S=r(A);_(S,{level:1,children:(t,n)=>{o();var e=a("Key features of Deno 2.0");s(t,e)},$$slots:{default:!0}});var I=r(S);l(I,{children:(t,n)=>{o();var e=a("Deno 2.0 builds on the foundation laid by the earlier versions, introducing several new features and improvements. Here are some of the key features of Deno 2.0:");s(t,e)},$$slots:{default:!0}});var F=r(I);_(F,{level:2,children:(t,n)=>{o();var e=a("1. Secure by default");s(t,e)},$$slots:{default:!0}});var W=r(F);l(W,{children:(t,n)=>{o();var e=a("Deno has always prioritized security, but version 2.0 refines its permission system even further. One of the major distinctions between Deno and Node.js is how they handle permissions. In Node.js, your code can access the file system, environment variables, or network without any restrictions, posing potential security risks, particularly in cloud environments. Deno, on the other hand, requires explicit permission for each of these actions. When running a Deno program, developers must specify flags to allow access to specific resources.");s(t,e)},$$slots:{default:!0}});var z=r(W);l(z,{children:(t,n)=>{o();var e=je(),i=r(u(e));m(i,{content:"--allow-net"}),o(),s(t,e)},$$slots:{default:!0}});var L=r(z);D(L,{content:`deno run --allow-net app.ts

`,language:"bash",process:!0,children:(t,n)=>{o();var e=a("deno run --allow-net app.ts");s(t,e)},$$slots:{default:!0}});var q=r(L);l(q,{children:(t,n)=>{o();var e=Ne(),i=r(u(e));m(i,{content:"--allow-read"});var d=r(i,2);m(d,{content:"--allow-write"}),o(),s(t,e)},$$slots:{default:!0}});var R=r(q);D(R,{content:`deno run --allow-read --allow-write app.ts

`,language:"bash",process:!0,children:(t,n)=>{o();var e=a("deno run --allow-read --allow-write app.ts");s(t,e)},$$slots:{default:!0}});var C=r(R);l(C,{children:(t,n)=>{o();var e=Te(),i=r(u(e));m(i,{content:"Deno.errors.Notcapable"});var d=r(i,2);m(d,{content:"Deno.mainModule"}),o(),s(t,e)},$$slots:{default:!0}});var H=r(C);_(H,{level:2,children:(t,n)=>{o();var e=a("2. Native TypeScript support");s(t,e)},$$slots:{default:!0}});var E=r(H);l(E,{children:(t,n)=>{o();var e=Ae(),i=r(u(e));m(i,{content:"ts-node"}),o(),s(t,e)},$$slots:{default:!0}});var G=r(E);l(G,{children:(t,n)=>{o();var e=a("Fo example, you can write TypeScript code directly in Deno:");s(t,e)},$$slots:{default:!0}});var M=r(G);D(M,{content:`const message: string = 'Hello from Deno!'
console.log(message)

`,language:"tsx",process:!0,children:(t,n)=>{o();var e=a(`const message: string = 'Hello from Deno!'
console.log(message)`);s(t,e)},$$slots:{default:!0}});var U=r(M);l(U,{children:(t,n)=>{o();var e=a("In JavaScript, you would need to transpile this code to run it in Node.js. However, Deno can execute TypeScript code directly.");s(t,e)},$$slots:{default:!0}});var B=r(U);l(B,{children:(t,n)=>{o();var e=a("In addition, Deno 2.0 ships with TypeScript 5.6, giving you the latest TypeScript features. This out-of-the-box TypeScript support is one of Deno's primary differentiators from Node.js, which requires more complex setups to achieve the same functionality.");s(t,e)},$$slots:{default:!0}});var J=r(B);_(J,{level:2,children:(t,n)=>{o();var e=a("3. Modern module system");s(t,e)},$$slots:{default:!0}});var O=r(J);l(O,{children:(t,n)=>{o();var e=Se(),i=r(u(e));m(i,{content:"node_modules"}),o(),s(t,e)},$$slots:{default:!0}});var K=r(O);l(K,{children:(t,n)=>{o();var e=a("For example, importing a module in Deno looks like this:");s(t,e)},$$slots:{default:!0}});var Y=r(K);D(Y,{content:`import { v4 } from 'https://deno.land/std@0.114.0/uuid/mod.ts'
console.log(v4.generate())

`,language:"tsx",process:!0,children:(t,n)=>{o();var e=a(`import { v4 } from 'https://deno.land/std@0.114.0/uuid/mod.ts'
console.log(v4.generate())`);s(t,e)},$$slots:{default:!0}});var Z=r(Y);l(Z,{children:(t,n)=>{o();var e=Ie(),i=r(u(e));m(i,{content:"deno add"});var d=r(i,2);m(d,{content:"deno remove"}),o(),s(t,e)},$$slots:{default:!0}});var Q=r(Z);_(Q,{level:2,children:(t,n)=>{o();var e=a("4. Node.js compatibility");s(t,e)},$$slots:{default:!0}});var V=r(Q);l(V,{children:(t,n)=>{o();var e=Fe(),i=r(u(e));m(i,{content:"process"}),o(),s(t,e)},$$slots:{default:!0}});var X=r(V);l(X,{children:(t,n)=>{o();var e=a("For example, using a Node.js module in Deno 2.0 is straightforward:");s(t,e)},$$slots:{default:!0}});var ee=r(X);D(ee,{content:`console.log('Node.js Process:', process.env.APPWRITE_API_KEY)

`,language:"tsx",process:!0,children:(t,n)=>{o();var e=a("console.log('Node.js Process:', process.env.APPWRITE_API_KEY)");s(t,e)},$$slots:{default:!0}});var te=r(ee);l(te,{children:(t,n)=>{o();var e=a("Deno 2.0 also improves its support for CommonJS modules, which expands the range of Node.js libraries that can be used within Deno without significant rewrites.");s(t,e)},$$slots:{default:!0}});var oe=r(te);_(oe,{level:2,children:(t,n)=>{o();var e=a("5. Better dependency management");s(t,e)},$$slots:{default:!0}});var re=r(oe);l(re,{children:(t,n)=>{o();var e=We(),i=r(u(e));m(i,{content:"deno add"});var d=r(i,2);m(d,{content:"deno remove"}),o(),s(t,e)},$$slots:{default:!0}});var se=r(re);_(se,{level:2,children:(t,n)=>{o();var e=a("6. Deprecation and removal of legacy commands");s(t,e)},$$slots:{default:!0}});var ne=r(se);l(ne,{children:(t,n)=>{o();var e=ze(),i=r(u(e));m(i,{content:"deno bundle"});var d=r(i,2);m(d,{content:"deno vendor"}),o(),s(t,e)},$$slots:{default:!0}});var ae=r(ne);_(ae,{level:2,children:(t,n)=>{o();var e=a("7. Stabilization of APIs and WebGPU");s(t,e)},$$slots:{default:!0}});var ie=r(ae);l(ie,{children:(t,n)=>{o();var e=Le(),i=r(u(e));x(i,{marker:"**",children:(f,$)=>{o();var c=a("WebGPU API");s(f,c)},$$slots:{default:!0}});var d=r(i,2);m(d,{content:"unstable"}),o(),s(t,e)},$$slots:{default:!0}});var le=r(ie);_(le,{level:1,children:(t,n)=>{o();var e=a("Things to consider before starting your Deno project");s(t,e)},$$slots:{default:!0}});var de=r(le);l(de,{children:(t,n)=>{o();var e=a("While Deno 2.0 offers many advantages, there are still some challenges to consider:");s(t,e)},$$slots:{default:!0}});var pe=r(de);_e(pe,{ordered:!0,marker:".",children:(t,n)=>{var e=Ee(),i=u(e);b(i,{children:(c,g)=>{var h=qe(),v=u(h);x(v,{marker:"**",children:(w,j)=>{o();var y=a("Smaller ecosystem");s(w,y)},$$slots:{default:!0}}),o(),s(c,h)},$$slots:{default:!0}});var d=r(i);b(d,{children:(c,g)=>{var h=Re(),v=u(h);x(v,{marker:"**",children:(w,j)=>{o();var y=a("Adoption");s(w,y)},$$slots:{default:!0}}),o(),s(c,h)},$$slots:{default:!0}});var f=r(d);b(f,{children:(c,g)=>{var h=Ce(),v=u(h);x(v,{marker:"**",children:(w,j)=>{o();var y=a("Learning curve");s(w,y)},$$slots:{default:!0}}),o(),s(c,h)},$$slots:{default:!0}});var $=r(f);b($,{children:(c,g)=>{var h=He(),v=u(h);x(v,{marker:"**",children:(w,j)=>{o();var y=a("Migration");s(w,y)},$$slots:{default:!0}}),o(),s(c,h)},$$slots:{default:!0}}),s(t,e)},$$slots:{default:!0}});var ue=r(pe);l(ue,{children:(t,n)=>{o();var e=a("Despite these challenges, Deno 2.0 looks compelling and will likely gain more traction as more developers become familiar with its features and benefits.");s(t,e)},$$slots:{default:!0}});var ce=r(ue);_(ce,{level:1,children:(t,n)=>{o();var e=a("Backrush's support for Deno 2.0");s(t,e)},$$slots:{default:!0}});var me=r(ce);l(me,{children:(t,n)=>{o();var e=Ge(),i=r(u(e));P(i,{href:"https://cloud.appwrite.io/",children:(d,f)=>{o();var $=a("Backrush console");s(d,$)},$$slots:{default:!0}}),o(),s(t,e)},$$slots:{default:!0}});var he=r(me);l(he,{children:(t,n)=>{o();var e=Me(),i=r(u(e));P(i,{href:"https://appwrite.io/discord",children:(f,$)=>{o();var c=a("Discord");s(f,c)},$$slots:{default:!0}});var d=r(i,2);P(d,{href:"https://twitter.com/appwrite",children:(f,$)=>{o();var c=a("Twitter");s(f,c)},$$slots:{default:!0}}),o(),s(t,e)},$$slots:{default:!0}});var ve=r(he);_(ve,{level:1,children:(t,n)=>{o();var e=a("Conclusion");s(t,e)},$$slots:{default:!0}});var $e=r(ve);l($e,{children:(t,n)=>{o();var e=a("With Deno 2.0, the runtime is maturing rapidly and addressing many of the pain points that developers faced with Node.js and Deno 1.x. The improved security, TypeScript support, and modern module system make Deno a compelling choice for building server-side applications.");s(t,e)},$$slots:{default:!0}});var fe=r($e);l(fe,{children:(t,n)=>{o();var e=a("Further reading:");s(t,e)},$$slots:{default:!0}});var be=r(fe);_e(be,{ordered:!1,marker:"-",children:(t,n)=>{var e=Ue(),i=u(e);b(i,{children:($,c)=>{P($,{href:"https://appwrite.io/docs/quick-starts/deno",children:(g,h)=>{o();var v=a("Backrush Deno Documentation");s(g,v)},$$slots:{default:!0}})},$$slots:{default:!0}});var d=r(i);b(d,{children:($,c)=>{P($,{href:"https://appwrite.io/blog/post/functions-local-development-guide",children:(g,h)=>{o();var v=a("Local serverless function development with the new Backrush CLI");s(g,v)},$$slots:{default:!0}})},$$slots:{default:!0}});var f=r(d);b(f,{children:($,c)=>{P($,{href:"https://www.appwrite.io/blog/post/build-a-chat-app-with-appwrite-and-gemini",children:(g,h)=>{o();var v=a("Building a chat app with Backrush and Google Gemini");s(g,v)},$$slots:{default:!0}})},$$slots:{default:!0}}),s(t,e)},$$slots:{default:!0}}),De(k),s(ye,k)},$$slots:{default:!0}}))}const vt=Object.freeze(Object.defineProperty({__proto__:null,default:Je,frontmatter:ge},Symbol.toStringTag,{value:"Module"}));export{vt as _,Je as a};
