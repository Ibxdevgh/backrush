import{t as u,b as i,a}from"./Cw4I5osi.js";import"./BzVk5r6l.js";import{c as Ee,s as r,f as h,n as o,r as Fe}from"./NgVQVlRK.js";import{n as He}from"./B4IyMRKX.js";import{H as p}from"./CXsRaEhZ.js";import"./hMT8fFzP.js";import"./NwRJ91PD.js";/* empty css        */import"./BZUG4Puk.js";/* empty css        */import"./D9bBQFLV.js";import{C as c}from"./DXp9_3zM.js";import{F as v}from"./OFUKRh55.js";import{L as Ce,I as b}from"./BhmTgGWB.js";import{P as l}from"./D8YsId2T.js";import{S as P}from"./yHjwcyUH.js";import{L as k}from"./yh4_9ChP.js";import"./POtwinrL.js";import"./CbbZjpT6.js";/* empty css        */import{P as Me}from"./CEkRzcqJ.js";const Se={layout:"post",title:"10 new Git commands you should start using today",description:"Learn these Git commands to make your workflow smoother, faster, and flexible.",date:"2024-12-12T00:00:00.000Z",cover:"/images/blog/10-git-commands-you-should-start-using/cover.png",timeToRead:10,author:"ebenezer-don",category:"tutorial",featured:!1,callToAction:!0};var De=u("Thankfully, just like every other tool, Git is constantly evolving and adding new features to make our lives easier. While some of these commands aren&#39;t particularly recent, they remain lesser-known gems that can significantly improve your workflow. If you&#39;re already familiar with some of the core tips and tricksâ€”like those covered in <!>, this article will introduce you to ten additional commands that can take your Git skills to the next level.",1),Ue=u("Before Git 2.23, <!> was the main command for switching branches, but it did much more than that. You could use it to restore files, create branches, or check out specific commits. This made it powerful but potentially confusing - especially when you just wanted to switch branches without touching your files.",1),ze=u("That&#39;s why Git 2.23 introduced <!> as a more focused alternative for branch operations. With <!>, you can focus solely on branch management:",1),Ye=u("This clarity reduces the risk of accidentally overwriting files or making unintended changes. If you&#39;ve ever hesitated to use <!> for fear of doing something wrong, <!> simplifies the process.",1),Oe=u("Undoing changes often involved using <!> to revert files or <!> to move the branch HEAD. However, both commands had the potential to alter your branch state if used incorrectly: <!> could move your branch HEAD, while <!> could switch branches or check out a different commit, disrupting the current branch.",1),Be=u("Git 2.23 introduced <!> to focus solely on undoing changes to files. It provides a safer and more straightforward way to revert changes in your working directory or staging area, clearly separating file operations from branch management tasks:",1),Qe=u("As repositories grow, performance can degrade. Operations like <!>, <!>, or <!> may slow down, and unused data can clutter your repository. Before Git 2.29, you&#39;d have to manually run commands like <!> (garbage collection) or <!> to keep your repository optimized.",1),Je=u("Git 2.29 introduced <!>, which automates these tasks for you:",1),Ke=u("<!> Removes unreachable objects, such as commits discarded during rebases or branch deletions.",1),Ne=u("<!> Consolidates fragmented packfiles for better storage efficiency.",1),Ze=u("<!> Optimizes commit history traversal, speeding up commands like <!> and <!>.",1),Ve=u("<!><!><!>",1),Xe=u("Using <!> will help you keep your repository healthy without manual effort.",1),et=u("Monorepos are great for managing multiple projects, but cloning an entire repository when you only need a specific directory can be inefficient. Git 2.25 introduced <!> to solve this.",1),tt=u("With <!>, you can include only the directories or files you need in your working directory, leaving the rest untouched. This is useful for large teams working on distinct parts of a monorepo, and will save you time and disk space.",1),rt=u("When your team makes a bulk formatting change, <!> can lose its utility, as every line ends up pointing to the formatting commit instead of the original author.",1),ot=u("Introduced in Git 2.23, the <!> option allows you to exclude such commits:",1),at=u("Rewriting history, whether through rebasing, cherry-picking, or interactive editing, can be tricky. After a rebase, you might wonder how the rewritten commits differ from the originals. <!> helps by comparing two commit ranges, showing how one evolved into the other and highlighting changes to individual commits:",1),nt=u("Switching branches in a single working directory can disrupt your workflow, especially when you need to work across multiple branches. With <!>, you can create additional working directories tied to the same repository.",1),st=u("<!> allows you to work on different branches without switching or stashing. You can also create throwaway worktrees with detached HEADs for testing, or isolate builds and deployments in separate working directories.",1),it=u("Rebasing rewrites history by replacing old commits with new ones, but this often leaves branch pointers or tags referencing outdated commits. Git 2.38 introduces the <!> option to handle this automatically:",1),lt=u("While not a new feature (introduced in Git 1.7.4, back in 2011), <!> is often overlooked despite being a useful tool for maintaining clean commit histories. When working on a feature, you might realize that you need to fix or improve a previous commit. Manually editing your commit history to include these changes can lead to errors. Git provides <!> and <!> to automate this process.",1),ct=u("The <!> option creates a commit that&#39;s marked to be automatically squashed into the target commit during an interactive rebase with <!>. This streamlines the process of cleaning up your commit history before merging changes, and will ensure that related changes are grouped together without manual effort.",1),dt=u("If you liked this article, you might also enjoy <!>.",1),ut=u("<!><!><!>",1),ht=u("<article><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!></article>");function gt(qe){Me(qe,He(Se,{children:(We,mt)=>{var x=ht(),T=Ee(x);l(T,{children:(t,n)=>{o();var e=i("If you've worked with Git long enough, you've probably hit some common frustrations like operations getting slower as repositories grow, accidentally overwriting changes when switching branches, or struggling with massive monorepos.");a(t,e)},$$slots:{default:!0}});var j=r(T);l(j,{children:(t,n)=>{o();var e=De(),s=r(h(e));k(s,{href:"https://appwrite.io/blog/post/15-git-cli-tips?dofollow=true",children:(d,f)=>{o();var g=i("15 Git command line tips every developer should know");a(d,g)},$$slots:{default:!0}}),o(),a(t,e)},$$slots:{default:!0}});var R=r(j);p(R,{level:1,children:(t,n)=>{o();var e=i("1. git switch - A safer way to change branches");a(t,e)},$$slots:{default:!0}});var A=r(R);l(A,{children:(t,n)=>{o();var e=Ue(),s=r(h(e));c(s,{content:"git checkout"}),o(),a(t,e)},$$slots:{default:!0}});var C=r(A);l(C,{children:(t,n)=>{o();var e=ze(),s=r(h(e));c(s,{content:"git switch"});var d=r(s,2);c(d,{content:"git switch"}),o(),a(t,e)},$$slots:{default:!0}});var S=r(C);v(S,{content:`# Move to another branch
git switch feature-branch

# Create and switch to a new branch
git switch -c new-branch

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i(`# Move to another branch
git switch feature-branch

# Create and switch to a new branch
git switch -c new-branch`);a(t,e)},$$slots:{default:!0}});var q=r(S);l(q,{children:(t,n)=>{o();var e=Ye(),s=r(h(e));c(s,{content:"git checkout"});var d=r(s,2);c(d,{content:"git switch"}),o(),a(t,e)},$$slots:{default:!0}});var W=r(q);p(W,{level:1,children:(t,n)=>{o();var e=i("2. git restore - Safely undo changes");a(t,e)},$$slots:{default:!0}});var I=r(W);l(I,{children:(t,n)=>{o();var e=Oe(),s=r(h(e));c(s,{content:"git checkout"});var d=r(s,2);c(d,{content:"git reset"});var f=r(d,2);c(f,{content:"git reset"});var g=r(f,2);c(g,{content:"git checkout"}),o(),a(t,e)},$$slots:{default:!0}});var L=r(I);l(L,{children:(t,n)=>{o();var e=Be(),s=r(h(e));c(s,{content:"git restore"}),o(),a(t,e)},$$slots:{default:!0}});var E=r(L);v(E,{content:`# Discard working directory changes
git restore main.js

# Unstage changes from the index
git restore --staged main.js

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i(`# Discard working directory changes
git restore main.js

# Unstage changes from the index
git restore --staged main.js`);a(t,e)},$$slots:{default:!0}});var F=r(E);l(F,{children:(t,n)=>{o();var e=i("This is especially useful for beginners or in high-stakes situations where precision matters. You can undo changes without worrying about accidentally switching branches or resetting commits.");a(t,e)},$$slots:{default:!0}});var H=r(F);p(H,{level:1,children:(t,n)=>{o();var e=i("3. git maintenance - Automate repository health");a(t,e)},$$slots:{default:!0}});var M=r(H);l(M,{children:(t,n)=>{o();var e=Qe(),s=r(h(e));c(s,{content:"git fetch"});var d=r(s,2);c(d,{content:"git status"});var f=r(d,2);c(f,{content:"git log"});var g=r(f,2);c(g,{content:"git gc"});var y=r(g,2);c(y,{content:"git repack"}),o(),a(t,e)},$$slots:{default:!0}});var D=r(M);l(D,{children:(t,n)=>{o();var e=Je(),s=r(h(e));c(s,{content:"git maintenance"}),o(),a(t,e)},$$slots:{default:!0}});var U=r(D);v(U,{content:`# Enable automatic maintenance
git maintenance start

# Run cleanup tasks immediately
git maintenance run

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i(`# Enable automatic maintenance
git maintenance start

# Run cleanup tasks immediately
git maintenance run`);a(t,e)},$$slots:{default:!0}});var z=r(U);l(z,{children:(t,n)=>{P(t,{marker:"**",children:(e,s)=>{o();var d=i("What's happening behind the scenes?");a(e,d)},$$slots:{default:!0}})},$$slots:{default:!0}});var Y=r(z);Ce(Y,{ordered:!1,marker:"-",children:(t,n)=>{var e=Ve(),s=h(e);b(s,{children:(g,y)=>{var m=Ke(),_=h(m);P(_,{marker:"**",children:($,G)=>{o();var w=i("Garbage Collection:");a($,w)},$$slots:{default:!0}}),o(),a(g,m)},$$slots:{default:!0}});var d=r(s);b(d,{children:(g,y)=>{var m=Ne(),_=h(m);P(_,{marker:"**",children:($,G)=>{o();var w=i("Repacking:");a($,w)},$$slots:{default:!0}}),o(),a(g,m)},$$slots:{default:!0}});var f=r(d);b(f,{children:(g,y)=>{var m=Ze(),_=h(m);P(_,{marker:"**",children:(w,ft)=>{o();var Le=i("Commit Graph Updates:");a(w,Le)},$$slots:{default:!0}});var $=r(_,2);c($,{content:"git log"});var G=r($,2);c(G,{content:"git blame"}),o(),a(g,m)},$$slots:{default:!0}}),a(t,e)},$$slots:{default:!0}});var O=r(Y);l(O,{children:(t,n)=>{o();var e=Xe(),s=r(h(e));c(s,{content:"git maintenance"}),o(),a(t,e)},$$slots:{default:!0}});var B=r(O);p(B,{level:1,children:(t,n)=>{o();var e=i("4. git sparse-checkout - Efficiently handle large repositories");a(t,e)},$$slots:{default:!0}});var Q=r(B);l(Q,{children:(t,n)=>{o();var e=et(),s=r(h(e));c(s,{content:"git sparse-checkout"}),o(),a(t,e)},$$slots:{default:!0}});var J=r(Q);v(J,{content:`# Enable sparse-checkout mode
git sparse-checkout init

# Fetch only specific directories
# You can specify multiple directories separated by spaces
git sparse-checkout set services/ docs/

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i(`# Enable sparse-checkout mode
git sparse-checkout init

# Fetch only specific directories
# You can specify multiple directories separated by spaces
git sparse-checkout set services/ docs/`);a(t,e)},$$slots:{default:!0}});var K=r(J);l(K,{children:(t,n)=>{o();var e=tt(),s=r(h(e));c(s,{content:"git sparse-checkout"}),o(),a(t,e)},$$slots:{default:!0}});var N=r(K);p(N,{level:1,children:(t,n)=>{o();var e=i("5. git log --remerge-diff: Understand merges better");a(t,e)},$$slots:{default:!0}});var Z=r(N);l(Z,{children:(t,n)=>{o();var e=i("Merge commits often show which branches were merged, but they don't always explain the specific changes introduced, especially when conflicts were resolved during the merge.");a(t,e)},$$slots:{default:!0}});var V=r(Z);l(V,{children:(t,n)=>{o();var e=i("Starting with Git 2.35, you can use:");a(t,e)},$$slots:{default:!0}});var X=r(V);v(X,{content:`git log --remerge-diff
`,language:"bash",process:!0,children:(t,n)=>{o();var e=i("git log --remerge-diff");a(t,e)},$$slots:{default:!0}});var ee=r(X);l(ee,{children:(t,n)=>{o();var e=i("This option reconstructs the merge commit by replaying the recorded merge strategy and showing the exact changes it introduced. It's useful for debugging merge conflicts or reviewing a complicated merge history.");a(t,e)},$$slots:{default:!0}});var te=r(ee);p(te,{level:1,children:(t,n)=>{o();var e=i("6. git blame --ignore-rev - Ignore noisy commits");a(t,e)},$$slots:{default:!0}});var re=r(te);l(re,{children:(t,n)=>{o();var e=rt(),s=r(h(e));c(s,{content:"git blame"}),o(),a(t,e)},$$slots:{default:!0}});var oe=r(re);l(oe,{children:(t,n)=>{o();var e=ot(),s=r(h(e));c(s,{content:"--ignore-rev"}),o(),a(t,e)},$$slots:{default:!0}});var ae=r(oe);v(ae,{content:`git blame --ignore-rev commit-hash

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i("git blame --ignore-rev commit-hash");a(t,e)},$$slots:{default:!0}});var ne=r(ae);l(ne,{children:(t,n)=>{o();var e=i("To persist this exclusion, you can set up an ignore-revs file:");a(t,e)},$$slots:{default:!0}});var se=r(ne);v(se,{content:`# Add the commit hash to the ignore-revs fileecho commit-hash >> .git-blame-ignore-revs

# Tell Git to use the file
git config blame.ignoreRevsFile .git-blame-ignore-revs

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i(`# Add the commit hash to the ignore-revs fileecho commit-hash >> .git-blame-ignore-revs

# Tell Git to use the file
git config blame.ignoreRevsFile .git-blame-ignore-revs`);a(t,e)},$$slots:{default:!0}});var ie=r(se);l(ie,{children:(t,n)=>{o();var e=i("This helps you focus on meaningful authorship and can be useful in codebases with frequent style updates.");a(t,e)},$$slots:{default:!0}});var le=r(ie);p(le,{level:1,children:(t,n)=>{o();var e=i("7. git range-diff - Compare and track changes between commit ranges");a(t,e)},$$slots:{default:!0}});var ce=r(le);l(ce,{children:(t,n)=>{o();var e=at(),s=r(h(e));c(s,{content:"git range-diff"}),o(),a(t,e)},$$slots:{default:!0}});var de=r(ce);v(de,{content:`git range-diff

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i("git range-diff");a(t,e)},$$slots:{default:!0}});var ue=r(de);l(ue,{children:(t,n)=>{o();var e=i("This command can be used to understand the evolution of a feature or bug fix across different branches.");a(t,e)},$$slots:{default:!0}});var he=r(ue);p(he,{level:1,children:(t,n)=>{o();var e=i("8. git worktree - Work on multiple branches simultaneously");a(t,e)},$$slots:{default:!0}});var ge=r(he);l(ge,{children:(t,n)=>{o();var e=nt(),s=r(h(e));c(s,{content:"git worktree"}),o(),a(t,e)},$$slots:{default:!0}});var me=r(ge);v(me,{content:`# Add a new worktree for a specific branch
git worktree add ../feature-branch feature-branch

# Remove a worktree when you're done
git worktree remove ../feature-branch

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i(`# Add a new worktree for a specific branch
git worktree add ../feature-branch feature-branch

# Remove a worktree when you're done
git worktree remove ../feature-branch`);a(t,e)},$$slots:{default:!0}});var fe=r(me);l(fe,{children:(t,n)=>{var e=st(),s=h(e);c(s,{content:"git worktree"}),o(),a(t,e)},$$slots:{default:!0}});var $e=r(fe);p($e,{level:1,children:(t,n)=>{o();var e=i("9. git rebase --update-refs - Keep references in sync");a(t,e)},$$slots:{default:!0}});var pe=r($e);l(pe,{children:(t,n)=>{o();var e=it(),s=r(h(e));c(s,{content:"--update-refs"}),o(),a(t,e)},$$slots:{default:!0}});var ve=r(pe);v(ve,{content:`git rebase --update-refs

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i("git rebase --update-refs");a(t,e)},$$slots:{default:!0}});var _e=r(ve);l(_e,{children:(t,n)=>{o();var e=i("With this command, Git ensures that related branches and tags referencing rewritten commits are updated to match the new history. This eliminates the need for tedious manual updates and ensures consistency across your repository.");a(t,e)},$$slots:{default:!0}});var ye=r(_e);l(ye,{children:(t,n)=>{o();var e=i("For even more control, you can configure git rebase to always update specific refs by setting:");a(t,e)},$$slots:{default:!0}});var be=r(ye);v(be,{content:`git config rebase.updateRefs true

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i("git config rebase.updateRefs true");a(t,e)},$$slots:{default:!0}});var we=r(be);l(we,{children:(t,n)=>{o();var e=i("This is useful in collaborative workflows or when managing multiple refs tied to the same history.");a(t,e)},$$slots:{default:!0}});var ke=r(we);p(ke,{level:1,children:(t,n)=>{o();var e=i("10. git commit --fixup and git rebase --autosquash - Fixup commits");a(t,e)},$$slots:{default:!0}});var Pe=r(ke);l(Pe,{children:(t,n)=>{o();var e=lt(),s=r(h(e));c(s,{content:"git commit --fixup"});var d=r(s,2);c(d,{content:"git commit --fixup"});var f=r(d,2);c(f,{content:"git rebase --autosquash"}),o(),a(t,e)},$$slots:{default:!0}});var xe=r(Pe);v(xe,{content:`# Create a fixup commit targeting a specific commit
git commit --fixup=<commit-hash>

# Later, during an interactive rebase, automatically squash fixup commits
git rebase -i --autosquash <base-branch>

`,language:"bash",process:!0,children:(t,n)=>{o();var e=i(`# Create a fixup commit targeting a specific commit
git commit --fixup=<commit-hash>

# Later, during an interactive rebase, automatically squash fixup commits
git rebase -i --autosquash <base-branch>`);a(t,e)},$$slots:{default:!0}});var Ge=r(xe);l(Ge,{children:(t,n)=>{o();var e=ct(),s=r(h(e));c(s,{content:"--fixup"});var d=r(s,2);c(d,{content:"--autosquash"}),o(),a(t,e)},$$slots:{default:!0}});var Te=r(Ge);p(Te,{level:1,children:(t,n)=>{o();var e=i("Conclusion");a(t,e)},$$slots:{default:!0}});var je=r(Te);l(je,{children:(t,n)=>{o();var e=i("The commands we've discussed in this article can help you solve real problems you might be facing every day as a Git user. Whether you're managing a monorepo, handling large histories, or trying to keep your repository clean, these practical solutions can make a difference. Start with one or two that fit your current workflow, and you might be surprised by the improvements in your productivity.");a(t,e)},$$slots:{default:!0}});var Re=r(je);l(Re,{children:(t,n)=>{o();var e=dt(),s=r(h(e));k(s,{href:"https://appwrite.io/blog/post/15-git-cli-tips?dofollow=true",children:(d,f)=>{o();var g=i("15 Git command line tips every developer should know");a(d,g)},$$slots:{default:!0}}),o(),a(t,e)},$$slots:{default:!0}});var Ae=r(Re);p(Ae,{level:1,children:(t,n)=>{o();var e=i("More resources");a(t,e)},$$slots:{default:!0}});var Ie=r(Ae);Ce(Ie,{ordered:!1,marker:"-",children:(t,n)=>{var e=ut(),s=h(e);b(s,{children:(g,y)=>{k(g,{href:"https://appwrite.io/blog/post/implement-sign-in-with-github",children:(m,_)=>{o();var $=i("How to implement Sign in with GitHub");a(m,$)},$$slots:{default:!0}})},$$slots:{default:!0}});var d=r(s);b(d,{children:(g,y)=>{k(g,{href:"https://appwrite.io/blog/post/sql-vs-nosql",children:(m,_)=>{o();var $=i("SQL vs NoSQL: Choosing the right database for your project");a(m,$)},$$slots:{default:!0}})},$$slots:{default:!0}});var f=r(d);b(f,{children:(g,y)=>{k(g,{href:"https://appwrite.io/blog/post/deno-vs-bun-javascript-runtime",children:(m,_)=>{o();var $=i("Deno 2 vs Bun: which JavaScript runtime is right for you?");a(m,$)},$$slots:{default:!0}})},$$slots:{default:!0}}),a(t,e)},$$slots:{default:!0}}),Fe(x),a(We,x)},$$slots:{default:!0}}))}const Et=Object.freeze(Object.defineProperty({__proto__:null,default:gt,frontmatter:Se},Symbol.toStringTag,{value:"Module"}));export{Et as _,gt as a};
