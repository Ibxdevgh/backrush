import{t as d,b as s,a}from"../chunks/Cw4I5osi.js";import"../chunks/BzVk5r6l.js";import{c as B,s as r,f as u,n as t,r as G}from"../chunks/NgVQVlRK.js";import{n as z}from"../chunks/B4IyMRKX.js";import{H as y}from"../chunks/CXsRaEhZ.js";import"../chunks/hMT8fFzP.js";import{I as J}from"../chunks/BypEz2Fd.js";import"../chunks/NwRJ91PD.js";/* empty css                */import"../chunks/BZUG4Puk.js";/* empty css                */import"../chunks/D9bBQFLV.js";import{C as $}from"../chunks/DXp9_3zM.js";import{F as w}from"../chunks/OFUKRh55.js";import{L as Q,I as P}from"../chunks/BhmTgGWB.js";import{P as f}from"../chunks/D8YsId2T.js";import{S as X}from"../chunks/yHjwcyUH.js";import{L as x}from"../chunks/yh4_9ChP.js";import"../chunks/POtwinrL.js";import"../chunks/CbbZjpT6.js";/* empty css                */import{A as Z}from"../chunks/CqOphJLh.js";const ee={layout:"article",title:"TLS Certificates",description:"Secure your self-hosted Backrush instance with TLS certificates. Learn how to obtain, configure, and manage TLS certificates for enhanced security."};var te=d("Your <!> <!> should be set for production mode. The default Backrush setup comes with this predefined setting, so you should be OK unless you change it.",1),re=d("You need to ensure you have a valid email address set on <!>. The default setup comes with <!> as the default value. While this address will work, it&#39;s recommended to change it to your own email.",1),oe=d("Currently, Backrush is using the <!> HTTP challenge to issue an TLS certificate. This forces us to generate certificates for port 443 when the challenge itself is performed on port 80. At this point, other ports will not work. To overcome this limit, you can set Backrush on a separate sub-domain or use your own certificate or proxy server in front of Backrush.",1),ae=d("<!><!><!><!>",1),ne=d("Backrush auto-generates a certificate for your main domain when you first visit it. If your browser shows an insecure connection warning, you must proceed to trigger certificate generation. The domain in environment variable <!> is considered your main domain. If you didn&#39;t set this variable, the first domain you visit would be marked as the main domain for your Backrush instance. Backrush follows this concept of the main domain to prevent generating certificates for domains you don&#39;t own. Keep in mind that you can always add additional domains as <!> in your project settings to enable certificate generation for any domain.",1),se=d("Certificate renewal is done as a part of the Backrush maintenance task. Unless modified with environment variable <!>, this task runs every 24 hours. During this task, Backrush looks for certificates due for renewal and renews them. One maintenance cycle only attempts to renew up to 200 certificates to respect the Let&#39;s Encrypt API limit. Every Let&#39;s Encrypt certificate is valid for 90 days, but Backrush starts to renew them 30 days before the expiration.",1),ie=d("You can&#39;t issue a <!>. This is because nobody uniquely owns that hostname and not an Backrush specific limitation, just the way the internet works. By default, Backrush will issue a self-signed certificate that is good enough for development.",1),le=d("When using a self-signed certificate, you should enable <!> method in your SDK of choice. This will allow your application to trust and connect with your local Backrush server.",1),ce=d("After editing your <!> or <!> files, you will need to recreate your Backrush stack by running the following compose command in your terminal.",1),de=d("<!><!><!><!>",1),pe=d("<article><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!><!></article>");function Me(j){Z(j,z(ee,{children:(q,ue)=>{var A=pe(),b=B(A);f(b,{children:(o,l)=>{t();var e=s("Backrush uses Let's Encrypt to auto-generate TLS certificates for your Backrush instance to ensure your API traffic is appropriately encrypted. For Backrush to properly generate certificates, a few conditions need to be met.");a(o,e)},$$slots:{default:!0}});var k=r(b);Q(k,{ordered:!0,marker:".",children:(o,l)=>{var e=ae(),c=u(e);P(c,{children:(i,v)=>{t();var n=s("You need to use a public-facing domain with a known TLD pointing to your Backrush instance.");a(i,n)},$$slots:{default:!0}});var m=r(c);P(m,{children:(i,v)=>{t();var n=te(),p=r(u(n));$(p,{content:"_APP_ENV"});var _=r(p,2);x(_,{href:"https://appwrite.io/docs/environment-variables",children:(R,U)=>{t();var W=s("environment variable");a(R,W)},$$slots:{default:!0}}),t(),a(i,n)},$$slots:{default:!0}});var h=r(m);P(h,{children:(i,v)=>{t();var n=re(),p=r(u(n));$(p,{content:"_APP_SYSTEM_SECURITY_EMAIL_ADDRESS"});var _=r(p,2);$(_,{content:"certs@appwrite.io"}),t(),a(i,n)},$$slots:{default:!0}});var g=r(h);P(g,{children:(i,v)=>{t();var n=oe(),p=r(u(n));x(p,{href:"https://letsencrypt.org/docs/client-options/",children:(_,R)=>{t();var U=s("ACME");a(_,U)},$$slots:{default:!0}}),t(),a(i,n)},$$slots:{default:!0}}),a(o,e)},$$slots:{default:!0}});var T=r(k);y(T,{id:"debugging",level:1,children:(o,l)=>{t();var e=s("Debugging");a(o,e)},$$slots:{default:!0}});var S=r(T);f(S,{children:(o,l)=>{t();var e=s("If you're still struggling with your certificates, check the Backrush certificates worker log. You can do that with the following command:");a(o,e)},$$slots:{default:!0}});var I=r(S);w(I,{content:`docker compose logs appwrite-worker-certificates
`,language:"bash",process:!0,children:(o,l)=>{t();var e=s("docker compose logs appwrite-worker-certificates");a(o,e)},$$slots:{default:!0}});var L=r(I);y(L,{id:"generation-cycle",level:1,children:(o,l)=>{t();var e=s("Generation cycle");a(o,e)},$$slots:{default:!0}});var E=r(L);f(E,{children:(o,l)=>{t();var e=ne(),c=r(u(e));$(c,{content:"_APP_DOMAIN"});var m=r(c,2);X(m,{marker:"**",children:(h,g)=>{t();var i=s("Custom Domains");a(h,i)},$$slots:{default:!0}}),t(),a(o,e)},$$slots:{default:!0}});var C=r(E);f(C,{children:(o,l)=>{t();var e=se(),c=r(u(e));$(c,{content:"_APP_MAINTENANCE_INTERVAL"}),t(),a(o,e)},$$slots:{default:!0}});var D=r(C);y(D,{id:"manual-generation",level:1,children:(o,l)=>{t();var e=s("Manual generation");a(o,e)},$$slots:{default:!0}});var Y=r(D);f(Y,{children:(o,l)=>{t();var e=s("Since Backrush generates and renews certificates automatically, a manual generation is seldom required. A manual generation can be useful when you hit the API limit and don't want to wait for the next maintenance cycle to renew the certificate. Use the following command to generate a certificate for your main domain:");a(o,e)},$$slots:{default:!0}});var M=r(Y);w(M,{content:`docker compose exec appwrite ssl
`,language:"bash",process:!0,children:(o,l)=>{t();var e=s("docker compose exec appwrite ssl");a(o,e)},$$slots:{default:!0}});var N=r(M);f(N,{children:(o,l)=>{t();var e=s("If you want to generate a certificate for a specific domain, pass it as a parameter into the command:");a(o,e)},$$slots:{default:!0}});var F=r(N);w(F,{content:`docker compose exec appwrite ssl domain="api.myapp.com"
`,language:"bash",process:!0,children:(o,l)=>{t();var e=s('docker compose exec appwrite ssl domain="api.myapp.com"');a(o,e)},$$slots:{default:!0}});var H=r(F);y(H,{id:"development-and-localhost",level:1,children:(o,l)=>{t();var e=s("Development and localhost");a(o,e)},$$slots:{default:!0}});var K=r(H);f(K,{children:(o,l)=>{t();var e=ie(),c=r(u(e));x(c,{href:"https://letsencrypt.org/docs/certificates-for-localhost/",children:(m,h)=>{t();var g=s("signed certificate for localhost");a(m,g)},$$slots:{default:!0}}),t(),a(o,e)},$$slots:{default:!0}});var O=r(K);f(O,{children:(o,l)=>{t();var e=le(),c=r(u(e));$(c,{content:"client.setSelfSigned()"}),t(),a(o,e)},$$slots:{default:!0}});var V=r(O);J(V,{title:"Applying changes",children:(o,l)=>{var e=de(),c=u(e);f(c,{children:(i,v)=>{t();var n=ce(),p=r(u(n));$(p,{content:"docker-compose.yml"});var _=r(p,2);$(_,{content:".env"}),t(),a(i,n)},$$slots:{default:!0}});var m=r(c);w(m,{content:`docker compose up -d
`,language:"sh",process:!0,children:(i,v)=>{t();var n=s("docker compose up -d");a(i,n)},$$slots:{default:!0}});var h=r(m);f(h,{children:(i,v)=>{t();var n=s("You can verify if the changes have been successfully applied by running this command:");a(i,n)},$$slots:{default:!0}});var g=r(h);w(g,{content:`docker compose exec appwrite vars
`,language:"sh",process:!0,children:(i,v)=>{t();var n=s("docker compose exec appwrite vars");a(i,n)},$$slots:{default:!0}}),a(o,e)}}),G(A),a(q,A)},$$slots:{default:!0}}))}export{Me as component};
