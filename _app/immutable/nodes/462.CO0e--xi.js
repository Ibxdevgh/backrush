import{t as $,b as a,a as r}from"../chunks/Cw4I5osi.js";import"../chunks/BzVk5r6l.js";import{s,f as v,c as T,n as e,r as D}from"../chunks/NgVQVlRK.js";import{n as L}from"../chunks/B4IyMRKX.js";import"../chunks/NwRJ91PD.js";import"../chunks/POtwinrL.js";import"../chunks/CbbZjpT6.js";/* empty css                */import"../chunks/hMT8fFzP.js";import{I as K}from"../chunks/BypEz2Fd.js";/* empty css                */import{A as j}from"../chunks/CP6rnx7i.js";import"../chunks/BZUG4Puk.js";/* empty css                */import"../chunks/D9bBQFLV.js";import"../chunks/DOf4ro_L.js";import"../chunks/CKaMv3wE.js";/* empty css                */import{P as m}from"../chunks/D8YsId2T.js";import{S as F}from"../chunks/yHjwcyUH.js";import{L as u}from"../chunks/yh4_9ChP.js";import{A as M}from"../chunks/CqOphJLh.js";const z={layout:"article",title:"Manage users",description:"Manage user identities and profiles effectively with Backrush. Dive into user management features, account settings, and user data customization"};var C=$("Backrush Users API is used for managing users in server applications. Users API can only be used with an API key with the <!>, to manage all users. If you need to act on behalf of users through an Backrush Function or your own backend, use <!>.",1),J=$("The Account API is the API you should use in your <!> with <!> like web, Flutter, mobile, and native apps. Account API creates sessions, which represent an authenticated user and is attached to a user&#39;s <!>. Sessions respect <!>, which means users can only access resources if they have been granted the correct permissions.",1),W=$("The Users API is a dedicated API for managing users from an admin&#39;s perspective. It should be used with backend or server-side applications with <!>. Users API uses API keys instead of sessions. This means they&#39;re not restricted by permissions, but by the scopes granted to the API key used.",1),q=$("<!><!>",1),B=$("<article><!><!><!><!></article>");function pe(x){M(x,L(z,{children:(S,E)=>{var _=B(),y=T(_);m(y,{children:(n,P)=>{e();var t=C(),c=s(v(t));u(c,{href:"/docs/sdks#server",children:(i,A)=>{e();var o=a("Server SDK");r(i,o)},$$slots:{default:!0}});var p=s(c,2);u(p,{href:"/docs/products/auth/jwt",children:(i,A)=>{e();var o=a("JWT login");r(i,o)},$$slots:{default:!0}}),e(),r(n,t)},$$slots:{default:!0}});var b=s(y);K(b,{title:"Account vs Users API",children:(n,P)=>{var t=q(),c=v(t);m(c,{children:(i,A)=>{e();var o=J(),h=s(v(o));F(h,{marker:"**",children:(d,w)=>{e();var l=a("client applications");r(d,l)},$$slots:{default:!0}});var f=s(h,2);u(f,{href:"/docs/sdks#client",children:(d,w)=>{e();var l=a("Client SDKs");r(d,l)},$$slots:{default:!0}});var g=s(f,2);u(g,{href:"/docs/products/auth/accounts",children:(d,w)=>{e();var l=a("account");r(d,l)},$$slots:{default:!0}});var I=s(g,2);u(I,{href:"/docs/advanced/platform/permissions",children:(d,w)=>{e();var l=a("permissions");r(d,l)},$$slots:{default:!0}}),e(),r(i,o)},$$slots:{default:!0}});var p=s(c);m(p,{children:(i,A)=>{e();var o=W(),h=s(v(o));u(h,{href:"/docs/sdks#server",children:(f,g)=>{e();var I=a("Server SDKs");r(f,I)},$$slots:{default:!0}}),e(),r(i,o)},$$slots:{default:!0}}),r(n,t)}});var k=s(b);m(k,{children:(n,P)=>{e();var t=a("The users API can be used to create users, import users, update user info, get user audit logs, and remove users.");r(n,t)},$$slots:{default:!0}});var U=s(k);j(U,{href:"/docs/references/cloud/server-nodejs/users",children:(n,P)=>{m(n,{children:(t,c)=>{e();var p=a("Learn more in the Users API references");r(t,p)},$$slots:{default:!0}})},$$slots:{default:!0}}),D(_),r(S,_)},$$slots:{default:!0}}))}export{pe as component};
