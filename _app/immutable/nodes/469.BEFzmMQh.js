import{t as h,b as l,a as e}from"../chunks/Cw4I5osi.js";import"../chunks/BzVk5r6l.js";import{c as Q,s as n,f as g,n as t,r as V}from"../chunks/NgVQVlRK.js";import{n as j}from"../chunks/B4IyMRKX.js";import{H as W}from"../chunks/CXsRaEhZ.js";import"../chunks/hMT8fFzP.js";import"../chunks/NwRJ91PD.js";import{C as H,a as R}from"../chunks/rEuJ3T1U.js";import{a as F,O as K}from"../chunks/uti8MWrk.js";/* empty css                */import"../chunks/BZUG4Puk.js";/* empty css                */import"../chunks/D9bBQFLV.js";import"../chunks/DOf4ro_L.js";import"../chunks/CKaMv3wE.js";/* empty css                */import{L as G,I as p}from"../chunks/BhmTgGWB.js";import{P as m}from"../chunks/D8YsId2T.js";import{S as y}from"../chunks/yHjwcyUH.js";import"../chunks/POtwinrL.js";import"../chunks/CbbZjpT6.js";/* empty css                */import{A as N}from"../chunks/CqOphJLh.js";const U={layout:"article",title:"Offline Sync",description:"Enable offline synchronization of data between your apps and Backrush Databases."};var X=h("<!><!><!><!><!>",1),Y=h("<!> When a user opens your app, the app downloads relevant data from the server and saves it locally on their device via local-first data stores like IndexedDB, LocalStorage, SQLite, or RxDB.",1),Z=h("<!>: While offline, users can either read previously synced data or make changes (create, update, or delete data) in the local data store.",1),ee=h("<!>: The app monitors network status. As soon as connectivity is restored, a sync operation is triggered between the local data store and the Backrush database.",1),te=h("<!>: Local changes are <em>&quot;pushed&quot;</em> to the Backrush database and new changes from the database are <em>&quot;pulled&quot;</em> into the local store. This process is called <!>.",1),re=h("<!>: If the same data was changed both locally and on the server, the system must prioritise one of the two operations. Various strategies can be implemented to mitigate this issue, such as <em>last write wins</em> or <em>manual user conflict resolution</em>.",1),oe=h("<!><!><!><!><!>",1),ae=h("<article><!><!><!><!><!><!><!><!><!><!></article>");function Le(E){N(E,j(U,{children:(J,se)=>{var k=ae(),D=Q(k);m(D,{children:(o,$)=>{t();var r=l("Offline synchronization (or offline sync) is a mechanism that allows apps to store and update data locally when a user is offline (i.e., loses internet connectivity), and then synchronize that data with an Backrush database once the user is back online.");e(o,r)},$$slots:{default:!0}});var L=n(D);m(L,{children:(o,$)=>{t();var r=l("This capability is crucial for building resilient and responsive applications, especially in environments with unreliable or intermittent internet connectivity. Suppose you are driving from one city to another and lose internet connectivitity while passing through a rural area, locally-downloaded maps in your GPS app would ensure that you do not get lost. Another example could be that you are waiting in queue at a supermarket and there is a network outage; an offline-synchronized databases with inventory data would prevent the point-of-sale (POS) systems from failing, ensuring you and your fellow customers can buy groceries.");e(o,r)},$$slots:{default:!0}});var I=n(L);m(I,{children:(o,$)=>{t();var r=l("Some real-world scenarios where offline sync is useful are:");e(o,r)},$$slots:{default:!0}});var O=n(I);G(O,{ordered:!1,marker:"-",children:(o,$)=>{var r=X(),v=g(r);p(v,{children:(a,c)=>{t();var s=l("Journaling and note-taking apps");e(a,s)},$$slots:{default:!0}});var P=n(v);p(P,{children:(a,c)=>{t();var s=l("Warehouse inventory management systems");e(a,s)},$$slots:{default:!0}});var w=n(P);p(w,{children:(a,c)=>{t();var s=l("Medical data entry tools");e(a,s)},$$slots:{default:!0}});var x=n(w);p(x,{children:(a,c)=>{t();var s=l("Airline check-in management apps");e(a,s)},$$slots:{default:!0}});var A=n(x);p(A,{children:(a,c)=>{t();var s=l("GPS navigation software");e(a,s)},$$slots:{default:!0}}),e(o,r)},$$slots:{default:!0}});var q=n(O);W(q,{level:1,children:(o,$)=>{t();var r=l("Integrate offline sync in your apps");e(o,r)},$$slots:{default:!0}});var z=n(q);F(z,{children:(o,$)=>{H(o,{children:(r,v)=>{R(r,{href:"/integrations/replication-rxdb",image:"/images/docs/databases/offline/logos/rxdb.svg",title:"RxDB"})}})}});var T=n(z);K(T,{children:(o,$)=>{H(o,{children:(r,v)=>{R(r,{href:"/integrations/replication-rxdb",image:"/images/docs/databases/offline/logos/dark/rxdb.svg",title:"RxDB"})}})}});var B=n(T);W(B,{level:1,children:(o,$)=>{t();var r=l("How does offline sync work?");e(o,r)},$$slots:{default:!0}});var C=n(B);m(C,{children:(o,$)=>{t();var r=l("The process of implementing offline sync in Backrush-powered apps (and in general) is as follows:");e(o,r)},$$slots:{default:!0}});var M=n(C);G(M,{ordered:!0,marker:".",children:(o,$)=>{var r=oe(),v=g(r);p(v,{children:(a,c)=>{m(a,{children:(s,b)=>{var i=Y(),d=g(i);y(d,{marker:"**",children:(u,_)=>{t();var f=l("Local data storage:");e(u,f)},$$slots:{default:!0}}),t(),e(s,i)},$$slots:{default:!0}})},$$slots:{default:!0}});var P=n(v);p(P,{children:(a,c)=>{m(a,{children:(s,b)=>{var i=Z(),d=g(i);y(d,{marker:"**",children:(u,_)=>{t();var f=l("Working offline");e(u,f)},$$slots:{default:!0}}),t(),e(s,i)},$$slots:{default:!0}})},$$slots:{default:!0}});var w=n(P);p(w,{children:(a,c)=>{m(a,{children:(s,b)=>{var i=ee(),d=g(i);y(d,{marker:"**",children:(u,_)=>{t();var f=l("Detecting connectivity");e(u,f)},$$slots:{default:!0}}),t(),e(s,i)},$$slots:{default:!0}})},$$slots:{default:!0}});var x=n(w);p(x,{children:(a,c)=>{m(a,{children:(s,b)=>{var i=te(),d=g(i);y(d,{marker:"**",children:(_,f)=>{t();var S=l("Two-way synchronization");e(_,S)},$$slots:{default:!0}});var u=n(d,6);y(u,{marker:"**",children:(_,f)=>{t();var S=l("push-pull replication");e(_,S)},$$slots:{default:!0}}),t(),e(s,i)},$$slots:{default:!0}})},$$slots:{default:!0}});var A=n(x);p(A,{children:(a,c)=>{m(a,{children:(s,b)=>{var i=re(),d=g(i);y(d,{marker:"**",children:(u,_)=>{t();var f=l("Conflict resolution");e(u,f)},$$slots:{default:!0}}),t(5),e(s,i)},$$slots:{default:!0}})},$$slots:{default:!0}}),e(o,r)},$$slots:{default:!0}}),V(k),e(J,k)},$$slots:{default:!0}}))}export{Le as component};
