{"type":"data","nodes":[{"type":"skip"},{"type":"skip"},{"type":"skip"},{"type":"data","data":[{"service":1,"methods":4},{"name":2,"description":3},"account","The Account service allows you to authenticate and manage a user account. You can use the account service to update user information, retrieve the user sessions across different devices, and fetch the user security logs with his or her recent activity.\n\nRegister new user accounts with the [Create Account](/docs/references/cloud/client-web/account#create), [Create Magic URL session](/docs/references/cloud/client-web/account#createMagicURLToken), or [Create Phone session](/docs/references/cloud/client-web/account#createPhoneToken) endpoint. You can authenticate the user account by using multiple sign-in methods available. Once the user is authenticated, a new session object will be created to allow the user to access his or her private data and settings.\n\nThis service also exposes an endpoint to save and read the [user preferences](/docs/references/cloud/client-web/account#updatePrefs) as a key-value object. This feature is handy if you want to allow extra customization in your app. Common usage for this feature may include saving the user's preferred locale, timezone, or custom app theme.\n",[5,43,55,69,81,97,108,121,136,149,166,190,205,231,246,260,272,290,304,317,334,346,362,375,388,403,414,430,446,460,472,484,497,511,524,540,555,568,578,588,598,614,630,656,670,680,696],{"id":6,"group":2,"demo":7,"title":8,"description":9,"parameters":10,"responses":30,"method":38,"url":39,"rate-limit":40,"rate-time":41,"rate-key":42},"create","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.create(\n    '\u003CUSER_ID>', // userId\n    'email@example.com', // email\n    '', // password\n    '\u003CNAME>' // name (optional)\n);\n\nconsole.log(result);\n","Create account","Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://backrush.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://backrush.io/docs/references/cloud/client-web/account#createEmailSession).",[11,17,21,25],{"name":12,"description":13,"required":14,"type":15,"example":16},"userId","User ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.",true,"string","\u003CUSER_ID>",{"name":18,"description":19,"required":14,"type":15,"example":20},"email","User email.","email@example.com",{"name":22,"description":23,"required":14,"type":15,"example":24},"password","New user password. Must be between 8 and 256 chars.","",{"name":26,"description":27,"required":28,"type":15,"example":29},"name","User name. Max length: 128 chars.",false,"\u003CNAME>",[31],{"code":32,"contentType":33,"models":34},201,"application/json",[35],{"id":36,"name":37},"user","User","post","/account",10,3600,"url:{url},ip:{ip}",{"id":44,"group":2,"demo":45,"title":46,"description":47,"parameters":48,"responses":49,"method":44,"url":39,"rate-limit":54,"rate-time":41,"rate-key":42},"get","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.get();\n\nconsole.log(result);\n","Get account","Get the currently logged in user.",[],[50],{"code":51,"contentType":33,"models":52},200,[53],{"id":36,"name":37},0,{"id":56,"group":57,"demo":58,"title":59,"description":60,"parameters":61,"responses":62,"method":44,"url":68,"rate-limit":54,"rate-time":41,"rate-key":42},"listSessions","sessions","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listSessions();\n\nconsole.log(result);\n","List sessions","Get the list of active sessions across different devices for the currently logged in user.",[],[63],{"code":51,"contentType":33,"models":64},[65],{"id":66,"name":67},"sessionList","Sessions List","/account/sessions",{"id":70,"group":57,"demo":71,"title":72,"description":73,"parameters":74,"responses":75,"method":79,"url":68,"rate-limit":80,"rate-time":41,"rate-key":42},"deleteSessions","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteSessions();\n\nconsole.log(result);\n","Delete sessions","Delete all sessions from the user account and remove any sessions cookies from the end client.",[],[76],{"code":77,"contentType":-1,"models":78},204,[],"delete",100,{"id":82,"group":57,"demo":83,"title":84,"description":85,"parameters":86,"responses":90,"method":44,"url":96,"rate-limit":54,"rate-time":41,"rate-key":42},"getSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.getSession(\n    '\u003CSESSION_ID>' // sessionId\n);\n\nconsole.log(result);\n","Get session","Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used.",[87],{"name":88,"description":89,"required":14,"type":15,"example":-1},"sessionId","Session ID. Use the string 'current' to get the current device session.",[91],{"code":51,"contentType":33,"models":92},[93],{"id":94,"name":95},"session","Session","/account/sessions/{sessionId}",{"id":98,"group":57,"demo":99,"title":100,"description":101,"parameters":102,"responses":105,"method":79,"url":96,"rate-limit":80,"rate-time":41,"rate-key":42},"deleteSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteSession(\n    '\u003CSESSION_ID>' // sessionId\n);\n\nconsole.log(result);\n","Delete session","Logout the user. Use 'current' as the session ID to logout on this device, use a session ID to logout on another device. If you're looking to logout the user on all devices, use [Delete Sessions](https://backrush.io/docs/references/cloud/client-web/account#deleteSessions) instead.",[103],{"name":88,"description":104,"required":14,"type":15,"example":-1},"Session ID. Use the string 'current' to delete the current device session.",[106],{"code":77,"contentType":-1,"models":107},[],{"id":109,"group":57,"demo":110,"title":111,"description":112,"parameters":113,"responses":116,"method":120,"url":96,"rate-limit":40,"rate-time":41,"rate-key":42},"updateSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateSession(\n    '\u003CSESSION_ID>' // sessionId\n);\n\nconsole.log(result);\n","Update session","Use this endpoint to extend a session's length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.",[114],{"name":88,"description":115,"required":14,"type":15,"example":-1},"Session ID. Use the string 'current' to update the current device session.",[117],{"code":51,"contentType":33,"models":118},[119],{"id":94,"name":95},"patch",{"id":122,"group":57,"demo":123,"title":124,"description":125,"parameters":126,"responses":130,"method":38,"url":134,"rate-limit":40,"rate-time":41,"rate-key":135},"createEmailPasswordSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createEmailPasswordSession(\n    'email@example.com', // email\n    'password' // password\n);\n\nconsole.log(result);\n","Create email password session","Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://backrush.io/docs/authentication-security#limits).",[127,128],{"name":18,"description":19,"required":14,"type":15,"example":20},{"name":22,"description":129,"required":14,"type":15,"example":22},"User password. Must be at least 8 chars.",[131],{"code":32,"contentType":33,"models":132},[133],{"id":94,"name":95},"/account/sessions/email","url:{url},email:{param-email}",{"id":137,"group":57,"demo":138,"title":139,"description":140,"parameters":141,"responses":142,"method":38,"url":146,"rate-limit":147,"rate-time":41,"rate-key":148},"createAnonymousSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createAnonymousSession();\n\nconsole.log(result);\n","Create anonymous session","Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://backrush.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://backrush.io/docs/references/cloud/client-web/account#CreateOAuth2Session).",[],[143],{"code":32,"contentType":33,"models":144},[145],{"id":94,"name":95},"/account/sessions/anonymous",50,"ip:{ip}",{"id":150,"group":57,"demo":151,"title":152,"description":153,"parameters":154,"responses":160,"method":38,"url":164,"rate-limit":40,"rate-time":41,"rate-key":165},"createSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createSession(\n    '\u003CUSER_ID>', // userId\n    '\u003CSECRET>' // secret\n);\n\nconsole.log(result);\n","Create session","Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.",[155,156],{"name":12,"description":13,"required":14,"type":15,"example":16},{"name":157,"description":158,"required":14,"type":15,"example":159},"secret","Secret of a token generated by login methods. For example, the `createMagicURLToken` or `createPhoneToken` methods.","\u003CSECRET>",[161],{"code":32,"contentType":33,"models":162},[163],{"id":94,"name":95},"/account/sessions/token","ip:{ip},userId:{param-userId}",{"id":167,"group":57,"demo":168,"title":169,"description":170,"parameters":171,"responses":185,"method":44,"url":189,"rate-limit":147,"rate-time":41,"rate-key":148},"createOAuth2Session","import { Client, Account, OAuthProvider } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\naccount.createOAuth2Session(\n    OAuthProvider.Amazon, // provider\n    'https://example.com', // success (optional)\n    'https://example.com', // failure (optional)\n    [] // scopes (optional)\n);\n\n","Create OAuth2 session","Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Backrush console first. Use the success and failure arguments to provide a redirect URL's back to your app when login is completed.\n\nIf there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://backrush.io/docs/authentication-security#limits).\n",[172,175,178,181],{"name":173,"description":174,"required":14,"type":15,"example":-1},"provider","OAuth2 Provider. Currently, supported providers are: amazon, apple, auth0, authentik, autodesk, bitbucket, bitly, box, dailymotion, discord, disqus, dropbox, etsy, facebook, figma, github, gitlab, google, linkedin, microsoft, notion, oidc, okta, paypal, paypalSandbox, podio, salesforce, slack, spotify, stripe, tradeshift, tradeshiftBox, twitch, wordpress, yahoo, yammer, yandex, zoho, zoom.",{"name":176,"description":177,"required":28,"type":15,"example":-1},"success","URL to redirect back to your app after a successful login attempt.  Only URLs from hostnames in your project's platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",{"name":179,"description":180,"required":28,"type":15,"example":-1},"failure","URL to redirect back to your app after a failed login attempt.  Only URLs from hostnames in your project's platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",{"name":182,"description":183,"required":28,"type":184,"example":-1},"scopes","A list of custom OAuth2 scopes. Check each provider internal docs for a list of supported scopes. Maximum of 100 scopes are allowed, each 4096 characters long.","array",[186],{"code":187,"contentType":-1,"models":188},301,[],"/account/sessions/oauth2/{provider}",{"id":191,"group":192,"demo":193,"title":194,"description":195,"parameters":196,"responses":201,"method":44,"url":204,"rate-limit":147,"rate-time":41,"rate-key":148},"createOAuth2Token","tokens","import { Client, Account, OAuthProvider } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\naccount.createOAuth2Token(\n    OAuthProvider.Amazon, // provider\n    'https://example.com', // success (optional)\n    'https://example.com', // failure (optional)\n    [] // scopes (optional)\n);\n\n","Create OAuth2 token","Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Backrush console first. Use the success and failure arguments to provide a redirect URL's back to your app when login is completed. \n\nIf authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://backrush.io/docs/references/cloud/client-web/account#createSession) endpoint.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://backrush.io/docs/authentication-security#limits).",[197,198,199,200],{"name":173,"description":174,"required":14,"type":15,"example":-1},{"name":176,"description":177,"required":28,"type":15,"example":-1},{"name":179,"description":180,"required":28,"type":15,"example":-1},{"name":182,"description":183,"required":28,"type":184,"example":-1},[202],{"code":187,"contentType":-1,"models":203},[],"/account/tokens/oauth2/{provider}",{"id":206,"group":192,"demo":207,"title":208,"description":209,"parameters":210,"responses":222,"method":38,"url":228,"rate-limit":229,"rate-time":41,"rate-key":230},"createMagicURLToken","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMagicURLToken(\n    '\u003CUSER_ID>', // userId\n    'email@example.com', // email\n    'https://example.com', // url (optional)\n    false // phrase (optional)\n);\n\nconsole.log(result);\n","Create magic URL token","Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://backrush.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user's email address is valid for 1 hour.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://backrush.io/docs/authentication-security#limits).\n",[211,213,214,218],{"name":12,"description":212,"required":14,"type":15,"example":16},"Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.",{"name":18,"description":19,"required":14,"type":15,"example":20},{"name":215,"description":216,"required":28,"type":15,"example":217},"url","URL to redirect the user back to your app from the magic URL login. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.","https://example.com",{"name":219,"description":220,"required":28,"type":221,"example":28},"phrase","Toggle for security phrase. If enabled, email will be send with a randomly generated phrase and the phrase will also be included in the response. Confirming phrases match increases the security of your authentication flow.","boolean",[223],{"code":32,"contentType":33,"models":224},[225],{"id":226,"name":227},"token","Token","/account/tokens/magic-url",60,[135,42],{"id":232,"group":192,"demo":233,"title":234,"description":235,"parameters":236,"responses":240,"method":38,"url":244,"rate-limit":40,"rate-time":41,"rate-key":245},"createEmailToken","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createEmailToken(\n    '\u003CUSER_ID>', // userId\n    'email@example.com', // email\n    false // phrase (optional)\n);\n\nconsole.log(result);\n","Create email token (OTP)","Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://backrush.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's email is valid for 15 minutes.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://backrush.io/docs/authentication-security#limits).",[237,238,239],{"name":12,"description":13,"required":14,"type":15,"example":16},{"name":18,"description":19,"required":14,"type":15,"example":20},{"name":219,"description":220,"required":28,"type":221,"example":28},[241],{"code":32,"contentType":33,"models":242},[243],{"id":226,"name":227},"/account/tokens/email",[135,42],{"id":247,"group":57,"demo":248,"title":249,"description":153,"parameters":250,"responses":254,"method":258,"url":259,"rate-limit":40,"rate-time":41,"rate-key":165},"updateMagicURLSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMagicURLSession(\n    '\u003CUSER_ID>', // userId\n    '\u003CSECRET>' // secret\n);\n\nconsole.log(result);\n","Update magic URL session",[251,252],{"name":12,"description":13,"required":14,"type":15,"example":16},{"name":157,"description":253,"required":14,"type":15,"example":159},"Valid verification token.",[255],{"code":32,"contentType":33,"models":256},[257],{"id":94,"name":95},"put","/account/sessions/magic-url",{"id":261,"group":57,"demo":262,"title":263,"description":153,"parameters":264,"responses":267,"method":258,"url":271,"rate-limit":40,"rate-time":41,"rate-key":165},"updatePhoneSession","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePhoneSession(\n    '\u003CUSER_ID>', // userId\n    '\u003CSECRET>' // secret\n);\n\nconsole.log(result);\n","Update phone session",[265,266],{"name":12,"description":13,"required":14,"type":15,"example":16},{"name":157,"description":253,"required":14,"type":15,"example":159},[268],{"code":32,"contentType":33,"models":269},[270],{"id":94,"name":95},"/account/sessions/phone",{"id":273,"group":192,"demo":274,"title":275,"description":276,"parameters":277,"responses":283,"method":38,"url":287,"rate-limit":40,"rate-time":41,"rate-key":288},"createPhoneToken","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createPhoneToken(\n    '\u003CUSER_ID>', // userId\n    '+12065550100' // phone\n);\n\nconsole.log(result);\n","Create phone token","Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://backrush.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user's phone is valid for 15 minutes.\n\nA user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://backrush.io/docs/authentication-security#limits).",[278,279],{"name":12,"description":212,"required":14,"type":15,"example":16},{"name":280,"description":281,"required":14,"type":15,"example":282},"phone","Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.","+12065550100",[284],{"code":32,"contentType":33,"models":285},[286],{"id":226,"name":227},"/account/tokens/phone",[289,42],"url:{url},phone:{param-phone}",{"id":291,"group":192,"demo":292,"title":293,"description":294,"parameters":295,"responses":296,"method":38,"url":302,"rate-limit":80,"rate-time":41,"rate-key":303},"createJWT","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createJWT();\n\nconsole.log(result);\n","Create JWT","Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Backrush server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.",[],[297],{"code":32,"contentType":33,"models":298},[299],{"id":300,"name":301},"jwt","JWT","/account/jwts","url:{url},userId:{userId}",{"id":305,"group":2,"demo":306,"title":307,"description":308,"parameters":309,"responses":310,"method":44,"url":316,"rate-limit":54,"rate-time":41,"rate-key":42},"getPrefs","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.getPrefs();\n\nconsole.log(result);\n","Get account preferences","Get the preferences as a key-value object for the currently logged in user.",[],[311],{"code":51,"contentType":33,"models":312},[313],{"id":314,"name":315},"preferences","Preferences","/account/prefs",{"id":318,"group":319,"demo":320,"title":321,"description":322,"parameters":323,"responses":327,"method":44,"url":333,"rate-limit":54,"rate-time":41,"rate-key":42},"listLogs","logs","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listLogs(\n    [] // queries (optional)\n);\n\nconsole.log(result);\n","List logs","Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.",[324],{"name":325,"description":326,"required":28,"type":184,"example":-1},"queries","Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Only supported methods are limit and offset",[328],{"code":51,"contentType":33,"models":329},[330],{"id":331,"name":332},"logList","Logs List","/account/logs",{"id":335,"group":2,"demo":336,"title":337,"description":338,"parameters":339,"responses":341,"method":120,"url":345,"rate-limit":54,"rate-time":41,"rate-key":42},"updateName","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateName(\n    '\u003CNAME>' // name\n);\n\nconsole.log(result);\n","Update name","Update currently logged in user account name.",[340],{"name":26,"description":27,"required":14,"type":15,"example":29},[342],{"code":51,"contentType":33,"models":343},[344],{"id":36,"name":37},"/account/name",{"id":347,"group":2,"demo":348,"title":349,"description":350,"parameters":351,"responses":357,"method":120,"url":361,"rate-limit":40,"rate-time":41,"rate-key":42},"updatePassword","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePassword(\n    '', // password\n    'password' // oldPassword (optional)\n);\n\nconsole.log(result);\n","Update password","Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.",[352,354],{"name":22,"description":353,"required":14,"type":15,"example":24},"New user password. Must be at least 8 chars.",{"name":355,"description":356,"required":28,"type":15,"example":22},"oldPassword","Current user password. Must be at least 8 chars.",[358],{"code":51,"contentType":33,"models":359},[360],{"id":36,"name":37},"/account/password",{"id":363,"group":2,"demo":364,"title":365,"description":366,"parameters":367,"responses":370,"method":120,"url":374,"rate-limit":54,"rate-time":41,"rate-key":42},"updateEmail","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateEmail(\n    'email@example.com', // email\n    'password' // password\n);\n\nconsole.log(result);\n","Update email","Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request.\nThis endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.\n",[368,369],{"name":18,"description":19,"required":14,"type":15,"example":20},{"name":22,"description":129,"required":14,"type":15,"example":22},[371],{"code":51,"contentType":33,"models":372},[373],{"id":36,"name":37},"/account/email",{"id":376,"group":2,"demo":377,"title":378,"description":379,"parameters":380,"responses":383,"method":120,"url":387,"rate-limit":54,"rate-time":41,"rate-key":42},"updatePhone","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePhone(\n    '+12065550100', // phone\n    'password' // password\n);\n\nconsole.log(result);\n","Update phone","Update the currently logged in user's phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://backrush.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.",[381,382],{"name":280,"description":281,"required":14,"type":15,"example":282},{"name":22,"description":129,"required":14,"type":15,"example":22},[384],{"code":51,"contentType":33,"models":385},[386],{"id":36,"name":37},"/account/phone",{"id":389,"group":2,"demo":390,"title":391,"description":392,"parameters":393,"responses":399,"method":120,"url":316,"rate-limit":54,"rate-time":41,"rate-key":42},"updatePrefs","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePrefs(\n    {} // prefs\n);\n\nconsole.log(result);\n","Update preferences","Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.",[394],{"name":395,"description":396,"required":14,"type":397,"example":398},"prefs","Prefs key-value JSON object.","object","{}",[400],{"code":51,"contentType":33,"models":401},[402],{"id":36,"name":37},{"id":404,"group":2,"demo":405,"title":406,"description":407,"parameters":408,"responses":409,"method":120,"url":413,"rate-limit":54,"rate-time":41,"rate-key":42},"updateStatus","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateStatus();\n\nconsole.log(result);\n","Update status","Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.",[],[410],{"code":51,"contentType":33,"models":411},[412],{"id":36,"name":37},"/account/status",{"id":415,"group":416,"demo":417,"title":418,"description":419,"parameters":420,"responses":424,"method":38,"url":428,"rate-limit":40,"rate-time":41,"rate-key":429},"createRecovery","recovery","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createRecovery(\n    'email@example.com', // email\n    'https://example.com' // url\n);\n\nconsole.log(result);\n","Create password recovery","Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://backrush.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour.",[421,422],{"name":18,"description":19,"required":14,"type":15,"example":20},{"name":215,"description":423,"required":14,"type":15,"example":217},"URL to redirect the user back to your app from the recovery email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",[425],{"code":32,"contentType":33,"models":426},[427],{"id":226,"name":227},"/account/recovery",[135,42],{"id":431,"group":416,"demo":432,"title":433,"description":434,"parameters":435,"responses":441,"method":258,"url":428,"rate-limit":40,"rate-time":41,"rate-key":445},"updateRecovery","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateRecovery(\n    '\u003CUSER_ID>', // userId\n    '\u003CSECRET>', // secret\n    '' // password\n);\n\nconsole.log(result);\n","Update password recovery (confirmation)","Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://backrush.io/docs/references/cloud/client-web/account#createRecovery) endpoint.\n\nPlease note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.",[436,438,440],{"name":12,"description":437,"required":14,"type":15,"example":16},"User ID.",{"name":157,"description":439,"required":14,"type":15,"example":159},"Valid reset token.",{"name":22,"description":23,"required":14,"type":15,"example":24},[442],{"code":51,"contentType":33,"models":443},[444],{"id":226,"name":227},"url:{url},userId:{param-userId}",{"id":447,"group":448,"demo":449,"title":450,"description":451,"parameters":452,"responses":455,"method":38,"url":459,"rate-limit":40,"rate-time":41,"rate-key":303},"createVerification","verification","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createVerification(\n    'https://example.com' // url\n);\n\nconsole.log(result);\n","Create email verification","Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://backrush.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user's email address is valid for 7 days.\n\nPlease note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n",[453],{"name":215,"description":454,"required":14,"type":15,"example":217},"URL to redirect the user back to your app from the verification email. Only URLs from hostnames in your project platform list are allowed. This requirement helps to prevent an [open redirect](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html) attack against your project API.",[456],{"code":32,"contentType":33,"models":457},[458],{"id":226,"name":227},"/account/verification",{"id":461,"group":448,"demo":462,"title":463,"description":464,"parameters":465,"responses":468,"method":258,"url":459,"rate-limit":40,"rate-time":41,"rate-key":445},"updateVerification","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateVerification(\n    '\u003CUSER_ID>', // userId\n    '\u003CSECRET>' // secret\n);\n\nconsole.log(result);\n","Update email verification (confirmation)","Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.",[466,467],{"name":12,"description":437,"required":14,"type":15,"example":16},{"name":157,"description":253,"required":14,"type":15,"example":159},[469],{"code":51,"contentType":33,"models":470},[471],{"id":226,"name":227},{"id":473,"group":448,"demo":474,"title":475,"description":476,"parameters":477,"responses":478,"method":38,"url":482,"rate-limit":40,"rate-time":41,"rate-key":483},"createPhoneVerification","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createPhoneVerification();\n\nconsole.log(result);\n","Create phone verification","Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user's phone number using the [accountUpdatePhone](https://backrush.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://backrush.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user's phone number is valid for 15 minutes.",[],[479],{"code":32,"contentType":33,"models":480},[481],{"id":226,"name":227},"/account/verification/phone",[303,42],{"id":485,"group":448,"demo":486,"title":487,"description":488,"parameters":489,"responses":492,"method":258,"url":482,"rate-limit":40,"rate-time":41,"rate-key":496},"updatePhoneVerification","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePhoneVerification(\n    '\u003CUSER_ID>', // userId\n    '\u003CSECRET>' // secret\n);\n\nconsole.log(result);\n","Update phone verification (confirmation)","Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user's phone number to verify the user email ownership. If confirmed this route will return a 200 status code.",[490,491],{"name":12,"description":437,"required":14,"type":15,"example":16},{"name":157,"description":253,"required":14,"type":15,"example":159},[493],{"code":51,"contentType":33,"models":494},[495],{"id":226,"name":227},"userId:{param-userId}",{"id":498,"group":499,"demo":500,"title":501,"description":502,"parameters":503,"responses":506,"method":120,"url":510,"rate-limit":54,"rate-time":41,"rate-key":42},"updateMFA","mfa","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMFA(\n    false // mfa\n);\n\nconsole.log(result);\n","Update MFA","Enable or disable MFA on an account.",[504],{"name":499,"description":505,"required":14,"type":221,"example":28},"Enable or disable MFA.",[507],{"code":51,"contentType":33,"models":508},[509],{"id":36,"name":37},"/account/mfa",{"id":512,"group":499,"demo":513,"title":514,"description":515,"parameters":516,"responses":517,"method":44,"url":523,"rate-limit":54,"rate-time":41,"rate-key":42},"listMfaFactors","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listMfaFactors();\n\nconsole.log(result);\n","List factors","List the factors available on the account to be used as a MFA challange.",[],[518],{"code":51,"contentType":33,"models":519},[520],{"id":521,"name":522},"mfaFactors","MFAFactors","/account/mfa/factors",{"id":525,"group":499,"demo":526,"title":527,"description":528,"parameters":529,"responses":533,"method":38,"url":539,"rate-limit":54,"rate-time":41,"rate-key":42},"createMfaAuthenticator","import { Client, Account, AuthenticatorType } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMfaAuthenticator(\n    AuthenticatorType.Totp // type\n);\n\nconsole.log(result);\n","Create authenticator","Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.",[530],{"name":531,"description":532,"required":14,"type":15,"example":-1},"type","Type of authenticator. Must be `totp`",[534],{"code":51,"contentType":33,"models":535},[536],{"id":537,"name":538},"mfaType","MFAType","/account/mfa/authenticators/{type}",{"id":541,"group":499,"demo":542,"title":543,"description":544,"parameters":545,"responses":551,"method":258,"url":539,"rate-limit":54,"rate-time":41,"rate-key":42},"updateMfaAuthenticator","import { Client, Account, AuthenticatorType } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMfaAuthenticator(\n    AuthenticatorType.Totp, // type\n    '\u003COTP>' // otp\n);\n\nconsole.log(result);\n","Update authenticator (confirmation)","Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.",[546,548],{"name":531,"description":547,"required":14,"type":15,"example":-1},"Type of authenticator.",{"name":549,"description":253,"required":14,"type":15,"example":550},"otp","\u003COTP>",[552],{"code":51,"contentType":33,"models":553},[554],{"id":36,"name":37},{"id":556,"group":499,"demo":557,"title":558,"description":559,"parameters":560,"responses":561,"method":38,"url":567,"rate-limit":54,"rate-time":41,"rate-key":42},"createMfaRecoveryCodes","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMfaRecoveryCodes();\n\nconsole.log(result);\n","Create MFA recovery codes","Generate recovery codes as backup for MFA flow. It's recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.",[],[562],{"code":32,"contentType":33,"models":563},[564],{"id":565,"name":566},"mfaRecoveryCodes","MFA Recovery Codes","/account/mfa/recovery-codes",{"id":569,"group":499,"demo":570,"title":571,"description":572,"parameters":573,"responses":574,"method":120,"url":567,"rate-limit":54,"rate-time":41,"rate-key":42},"updateMfaRecoveryCodes","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMfaRecoveryCodes();\n\nconsole.log(result);\n","Update MFA recovery codes (regenerate)","Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.",[],[575],{"code":51,"contentType":33,"models":576},[577],{"id":565,"name":566},{"id":579,"group":499,"demo":580,"title":581,"description":582,"parameters":583,"responses":584,"method":44,"url":567,"rate-limit":54,"rate-time":41,"rate-key":42},"getMfaRecoveryCodes","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.getMfaRecoveryCodes();\n\nconsole.log(result);\n","List MFA recovery codes","Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.",[],[585],{"code":51,"contentType":33,"models":586},[587],{"id":565,"name":566},{"id":589,"group":499,"demo":590,"title":591,"description":592,"parameters":593,"responses":595,"method":79,"url":539,"rate-limit":54,"rate-time":41,"rate-key":42},"deleteMfaAuthenticator","import { Client, Account, AuthenticatorType } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteMfaAuthenticator(\n    AuthenticatorType.Totp // type\n);\n\nconsole.log(result);\n","Delete authenticator","Delete an authenticator for a user by ID.",[594],{"name":531,"description":547,"required":14,"type":15,"example":-1},[596],{"code":77,"contentType":-1,"models":597},[],{"id":599,"group":499,"demo":600,"title":601,"description":602,"parameters":603,"responses":607,"method":38,"url":613,"rate-limit":40,"rate-time":41,"rate-key":303},"createMfaChallenge","import { Client, Account, AuthenticationFactor } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createMfaChallenge(\n    AuthenticationFactor.Email // factor\n);\n\nconsole.log(result);\n","Create MFA challenge","Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.",[604],{"name":605,"description":606,"required":14,"type":15,"example":18},"factor","Factor used for verification. Must be one of following: `email`, `phone`, `totp`, `recoveryCode`.",[608],{"code":32,"contentType":33,"models":609},[610],{"id":611,"name":612},"mfaChallenge","MFA Challenge","/account/mfa/challenge",{"id":615,"group":499,"demo":616,"title":617,"description":618,"parameters":619,"responses":625,"method":258,"url":613,"rate-limit":40,"rate-time":41,"rate-key":629},"updateMfaChallenge","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updateMfaChallenge(\n    '\u003CCHALLENGE_ID>', // challengeId\n    '\u003COTP>' // otp\n);\n\nconsole.log(result);\n","Update MFA challenge (confirmation)","Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.",[620,624],{"name":621,"description":622,"required":14,"type":15,"example":623},"challengeId","ID of the challenge.","\u003CCHALLENGE_ID>",{"name":549,"description":253,"required":14,"type":15,"example":550},[626],{"code":51,"contentType":33,"models":627},[628],{"id":94,"name":95},"url:{url},challengeId:{param-challengeId}",{"id":631,"group":632,"demo":633,"title":634,"description":635,"parameters":636,"responses":649,"method":38,"url":655,"rate-limit":54,"rate-time":41,"rate-key":42},"createPushTarget","pushTargets","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.createPushTarget(\n    '\u003CTARGET_ID>', // targetId\n    '\u003CIDENTIFIER>', // identifier\n    '\u003CPROVIDER_ID>' // providerId (optional)\n);\n\nconsole.log(result);\n","Create push target","Use this endpoint to register a device for push notifications. Provide a target ID (custom or generated using ID.unique()), a device identifier (usually a device token), and optionally specify which provider should send notifications to this target. The target is automatically linked to the current session and includes device information like brand and model.",[637,641,645],{"name":638,"description":639,"required":14,"type":15,"example":640},"targetId","Target ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.","\u003CTARGET_ID>",{"name":642,"description":643,"required":14,"type":15,"example":644},"identifier","The target identifier (token, email, phone etc.)","\u003CIDENTIFIER>",{"name":646,"description":647,"required":28,"type":15,"example":648},"providerId","Provider ID. Message will be sent to this target from the specified provider ID. If no provider ID is set the first setup provider will be used.","\u003CPROVIDER_ID>",[650],{"code":32,"contentType":33,"models":651},[652],{"id":653,"name":654},"target","Target","/account/targets/push",{"id":657,"group":632,"demo":658,"title":659,"description":660,"parameters":661,"responses":665,"method":258,"url":669,"rate-limit":54,"rate-time":41,"rate-key":42},"updatePushTarget","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.updatePushTarget(\n    '\u003CTARGET_ID>', // targetId\n    '\u003CIDENTIFIER>' // identifier\n);\n\nconsole.log(result);\n","Update push target","Update the currently logged in user's push notification target. You can modify the target's identifier (device token) and provider ID (token, email, phone etc.). The target must exist and belong to the current user. If you change the provider ID, notifications will be sent through the new messaging provider instead.",[662,664],{"name":638,"description":663,"required":14,"type":15,"example":-1},"Target ID.",{"name":642,"description":643,"required":14,"type":15,"example":644},[666],{"code":51,"contentType":33,"models":667},[668],{"id":653,"name":654},"/account/targets/{targetId}/push",{"id":671,"group":632,"demo":672,"title":673,"description":674,"parameters":675,"responses":677,"method":79,"url":669,"rate-limit":54,"rate-time":41,"rate-key":42},"deletePushTarget","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deletePushTarget(\n    '\u003CTARGET_ID>' // targetId\n);\n\nconsole.log(result);\n","Delete push target","Delete a push notification target for the currently logged in user. After deletion, the device will no longer receive push notifications. The target must exist and belong to the current user.",[676],{"name":638,"description":663,"required":14,"type":15,"example":-1},[678],{"code":77,"contentType":-1,"models":679},[],{"id":681,"group":682,"demo":683,"title":684,"description":685,"parameters":686,"responses":689,"method":44,"url":695,"rate-limit":54,"rate-time":41,"rate-key":42},"listIdentities","identities","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.listIdentities(\n    [] // queries (optional)\n);\n\nconsole.log(result);\n","List identities","Get the list of identities for the currently logged in user.",[687],{"name":325,"description":688,"required":28,"type":184,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, provider, providerUid, providerEmail, providerAccessTokenExpiry",[690],{"code":51,"contentType":33,"models":691},[692],{"id":693,"name":694},"identityList","Identities List","/account/identities",{"id":697,"group":682,"demo":698,"title":699,"description":700,"parameters":701,"responses":705,"method":79,"url":708,"rate-limit":54,"rate-time":41,"rate-key":42},"deleteIdentity","import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst account = new Account(client);\n\nconst result = await account.deleteIdentity(\n    '\u003CIDENTITY_ID>' // identityId\n);\n\nconsole.log(result);\n","Delete identity","Delete an identity by its unique ID.",[702],{"name":703,"description":704,"required":14,"type":15,"example":-1},"identityId","Identity ID.",[706],{"code":77,"contentType":-1,"models":707},[],"/account/identities/{identityId}"],"uses":{"params":["platform","service","version"]}}]}
