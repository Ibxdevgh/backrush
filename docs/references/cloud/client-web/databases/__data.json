{"type":"data","nodes":[{"type":"skip"},{"type":"skip"},{"type":"skip"},{"type":"data","data":[{"service":1,"methods":4},{"name":2,"description":3},"databases","The Databases service allows you to create structured collections of documents, query and filter lists of documents, and manage an advanced set of read and write access permissions.\n\nAll data returned by the Databases service are represented as structured JSON documents.\n\nThe Databases service can contain multiple databases, each database can contain multiple collections. A collection is a group of similarly structured documents. The accepted structure of documents is defined by [collection attributes](/docs/products/databases/collections#attributes). The collection attributes help you ensure all your user-submitted data is validated and stored according to the collection structure.\n\nUsing Backrush permissions architecture, you can assign read or write access to each collection or document in your project for either a specific user, team, user role, or even grant it with public access (`any`). You can learn more about [how Backrush handles permissions and access control](/docs/products/databases/permissions).\n",[5,51,74,90,109,126],{"id":6,"group":7,"demo":8,"title":9,"description":10,"parameters":11,"responses":38,"method":46,"url":47,"rate-limit":48,"rate-time":49,"rate-key":50},"createDocument","documents","import { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setSession('') // The user session to authenticate with\n    .setKey('') // \n    .setJWT('\u003CYOUR_JWT>'); // Your secret JSON Web Token\n\nconst databases = new Databases(client);\n\nconst result = await databases.createDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>', // documentId\n    {}, // data\n    [\"read(\"any\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n","Create document","Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.",[12,17,20,25,30,35],{"name":13,"description":14,"required":15,"type":16,"example":-1},"databaseId","Database ID.",true,"string",{"name":18,"description":19,"required":15,"type":16,"example":-1},"collectionId","Collection ID. You can create a new collection using the Database service [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.",{"name":21,"description":22,"required":23,"type":16,"example":24},"documentId","Document ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.",false,"\u003CDOCUMENT_ID>",{"name":26,"description":27,"required":23,"type":28,"example":29},"data","Document data as JSON object.","object","{}",{"name":31,"description":32,"required":23,"type":33,"example":34},"permissions","An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://backrush.io/docs/permissions).","array","[\"read(\"any\")\"]",{"name":7,"description":36,"required":23,"type":33,"example":37},"Array of documents data as JSON objects.","",[39],{"code":40,"contentType":41,"models":42},201,"application/json",[43],{"id":44,"name":45},"document","Document","post","/databases/{databaseId}/collections/{collectionId}/documents",120,60,"ip:{ip},method:{method},url:{url},userId:{userId}",{"id":52,"group":7,"demo":53,"title":54,"description":55,"parameters":56,"responses":63,"method":70,"url":47,"rate-limit":71,"rate-time":72,"rate-key":73},"listDocuments","import { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.listDocuments(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    [] // queries (optional)\n);\n\nconsole.log(result);\n","List documents","Get a list of all the user's documents in a given collection. You can use the query params to filter your results.",[57,58,60],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":59,"required":15,"type":16,"example":-1},"Collection ID. You can create a new collection using the Database service [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection).",{"name":61,"description":62,"required":23,"type":33,"example":-1},"queries","Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.",[64],{"code":65,"contentType":41,"models":66},200,[67],{"id":68,"name":69},"documentList","Documents List","get",0,3600,"url:{url},ip:{ip}",{"id":75,"group":7,"demo":76,"title":77,"description":78,"parameters":79,"responses":85,"method":70,"url":89,"rate-limit":71,"rate-time":72,"rate-key":73},"getDocument","import { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.getDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>', // documentId\n    [] // queries (optional)\n);\n\nconsole.log(result);\n","Get document","Get a document by its unique ID. This endpoint response returns a JSON object with the document data.",[80,81,82,84],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":59,"required":15,"type":16,"example":-1},{"name":21,"description":83,"required":15,"type":16,"example":-1},"Document ID.",{"name":61,"description":62,"required":23,"type":33,"example":-1},[86],{"code":65,"contentType":41,"models":87},[88],{"id":44,"name":45},"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}",{"id":91,"group":7,"demo":92,"title":93,"description":94,"parameters":95,"responses":104,"method":108,"url":89,"rate-limit":48,"rate-time":49,"rate-key":50},"updateDocument","import { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.updateDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>', // documentId\n    {}, // data (optional)\n    [\"read(\"any\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n","Update document","Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.",[96,97,99,100,102],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":98,"required":15,"type":16,"example":-1},"Collection ID.",{"name":21,"description":83,"required":15,"type":16,"example":-1},{"name":26,"description":101,"required":23,"type":28,"example":29},"Document data as JSON object. Include only attribute and value pairs to be updated.",{"name":31,"description":103,"required":23,"type":33,"example":34},"An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://backrush.io/docs/permissions).",[105],{"code":65,"contentType":41,"models":106},[107],{"id":44,"name":45},"patch",{"id":110,"group":7,"demo":111,"title":112,"description":113,"parameters":114,"responses":121,"method":125,"url":89,"rate-limit":48,"rate-time":49,"rate-key":50},"upsertDocument","import { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.upsertDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>', // documentId\n    {}, // data\n    [\"read(\"any\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n","Upsert document","Create or update a Document. Before using this route, you should create a new collection resource using either a [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.",[115,116,117,118,120],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":98,"required":15,"type":16,"example":-1},{"name":21,"description":83,"required":15,"type":16,"example":-1},{"name":26,"description":119,"required":15,"type":28,"example":29},"Document data as JSON object. Include all required attributes of the document to be created or updated.",{"name":31,"description":103,"required":23,"type":33,"example":34},[122],{"code":65,"contentType":41,"models":123},[124],{"id":44,"name":45},"put",{"id":127,"group":7,"demo":128,"title":129,"description":130,"parameters":131,"responses":135,"method":139,"url":89,"rate-limit":49,"rate-time":49,"rate-key":50},"deleteDocument","import { Client, Databases } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst databases = new Databases(client);\n\nconst result = await databases.deleteDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>' // documentId\n);\n\nconsole.log(result);\n","Delete document","Delete a document by its unique ID.",[132,133,134],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":59,"required":15,"type":16,"example":-1},{"name":21,"description":83,"required":15,"type":16,"example":-1},[136],{"code":137,"contentType":-1,"models":138},204,[],"delete"],"uses":{"params":["platform","service","version"]}}]}
