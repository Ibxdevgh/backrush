{"type":"data","nodes":[{"type":"skip"},{"type":"skip"},{"type":"skip"},{"type":"data","data":[{"service":1,"methods":4},{"name":2,"description":3},"storage","The Storage service allows you to manage your project files. Using the Storage service, you can upload, view, download, and query all your project files.\n\nFiles are managed using buckets. Storage buckets are similar to Collections we have in our [Databases](/docs/products/databases) service. The difference is, buckets also provide more power to decide what kinds of files, what sizes you want to allow in that bucket, whether or not to encrypt the files, scan with antivirus and more.\n\nUsing Backrush permissions architecture, you can assign read or write access to each bucket or file in your project for either a specific user, team, user role, or even grant it with public access (`any`). You can learn more about [how Backrush handles permissions and access control](/docs/advanced/platform/permissions).\n\nThe preview endpoint allows you to generate preview images for your files. Using the preview endpoint, you can also manipulate the resulting image so that it will fit perfectly inside your app in terms of dimensions, file size, and style. The preview endpoint also allows you to change the resulting image file format for better compression or image quality for better delivery over the network.\n",[5,42,66,80,131,145,158,179],{"id":6,"group":7,"demo":8,"title":9,"description":10,"parameters":11,"responses":31,"method":38,"url":39,"rate-limit":40,"rate-time":40,"rate-key":41},"createFile","files","import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.createFile(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>', // fileId\n    document.getElementById('uploader').files[0], // file\n    [\"read(\"any\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n","Create file","Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://backrush.io/docs/server/storage#storageCreateBucket) API or directly from your Backrush console.\n\nLarger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.\n\nWhen the first request is sent, the server will return the **File** object, and the subsequent part request must include the file's **id** in `x-backrush-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.\n\nIf you're creating a new file using one of the Backrush SDKs, all the chunking logic will be managed by the SDK internally.\n",[12,17,21,25],{"name":13,"description":14,"required":15,"type":16,"example":-1},"bucketId","Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://backrush.io/docs/server/storage#createBucket).",true,"string",{"name":18,"description":19,"required":15,"type":16,"example":20},"fileId","File ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.","\u003CFILE_ID>",{"name":22,"description":23,"required":15,"type":16,"example":24},"file","Binary file. Backrush SDKs provide helpers to handle file input. [Learn about file input](https://backrush.io/docs/products/storage/upload-download#input-file).","",{"name":26,"description":27,"required":28,"type":29,"example":30},"permissions","An array of permission strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://backrush.io/docs/permissions).",false,"array","[\"read(\"any\")\"]",[32],{"code":33,"contentType":34,"models":35},201,"application/json",[36],{"id":22,"name":37},"File","post","/storage/buckets/{bucketId}/files",60,"ip:{ip},method:{method},url:{url},userId:{userId},chunkId:{chunkId}",{"id":43,"group":7,"demo":44,"title":45,"description":46,"parameters":47,"responses":55,"method":62,"url":39,"rate-limit":63,"rate-time":64,"rate-key":65},"listFiles","import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.listFiles(\n    '\u003CBUCKET_ID>', // bucketId\n    [], // queries (optional)\n    '\u003CSEARCH>' // search (optional)\n);\n\nconsole.log(result);\n","List files","Get a list of all the user files. You can use the query params to filter your results.",[48,49,52],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":50,"description":51,"required":28,"type":29,"example":-1},"queries","Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, signature, mimeType, sizeOriginal, chunksTotal, chunksUploaded",{"name":53,"description":54,"required":28,"type":16,"example":-1},"search","Search term to filter your list results. Max length: 256 chars.",[56],{"code":57,"contentType":34,"models":58},200,[59],{"id":60,"name":61},"fileList","Files List","get",0,3600,"url:{url},ip:{ip}",{"id":67,"group":7,"demo":68,"title":69,"description":70,"parameters":71,"responses":75,"method":62,"url":79,"rate-limit":63,"rate-time":64,"rate-key":65},"getFile","import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.getFile(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>' // fileId\n);\n\nconsole.log(result);\n","Get file","Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.",[72,73],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":74,"required":15,"type":16,"example":-1},"File ID.",[76],{"code":57,"contentType":34,"models":77},[78],{"id":22,"name":37},"/storage/buckets/{bucketId}/files/{fileId}",{"id":81,"group":7,"demo":82,"title":83,"description":84,"parameters":85,"responses":127,"method":62,"url":130,"rate-limit":63,"rate-time":64,"rate-key":65},"getFilePreview","import { Client, Storage, ImageGravity, ImageFormat } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = storage.getFilePreview(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>', // fileId\n    0, // width (optional)\n    0, // height (optional)\n    ImageGravity.Center, // gravity (optional)\n    -1, // quality (optional)\n    0, // borderWidth (optional)\n    '', // borderColor (optional)\n    0, // borderRadius (optional)\n    0, // opacity (optional)\n    -360, // rotation (optional)\n    '', // background (optional)\n    ImageFormat.Jpg, // output (optional)\n    '\u003CTOKEN>' // token (optional)\n);\n\nconsole.log(result);\n","Get file preview","Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.",[86,87,89,93,96,99,102,105,108,111,115,118,121,124],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":88,"required":15,"type":16,"example":-1},"File ID",{"name":90,"description":91,"required":28,"type":92,"example":-1},"width","Resize preview image width, Pass an integer between 0 to 4000.","integer",{"name":94,"description":95,"required":28,"type":92,"example":-1},"height","Resize preview image height, Pass an integer between 0 to 4000.",{"name":97,"description":98,"required":28,"type":16,"example":-1},"gravity","Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right",{"name":100,"description":101,"required":28,"type":92,"example":-1},"quality","Preview image quality. Pass an integer between 0 to 100. Defaults to keep existing image quality.",{"name":103,"description":104,"required":28,"type":92,"example":-1},"borderWidth","Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.",{"name":106,"description":107,"required":28,"type":16,"example":-1},"borderColor","Preview image border color. Use a valid HEX color, no # is needed for prefix.",{"name":109,"description":110,"required":28,"type":92,"example":-1},"borderRadius","Preview image border radius in pixels. Pass an integer between 0 to 4000.",{"name":112,"description":113,"required":28,"type":114,"example":-1},"opacity","Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.","number",{"name":116,"description":117,"required":28,"type":92,"example":-1},"rotation","Preview image rotation in degrees. Pass an integer between -360 and 360.",{"name":119,"description":120,"required":28,"type":16,"example":-1},"background","Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.",{"name":122,"description":123,"required":28,"type":16,"example":-1},"output","Output format type (jpeg, jpg, png, gif and webp).",{"name":125,"description":126,"required":28,"type":16,"example":-1},"token","File token for accessing this file.",[128],{"code":57,"contentType":-1,"models":129},[],"/storage/buckets/{bucketId}/files/{fileId}/preview",{"id":132,"group":7,"demo":133,"title":134,"description":135,"parameters":136,"responses":141,"method":62,"url":144,"rate-limit":63,"rate-time":64,"rate-key":65},"getFileDownload","import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = storage.getFileDownload(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>', // fileId\n    '\u003CTOKEN>' // token (optional)\n);\n\nconsole.log(result);\n","Get file for download","Get a file content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.",[137,139,140],{"name":13,"description":138,"required":15,"type":16,"example":-1},"Storage bucket ID. You can create a new storage bucket using the Storage service [server integration](https://backrush.io/docs/server/storage#createBucket).",{"name":18,"description":74,"required":15,"type":16,"example":-1},{"name":125,"description":126,"required":28,"type":16,"example":-1},[142],{"code":57,"contentType":-1,"models":143},[],"/storage/buckets/{bucketId}/files/{fileId}/download",{"id":146,"group":7,"demo":147,"title":148,"description":149,"parameters":150,"responses":154,"method":62,"url":157,"rate-limit":63,"rate-time":64,"rate-key":65},"getFileView","import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = storage.getFileView(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>', // fileId\n    '\u003CTOKEN>' // token (optional)\n);\n\nconsole.log(result);\n","Get file for view","Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  'Content-Disposition: attachment' header.",[151,152,153],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":74,"required":15,"type":16,"example":-1},{"name":125,"description":126,"required":28,"type":16,"example":-1},[155],{"code":57,"contentType":-1,"models":156},[],"/storage/buckets/{bucketId}/files/{fileId}/view",{"id":159,"group":7,"demo":160,"title":161,"description":162,"parameters":163,"responses":173,"method":177,"url":79,"rate-limit":40,"rate-time":40,"rate-key":178},"updateFile","import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.updateFile(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>', // fileId\n    '\u003CNAME>', // name (optional)\n    [\"read(\"any\")\"] // permissions (optional)\n);\n\nconsole.log(result);\n","Update file","Update a file by its unique ID. Only users with write permissions have access to update this resource.",[164,165,167,171],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":166,"required":15,"type":16,"example":-1},"File unique ID.",{"name":168,"description":169,"required":28,"type":16,"example":170},"name","Name of the file","\u003CNAME>",{"name":26,"description":172,"required":28,"type":29,"example":30},"An array of permission string. By default, the current permissions are inherited. [Learn more about permissions](https://backrush.io/docs/permissions).",[174],{"code":57,"contentType":34,"models":175},[176],{"id":22,"name":37},"put","ip:{ip},method:{method},url:{url},userId:{userId}",{"id":180,"group":7,"demo":181,"title":182,"description":183,"parameters":184,"responses":187,"method":191,"url":79,"rate-limit":40,"rate-time":40,"rate-key":178},"deleteFile","import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>'); // Your project ID\n\nconst storage = new Storage(client);\n\nconst result = await storage.deleteFile(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>' // fileId\n);\n\nconsole.log(result);\n","Delete file","Delete a file by its unique ID. Only users with write permissions have access to delete this resource.",[185,186],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":74,"required":15,"type":16,"example":-1},[188],{"code":189,"contentType":-1,"models":190},204,[],"delete"],"uses":{"params":["platform","service","version"]}}]}
