{"type":"data","nodes":[{"type":"skip"},{"type":"skip"},{"type":"skip"},{"type":"data","data":[{"service":1,"methods":4},{"name":2,"description":3},"databases","The Databases service allows you to create structured collections of documents, query and filter lists of documents, and manage an advanced set of read and write access permissions.\n\nAll data returned by the Databases service are represented as structured JSON documents.\n\nThe Databases service can contain multiple databases, each database can contain multiple collections. A collection is a group of similarly structured documents. The accepted structure of documents is defined by [collection attributes](/docs/products/databases/collections#attributes). The collection attributes help you ensure all your user-submitted data is validated and stored according to the collection structure.\n\nUsing Backrush permissions architecture, you can assign read or write access to each collection or document in your project for either a specific user, team, user role, or even grant it with public access (`any`). You can learn more about [how Backrush handles permissions and access control](/docs/products/databases/permissions).\n",[5,39,60,72,87,98,127,143,157,174,185,224,244,266,285,305,330,352,371,391,425,442,465,487,504,522,539,556,575,594,611,628,644,656,683,700,714,726,759,775,791,808,822,836,848],{"id":6,"group":2,"demo":7,"title":8,"description":9,"parameters":10,"responses":26,"method":34,"url":35,"rate-limit":36,"rate-time":37,"rate-key":38},"create","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.create(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CNAME>', // name\n    false // enabled (optional)\n);\n","Create database","Create a new Database.\n",[11,17,21],{"name":12,"description":13,"required":14,"type":15,"example":16},"databaseId","Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.",true,"string","\u003CDATABASE_ID>",{"name":18,"description":19,"required":14,"type":15,"example":20},"name","Database name. Max length: 128 chars.","\u003CNAME>",{"name":22,"description":23,"required":24,"type":25,"example":24},"enabled","Is the database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.",false,"boolean",[27],{"code":28,"contentType":29,"models":30},201,"application/json",[31],{"id":32,"name":33},"database","Database","post","/databases",0,3600,"url:{url},ip:{ip}",{"id":40,"group":2,"demo":41,"title":42,"description":43,"parameters":44,"responses":52,"method":59,"url":35,"rate-limit":36,"rate-time":37,"rate-key":38},"list","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.list(\n    [], // queries (optional)\n    '\u003CSEARCH>' // search (optional)\n);\n","List databases","Get a list of all databases from the current Backrush project. You can use the search parameter to filter your results.",[45,49],{"name":46,"description":47,"required":24,"type":48,"example":-1},"queries","Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name","array",{"name":50,"description":51,"required":24,"type":15,"example":-1},"search","Search term to filter your list results. Max length: 256 chars.",[53],{"code":54,"contentType":29,"models":55},200,[56],{"id":57,"name":58},"databaseList","Databases List","get",{"id":59,"group":2,"demo":61,"title":62,"description":63,"parameters":64,"responses":67,"method":59,"url":71,"rate-limit":36,"rate-time":37,"rate-key":38},"const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.get(\n    '\u003CDATABASE_ID>' // databaseId\n);\n","Get database","Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.",[65],{"name":12,"description":66,"required":14,"type":15,"example":-1},"Database ID.",[68],{"code":54,"contentType":29,"models":69},[70],{"id":32,"name":33},"/databases/{databaseId}",{"id":73,"group":2,"demo":74,"title":75,"description":76,"parameters":77,"responses":82,"method":86,"url":71,"rate-limit":36,"rate-time":37,"rate-key":38},"update","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.update(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CNAME>', // name\n    false // enabled (optional)\n);\n","Update database","Update a database by its unique ID.",[78,79,80],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":18,"description":19,"required":14,"type":15,"example":20},{"name":22,"description":81,"required":24,"type":25,"example":24},"Is database enabled? When set to 'disabled', users cannot access the database but Server SDKs with an API key can still read and write to the database. No data is lost when this is toggled.",[83],{"code":54,"contentType":29,"models":84},[85],{"id":32,"name":33},"put",{"id":88,"group":2,"demo":89,"title":90,"description":91,"parameters":92,"responses":94,"method":88,"url":71,"rate-limit":36,"rate-time":37,"rate-key":38},"delete","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.delete(\n    '\u003CDATABASE_ID>' // databaseId\n);\n","Delete database","Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.",[93],{"name":12,"description":66,"required":14,"type":15,"example":-1},[95],{"code":96,"contentType":-1,"models":97},204,[],{"id":99,"group":100,"demo":101,"title":102,"description":103,"parameters":104,"responses":120,"method":34,"url":126,"rate-limit":36,"rate-time":37,"rate-key":38},"createCollection","collections","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createCollection(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CNAME>', // name\n    [\"read(\"any\")\"], // permissions (optional)\n    false, // documentSecurity (optional)\n    false // enabled (optional)\n);\n","Create collection","Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.",[105,106,109,111,115,118],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":13,"required":14,"type":15,"example":108},"collectionId","\u003CCOLLECTION_ID>",{"name":18,"description":110,"required":14,"type":15,"example":20},"Collection name. Max length: 128 chars.",{"name":112,"description":113,"required":24,"type":48,"example":114},"permissions","An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://backrush.io/docs/permissions).","[\"read(\"any\")\"]",{"name":116,"description":117,"required":24,"type":25,"example":24},"documentSecurity","Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://backrush.io/docs/permissions).",{"name":22,"description":119,"required":24,"type":25,"example":24},"Is collection enabled? When set to 'disabled', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.",[121],{"code":28,"contentType":29,"models":122},[123],{"id":124,"name":125},"collection","Collection","/databases/{databaseId}/collections",{"id":128,"group":100,"demo":129,"title":130,"description":131,"parameters":132,"responses":137,"method":59,"url":126,"rate-limit":36,"rate-time":37,"rate-key":38},"listCollections","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.listCollections(\n    '\u003CDATABASE_ID>', // databaseId\n    [], // queries (optional)\n    '\u003CSEARCH>' // search (optional)\n);\n","List collections","Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.",[133,134,136],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":46,"description":135,"required":24,"type":48,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, enabled, documentSecurity",{"name":50,"description":51,"required":24,"type":15,"example":-1},[138],{"code":54,"contentType":29,"models":139},[140],{"id":141,"name":142},"collectionList","Collections List",{"id":144,"group":100,"demo":145,"title":146,"description":147,"parameters":148,"responses":152,"method":59,"url":156,"rate-limit":36,"rate-time":37,"rate-key":38},"getCollection","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.getCollection(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>' // collectionId\n);\n","Get collection","Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.",[149,150],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":151,"required":14,"type":15,"example":-1},"Collection ID.",[153],{"code":54,"contentType":29,"models":154},[155],{"id":124,"name":125},"/databases/{databaseId}/collections/{collectionId}",{"id":158,"group":100,"demo":159,"title":160,"description":161,"parameters":162,"responses":170,"method":86,"url":156,"rate-limit":36,"rate-time":37,"rate-key":38},"updateCollection","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateCollection(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CNAME>', // name\n    [\"read(\"any\")\"], // permissions (optional)\n    false, // documentSecurity (optional)\n    false // enabled (optional)\n);\n","Update collection","Update a collection by its unique ID.",[163,164,165,166,168,169],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":151,"required":14,"type":15,"example":-1},{"name":18,"description":110,"required":14,"type":15,"example":20},{"name":112,"description":167,"required":24,"type":48,"example":114},"An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://backrush.io/docs/permissions).",{"name":116,"description":117,"required":24,"type":25,"example":24},{"name":22,"description":119,"required":24,"type":25,"example":24},[171],{"code":54,"contentType":29,"models":172},[173],{"id":124,"name":125},{"id":175,"group":100,"demo":176,"title":177,"description":178,"parameters":179,"responses":182,"method":88,"url":156,"rate-limit":36,"rate-time":37,"rate-key":38},"deleteCollection","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.deleteCollection(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>' // collectionId\n);\n","Delete collection","Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.",[180,181],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":151,"required":14,"type":15,"example":-1},[183],{"code":96,"contentType":-1,"models":184},[],{"id":186,"group":187,"demo":188,"title":189,"description":190,"parameters":191,"responses":216,"method":34,"url":223,"rate-limit":36,"rate-time":37,"rate-key":38},"createStringAttribute","attributes","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createStringAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    1, // size\n    false, // required\n    '\u003CDEFAULT>', // default (optional)\n    false, // array (optional)\n    false // encrypt (optional)\n);\n","Create string attribute","Create a string attribute.\n",[192,193,195,199,204,207,211,213],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},"Collection ID. You can create a new collection using the Database service [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection).",{"name":196,"description":197,"required":14,"type":15,"example":198},"key","Attribute Key.","",{"name":200,"description":201,"required":14,"type":202,"example":203},"size","Attribute size for text attributes, in number of characters.","integer",1,{"name":205,"description":206,"required":14,"type":25,"example":24},"required","Is attribute required?",{"name":208,"description":209,"required":24,"type":15,"example":210},"default","Default value for attribute when not provided. Cannot be set when attribute is required.","\u003CDEFAULT>",{"name":48,"description":212,"required":24,"type":25,"example":24},"Is attribute an array?",{"name":214,"description":215,"required":24,"type":25,"example":24},"encrypt","Toggle encryption for the attribute. Encryption enhances security by not storing any plain text values in the database. However, encrypted attributes cannot be queried.",[217],{"code":218,"contentType":29,"models":219},202,[220],{"id":221,"name":222},"attributeString","AttributeString","/databases/{databaseId}/collections/{collectionId}/attributes/string",{"id":225,"group":187,"demo":226,"title":227,"description":228,"parameters":229,"responses":237,"method":34,"url":243,"rate-limit":36,"rate-time":37,"rate-key":38},"createEmailAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createEmailAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    'email@example.com', // default (optional)\n    false // array (optional)\n);\n","Create email attribute","Create an email attribute.\n",[230,231,232,233,234,236],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":24,"type":15,"example":235},"email@example.com",{"name":48,"description":212,"required":24,"type":25,"example":24},[238],{"code":218,"contentType":29,"models":239},[240],{"id":241,"name":242},"attributeEmail","AttributeEmail","/databases/{databaseId}/collections/{collectionId}/attributes/email",{"id":245,"group":187,"demo":246,"title":247,"description":248,"parameters":249,"responses":259,"method":34,"url":265,"rate-limit":36,"rate-time":37,"rate-key":38},"createEnumAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createEnumAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    [], // elements\n    false, // required\n    '\u003CDEFAULT>', // default (optional)\n    false // array (optional)\n);\n","Create enum attribute","Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute. \n",[250,251,252,253,256,257,258],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":254,"description":255,"required":14,"type":48,"example":198},"elements","Array of elements in enumerated type. Uses length of longest element to determine size. Maximum of 100 elements are allowed, each 255 characters long.",{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":24,"type":15,"example":210},{"name":48,"description":212,"required":24,"type":25,"example":24},[260],{"code":218,"contentType":29,"models":261},[262],{"id":263,"name":264},"attributeEnum","AttributeEnum","/databases/{databaseId}/collections/{collectionId}/attributes/enum",{"id":267,"group":187,"demo":268,"title":269,"description":270,"parameters":271,"responses":278,"method":34,"url":284,"rate-limit":36,"rate-time":37,"rate-key":38},"createIpAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createIpAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    '', // default (optional)\n    false // array (optional)\n);\n","Create IP address attribute","Create IP address attribute.\n",[272,273,274,275,276,277],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":24,"type":15,"example":198},{"name":48,"description":212,"required":24,"type":25,"example":24},[279],{"code":218,"contentType":29,"models":280},[281],{"id":282,"name":283},"attributeIp","AttributeIP","/databases/{databaseId}/collections/{collectionId}/attributes/ip",{"id":286,"group":187,"demo":287,"title":288,"description":289,"parameters":290,"responses":298,"method":34,"url":304,"rate-limit":36,"rate-time":37,"rate-key":38},"createUrlAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createUrlAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    'https://example.com', // default (optional)\n    false // array (optional)\n);\n","Create URL attribute","Create a URL attribute.\n",[291,292,293,294,295,297],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":24,"type":15,"example":296},"https://example.com",{"name":48,"description":212,"required":24,"type":25,"example":24},[299],{"code":218,"contentType":29,"models":300},[301],{"id":302,"name":303},"attributeUrl","AttributeURL","/databases/{databaseId}/collections/{collectionId}/attributes/url",{"id":306,"group":187,"demo":307,"title":308,"description":309,"parameters":310,"responses":323,"method":34,"url":329,"rate-limit":36,"rate-time":37,"rate-key":38},"createIntegerAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createIntegerAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    null, // min (optional)\n    null, // max (optional)\n    null, // default (optional)\n    false // array (optional)\n);\n","Create integer attribute","Create an integer attribute. Optionally, minimum and maximum values can be provided.\n",[311,312,313,314,315,318,321,322],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":316,"description":317,"required":24,"type":202,"example":198},"min","Minimum value to enforce on new documents",{"name":319,"description":320,"required":24,"type":202,"example":198},"max","Maximum value to enforce on new documents",{"name":208,"description":209,"required":24,"type":202,"example":198},{"name":48,"description":212,"required":24,"type":25,"example":24},[324],{"code":218,"contentType":29,"models":325},[326],{"id":327,"name":328},"attributeInteger","AttributeInteger","/databases/{databaseId}/collections/{collectionId}/attributes/integer",{"id":331,"group":187,"demo":332,"title":333,"description":334,"parameters":335,"responses":345,"method":34,"url":351,"rate-limit":36,"rate-time":37,"rate-key":38},"createFloatAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createFloatAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    null, // min (optional)\n    null, // max (optional)\n    null, // default (optional)\n    false // array (optional)\n);\n","Create float attribute","Create a float attribute. Optionally, minimum and maximum values can be provided.\n",[336,337,338,339,340,342,343,344],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":316,"description":317,"required":24,"type":341,"example":198},"number",{"name":319,"description":320,"required":24,"type":341,"example":198},{"name":208,"description":209,"required":24,"type":341,"example":198},{"name":48,"description":212,"required":24,"type":25,"example":24},[346],{"code":218,"contentType":29,"models":347},[348],{"id":349,"name":350},"attributeFloat","AttributeFloat","/databases/{databaseId}/collections/{collectionId}/attributes/float",{"id":353,"group":187,"demo":354,"title":355,"description":356,"parameters":357,"responses":364,"method":34,"url":370,"rate-limit":36,"rate-time":37,"rate-key":38},"createBooleanAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createBooleanAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    false, // default (optional)\n    false // array (optional)\n);\n","Create boolean attribute","Create a boolean attribute.\n",[358,359,360,361,362,363],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":24,"type":25,"example":24},{"name":48,"description":212,"required":24,"type":25,"example":24},[365],{"code":218,"contentType":29,"models":366},[367],{"id":368,"name":369},"attributeBoolean","AttributeBoolean","/databases/{databaseId}/collections/{collectionId}/attributes/boolean",{"id":372,"group":187,"demo":373,"title":374,"description":375,"parameters":376,"responses":384,"method":34,"url":390,"rate-limit":36,"rate-time":37,"rate-key":38},"createDatetimeAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createDatetimeAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    '', // default (optional)\n    false // array (optional)\n);\n","Create datetime attribute","Create a date time attribute according to the ISO 8601 standard.",[377,378,379,380,381,383],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":382,"required":24,"type":15,"example":198},"Default value for the attribute in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. Cannot be set when attribute is required.",{"name":48,"description":212,"required":24,"type":25,"example":24},[385],{"code":218,"contentType":29,"models":386},[387],{"id":388,"name":389},"attributeDatetime","AttributeDatetime","/databases/{databaseId}/collections/{collectionId}/attributes/datetime",{"id":392,"group":187,"demo":393,"title":394,"description":395,"parameters":396,"responses":418,"method":34,"url":424,"rate-limit":36,"rate-time":37,"rate-key":38},"createRelationshipAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createRelationshipAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CRELATED_COLLECTION_ID>', // relatedCollectionId\n    sdk.RelationshipType.OneToOne, // type\n    false, // twoWay (optional)\n    '', // key (optional)\n    '', // twoWayKey (optional)\n    sdk.RelationMutate.Cascade // onDelete (optional)\n);\n","Create relationship attribute","Create relationship attribute. [Learn more about relationship attributes](https://backrush.io/docs/databases-relationships#relationship-attributes).\n",[397,398,399,403,407,410,411,414],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":400,"description":401,"required":14,"type":15,"example":402},"relatedCollectionId","Related Collection ID. You can create a new collection using the Database service [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection).","\u003CRELATED_COLLECTION_ID>",{"name":404,"description":405,"required":14,"type":15,"example":406},"type","Relation type","oneToOne",{"name":408,"description":409,"required":24,"type":25,"example":24},"twoWay","Is Two Way?",{"name":196,"description":197,"required":24,"type":15,"example":198},{"name":412,"description":413,"required":24,"type":15,"example":198},"twoWayKey","Two Way Attribute Key.",{"name":415,"description":416,"required":24,"type":15,"example":417},"onDelete","Constraints option","cascade",[419],{"code":218,"contentType":29,"models":420},[421],{"id":422,"name":423},"attributeRelationship","AttributeRelationship","/databases/{databaseId}/collections/{collectionId}/attributes/relationship",{"id":426,"group":187,"demo":427,"title":428,"description":429,"parameters":430,"responses":435,"method":59,"url":441,"rate-limit":36,"rate-time":37,"rate-key":38},"listAttributes","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.listAttributes(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    [] // queries (optional)\n);\n","List attributes","List attributes in the collection.",[431,432,433],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":46,"description":434,"required":24,"type":48,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, size, required, array, status, error",[436],{"code":54,"contentType":29,"models":437},[438],{"id":439,"name":440},"attributeList","Attributes List","/databases/{databaseId}/collections/{collectionId}/attributes",{"id":443,"group":187,"demo":444,"title":445,"description":446,"parameters":447,"responses":451,"method":59,"url":464,"rate-limit":36,"rate-time":37,"rate-key":38},"getAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.getAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '' // key\n);\n","Get attribute","Get attribute by ID.",[448,449,450],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},[452],{"code":54,"contentType":29,"models":453},[454,455,456,457,458,459,460,461,462,463],{"id":368,"name":369},{"id":327,"name":328},{"id":349,"name":350},{"id":241,"name":242},{"id":263,"name":264},{"id":302,"name":303},{"id":282,"name":283},{"id":388,"name":389},{"id":422,"name":423},{"id":221,"name":222},"/databases/{databaseId}/collections/{collectionId}/attributes/{key}",{"id":466,"group":187,"demo":467,"title":468,"description":469,"parameters":470,"responses":481,"method":485,"url":486,"rate-limit":36,"rate-time":37,"rate-key":38},"updateStringAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateStringAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    '\u003CDEFAULT>', // default\n    1, // size (optional)\n    '' // newKey (optional)\n);\n","Update string attribute","Update a string attribute. Changing the `default` value will not update already existing documents.\n",[471,472,473,474,475,476,478],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":15,"example":210},{"name":200,"description":477,"required":24,"type":202,"example":203},"Maximum size of the string attribute.",{"name":479,"description":480,"required":24,"type":15,"example":198},"newKey","New attribute key.",[482],{"code":54,"contentType":29,"models":483},[484],{"id":221,"name":222},"patch","/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}",{"id":488,"group":187,"demo":489,"title":490,"description":491,"parameters":492,"responses":499,"method":485,"url":503,"rate-limit":36,"rate-time":37,"rate-key":38},"updateEmailAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateEmailAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    'email@example.com', // default\n    '' // newKey (optional)\n);\n","Update email attribute","Update an email attribute. Changing the `default` value will not update already existing documents.\n",[493,494,495,496,497,498],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":15,"example":235},{"name":479,"description":480,"required":24,"type":15,"example":198},[500],{"code":54,"contentType":29,"models":501},[502],{"id":241,"name":242},"/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}",{"id":505,"group":187,"demo":506,"title":507,"description":508,"parameters":509,"responses":517,"method":485,"url":521,"rate-limit":36,"rate-time":37,"rate-key":38},"updateEnumAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateEnumAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    [], // elements\n    false, // required\n    '\u003CDEFAULT>', // default\n    '' // newKey (optional)\n);\n","Update enum attribute","Update an enum attribute. Changing the `default` value will not update already existing documents.\n",[510,511,512,513,514,515,516],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":254,"description":255,"required":14,"type":48,"example":198},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":15,"example":210},{"name":479,"description":480,"required":24,"type":15,"example":198},[518],{"code":54,"contentType":29,"models":519},[520],{"id":263,"name":264},"/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}",{"id":523,"group":187,"demo":524,"title":525,"description":526,"parameters":527,"responses":534,"method":485,"url":538,"rate-limit":36,"rate-time":37,"rate-key":38},"updateIpAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateIpAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    '', // default\n    '' // newKey (optional)\n);\n","Update IP address attribute","Update an ip attribute. Changing the `default` value will not update already existing documents.\n",[528,529,530,531,532,533],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":15,"example":198},{"name":479,"description":480,"required":24,"type":15,"example":198},[535],{"code":54,"contentType":29,"models":536},[537],{"id":282,"name":283},"/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}",{"id":540,"group":187,"demo":541,"title":542,"description":543,"parameters":544,"responses":551,"method":485,"url":555,"rate-limit":36,"rate-time":37,"rate-key":38},"updateUrlAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateUrlAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    'https://example.com', // default\n    '' // newKey (optional)\n);\n","Update URL attribute","Update an url attribute. Changing the `default` value will not update already existing documents.\n",[545,546,547,548,549,550],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":15,"example":296},{"name":479,"description":480,"required":24,"type":15,"example":198},[552],{"code":54,"contentType":29,"models":553},[554],{"id":302,"name":303},"/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}",{"id":557,"group":187,"demo":558,"title":559,"description":560,"parameters":561,"responses":570,"method":485,"url":574,"rate-limit":36,"rate-time":37,"rate-key":38},"updateIntegerAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateIntegerAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    null, // default\n    null, // min (optional)\n    null, // max (optional)\n    '' // newKey (optional)\n);\n","Update integer attribute","Update an integer attribute. Changing the `default` value will not update already existing documents.\n",[562,563,564,565,566,567,568,569],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":202,"example":198},{"name":316,"description":317,"required":24,"type":202,"example":198},{"name":319,"description":320,"required":24,"type":202,"example":198},{"name":479,"description":480,"required":24,"type":15,"example":198},[571],{"code":54,"contentType":29,"models":572},[573],{"id":327,"name":328},"/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}",{"id":576,"group":187,"demo":577,"title":578,"description":579,"parameters":580,"responses":589,"method":485,"url":593,"rate-limit":36,"rate-time":37,"rate-key":38},"updateFloatAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateFloatAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    null, // default\n    null, // min (optional)\n    null, // max (optional)\n    '' // newKey (optional)\n);\n","Update float attribute","Update a float attribute. Changing the `default` value will not update already existing documents.\n",[581,582,583,584,585,586,587,588],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":341,"example":198},{"name":316,"description":317,"required":24,"type":341,"example":198},{"name":319,"description":320,"required":24,"type":341,"example":198},{"name":479,"description":480,"required":24,"type":15,"example":198},[590],{"code":54,"contentType":29,"models":591},[592],{"id":349,"name":350},"/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}",{"id":595,"group":187,"demo":596,"title":597,"description":598,"parameters":599,"responses":606,"method":485,"url":610,"rate-limit":36,"rate-time":37,"rate-key":38},"updateBooleanAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateBooleanAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    false, // default\n    '' // newKey (optional)\n);\n","Update boolean attribute","Update a boolean attribute. Changing the `default` value will not update already existing documents.",[600,601,602,603,604,605],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":25,"example":24},{"name":479,"description":480,"required":24,"type":15,"example":198},[607],{"code":54,"contentType":29,"models":608},[609],{"id":368,"name":369},"/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}",{"id":612,"group":187,"demo":613,"title":614,"description":615,"parameters":616,"responses":623,"method":485,"url":627,"rate-limit":36,"rate-time":37,"rate-key":38},"updateDatetimeAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateDatetimeAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    false, // required\n    '', // default\n    '' // newKey (optional)\n);\n","Update dateTime attribute","Update a date time attribute. Changing the `default` value will not update already existing documents.",[617,618,619,620,621,622],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":205,"description":206,"required":14,"type":25,"example":24},{"name":208,"description":209,"required":14,"type":15,"example":198},{"name":479,"description":480,"required":24,"type":15,"example":198},[624],{"code":54,"contentType":29,"models":625},[626],{"id":388,"name":389},"/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}",{"id":629,"group":187,"demo":630,"title":631,"description":632,"parameters":633,"responses":639,"method":485,"url":643,"rate-limit":36,"rate-time":37,"rate-key":38},"updateRelationshipAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateRelationshipAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    sdk.RelationMutate.Cascade, // onDelete (optional)\n    '' // newKey (optional)\n);\n","Update relationship attribute","Update relationship attribute. [Learn more about relationship attributes](https://backrush.io/docs/databases-relationships#relationship-attributes).\n",[634,635,636,637,638],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},{"name":415,"description":416,"required":24,"type":15,"example":417},{"name":479,"description":480,"required":24,"type":15,"example":198},[640],{"code":54,"contentType":29,"models":641},[642],{"id":422,"name":423},"/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship",{"id":645,"group":187,"demo":646,"title":647,"description":648,"parameters":649,"responses":653,"method":88,"url":464,"rate-limit":36,"rate-time":37,"rate-key":38},"deleteAttribute","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.deleteAttribute(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '' // key\n);\n","Delete attribute","Deletes an attribute.",[650,651,652],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":197,"required":14,"type":15,"example":-1},[654],{"code":96,"contentType":-1,"models":655},[],{"id":657,"group":100,"demo":658,"title":659,"description":660,"parameters":661,"responses":676,"method":34,"url":682,"rate-limit":36,"rate-time":37,"rate-key":38},"createIndex","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createIndex(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '', // key\n    sdk.IndexType.Key, // type\n    [], // attributes\n    [], // orders (optional)\n    [] // lengths (optional)\n);\n","Create index","Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request.\nAttributes can be `key`, `fulltext`, and `unique`.",[662,663,664,666,668,670,673],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":665,"required":14,"type":15,"example":198},"Index Key.",{"name":404,"description":667,"required":14,"type":15,"example":196},"Index type.",{"name":187,"description":669,"required":14,"type":48,"example":198},"Array of attributes to index. Maximum of 100 attributes are allowed, each 32 characters long.",{"name":671,"description":672,"required":24,"type":48,"example":198},"orders","Array of index orders. Maximum of 100 orders are allowed.",{"name":674,"description":675,"required":24,"type":48,"example":198},"lengths","Length of index. Maximum of 100",[677],{"code":218,"contentType":29,"models":678},[679],{"id":680,"name":681},"index","Index","/databases/{databaseId}/collections/{collectionId}/indexes",{"id":684,"group":685,"demo":686,"title":687,"description":688,"parameters":689,"responses":694,"method":59,"url":682,"rate-limit":36,"rate-time":37,"rate-key":38},"listIndexes","indexes","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.listIndexes(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    [] // queries (optional)\n);\n","List indexes","List indexes in the collection.",[690,691,692],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":46,"description":693,"required":24,"type":48,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: key, type, status, attributes, error",[695],{"code":54,"contentType":29,"models":696},[697],{"id":698,"name":699},"indexList","Indexes List",{"id":701,"group":685,"demo":702,"title":703,"description":704,"parameters":705,"responses":709,"method":59,"url":713,"rate-limit":36,"rate-time":37,"rate-key":38},"getIndex","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.getIndex(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '' // key\n);\n","Get index","Get index by ID.",[706,707,708],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":665,"required":14,"type":15,"example":-1},[710],{"code":54,"contentType":29,"models":711},[712],{"id":680,"name":681},"/databases/{databaseId}/collections/{collectionId}/indexes/{key}",{"id":715,"group":685,"demo":716,"title":717,"description":718,"parameters":719,"responses":723,"method":88,"url":713,"rate-limit":36,"rate-time":37,"rate-key":38},"deleteIndex","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.deleteIndex(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '' // key\n);\n","Delete index","Delete an index.",[720,721,722],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":196,"description":665,"required":14,"type":15,"example":-1},[724],{"code":96,"contentType":-1,"models":725},[],{"id":727,"group":728,"demo":729,"title":730,"description":731,"parameters":732,"responses":749,"method":34,"url":755,"rate-limit":756,"rate-time":757,"rate-key":758},"createDocument","documents","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setSession('') // The user session to authenticate with\n    .setKey('\u003CYOUR_API_KEY>') // Your secret API key\n    .setJWT('\u003CYOUR_JWT>'); // Your secret JSON Web Token\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.createDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>', // documentId\n    {}, // data\n    [\"read(\"any\")\"] // permissions (optional)\n);\n","Create document","Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.",[733,734,736,740,745,747],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":735,"required":14,"type":15,"example":-1},"Collection ID. You can create a new collection using the Database service [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection). Make sure to define attributes before creating documents.",{"name":737,"description":738,"required":24,"type":15,"example":739},"documentId","Document ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.","\u003CDOCUMENT_ID>",{"name":741,"description":742,"required":24,"type":743,"example":744},"data","Document data as JSON object.","object","{}",{"name":112,"description":746,"required":24,"type":48,"example":114},"An array of permissions strings. By default, only the current user is granted all permissions. [Learn more about permissions](https://backrush.io/docs/permissions).",{"name":728,"description":748,"required":24,"type":48,"example":198},"Array of documents data as JSON objects.",[750],{"code":28,"contentType":29,"models":751},[752],{"id":753,"name":754},"document","Document","/databases/{databaseId}/collections/{collectionId}/documents",120,60,"ip:{ip},method:{method},url:{url},userId:{userId}",{"id":760,"group":728,"demo":761,"title":762,"description":763,"parameters":764,"responses":769,"method":59,"url":755,"rate-limit":36,"rate-time":37,"rate-key":38},"listDocuments","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setSession(''); // The user session to authenticate with\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.listDocuments(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    [] // queries (optional)\n);\n","List documents","Get a list of all the user's documents in a given collection. You can use the query params to filter your results.",[765,766,767],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":46,"description":768,"required":24,"type":48,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long.",[770],{"code":54,"contentType":29,"models":771},[772],{"id":773,"name":774},"documentList","Documents List",{"id":776,"group":728,"demo":777,"title":778,"description":779,"parameters":780,"responses":786,"method":59,"url":790,"rate-limit":36,"rate-time":37,"rate-key":38},"getDocument","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setSession(''); // The user session to authenticate with\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.getDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>', // documentId\n    [] // queries (optional)\n);\n","Get document","Get a document by its unique ID. This endpoint response returns a JSON object with the document data.",[781,782,783,785],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":737,"description":784,"required":14,"type":15,"example":-1},"Document ID.",{"name":46,"description":768,"required":24,"type":48,"example":-1},[787],{"code":54,"contentType":29,"models":788},[789],{"id":753,"name":754},"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}",{"id":792,"group":728,"demo":793,"title":794,"description":795,"parameters":796,"responses":804,"method":485,"url":790,"rate-limit":756,"rate-time":757,"rate-key":758},"updateDocument","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setSession(''); // The user session to authenticate with\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>', // documentId\n    {}, // data (optional)\n    [\"read(\"any\")\"] // permissions (optional)\n);\n","Update document","Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.",[797,798,799,800,802],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":151,"required":14,"type":15,"example":-1},{"name":737,"description":784,"required":14,"type":15,"example":-1},{"name":741,"description":801,"required":24,"type":743,"example":744},"Document data as JSON object. Include only attribute and value pairs to be updated.",{"name":112,"description":803,"required":24,"type":48,"example":114},"An array of permissions strings. By default, the current permissions are inherited. [Learn more about permissions](https://backrush.io/docs/permissions).",[805],{"code":54,"contentType":29,"models":806},[807],{"id":753,"name":754},{"id":809,"group":728,"demo":810,"title":811,"description":812,"parameters":813,"responses":818,"method":485,"url":755,"rate-limit":756,"rate-time":757,"rate-key":758},"updateDocuments","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.updateDocuments(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    {}, // data (optional)\n    [] // queries (optional)\n);\n","Update documents","Update all documents that match your queries, if no queries are submitted then all documents are updated. You can pass only specific fields to be updated.",[814,815,816,817],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":151,"required":14,"type":15,"example":-1},{"name":741,"description":801,"required":24,"type":743,"example":744},{"name":46,"description":768,"required":24,"type":48,"example":198},[819],{"code":54,"contentType":29,"models":820},[821],{"id":773,"name":774},{"id":823,"group":728,"demo":824,"title":825,"description":826,"parameters":827,"responses":832,"method":86,"url":755,"rate-limit":756,"rate-time":757,"rate-key":758},"upsertDocuments","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.upsertDocuments(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    [] // documents (optional)\n);\n","Create or update documents","Create or update Documents. Before using this route, you should create a new collection resource using either a [server integration](https://backrush.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n",[828,829,830],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":151,"required":14,"type":15,"example":-1},{"name":728,"description":831,"required":24,"type":48,"example":198},"Array of document data as JSON objects. May contain partial documents.",[833],{"code":54,"contentType":29,"models":834},[835],{"id":773,"name":774},{"id":837,"group":728,"demo":838,"title":839,"description":840,"parameters":841,"responses":845,"method":88,"url":790,"rate-limit":757,"rate-time":757,"rate-key":758},"deleteDocument","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setSession(''); // The user session to authenticate with\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.deleteDocument(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    '\u003CDOCUMENT_ID>' // documentId\n);\n","Delete document","Delete a document by its unique ID.",[842,843,844],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":737,"description":784,"required":14,"type":15,"example":-1},[846],{"code":96,"contentType":-1,"models":847},[],{"id":849,"group":728,"demo":850,"title":851,"description":852,"parameters":853,"responses":857,"method":88,"url":755,"rate-limit":757,"rate-time":757,"rate-key":758},"deleteDocuments","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst result = await databases.deleteDocuments(\n    '\u003CDATABASE_ID>', // databaseId\n    '\u003CCOLLECTION_ID>', // collectionId\n    [] // queries (optional)\n);\n","Delete documents","Bulk delete documents using queries, if no queries are passed then all documents are deleted.",[854,855,856],{"name":12,"description":66,"required":14,"type":15,"example":-1},{"name":107,"description":194,"required":14,"type":15,"example":-1},{"name":46,"description":768,"required":24,"type":48,"example":198},[858],{"code":54,"contentType":29,"models":859},[860],{"id":773,"name":774}],"uses":{"params":["platform","service","version"]}}]}
