{"type":"data","nodes":[{"type":"skip"},{"type":"skip"},{"type":"skip"},{"type":"data","data":[{"service":1,"methods":4},{"name":2,"description":3},"messaging","Backrush Messaging helps you communicate with your users through push notifications, emails, and SMS text messages.\nSending personalized communication for marketing, updates, and realtime alerts can increase user engagement and retention.\nYou can also use Backrush Messaging to implement security checks and custom authentication flows.\n\nYou can find guides and examples on using the Messaging API in the [Backrush Messaging product pages](/docs/products/messaging).\n",[5,66,88,134,160,184,203,226,247,266,297,319,336,348,371,392,419,437,456,473,490,507,522,541,553,577,592,606,618,631,641,665,681,695,708,719,772,791,856,872,887,903,915,938,956,993],{"id":6,"group":7,"demo":8,"title":9,"description":10,"parameters":11,"responses":53,"method":61,"url":62,"rate-limit":63,"rate-time":64,"rate-key":65},"createMailgunProvider","providers","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createMailgunProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CDOMAIN>', // domain (optional)\n    false, // isEuRegion (optional)\n    '\u003CFROM_NAME>', // fromName (optional)\n    'email@example.com', // fromEmail (optional)\n    '\u003CREPLY_TO_NAME>', // replyToName (optional)\n    'email@example.com', // replyToEmail (optional)\n    false // enabled (optional)\n);\n","Create Mailgun provider","Create a new Mailgun provider.",[12,18,22,27,31,35,39,43,47,50],{"name":13,"description":14,"required":15,"type":16,"example":17},"providerId","Provider ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.",true,"string","\u003CPROVIDER_ID>",{"name":19,"description":20,"required":15,"type":16,"example":21},"name","Provider name.","\u003CNAME>",{"name":23,"description":24,"required":25,"type":16,"example":26},"apiKey","Mailgun API Key.",false,"\u003CAPI_KEY>",{"name":28,"description":29,"required":25,"type":16,"example":30},"domain","Mailgun Domain.","\u003CDOMAIN>",{"name":32,"description":33,"required":25,"type":34,"example":25},"isEuRegion","Set as EU region.","boolean",{"name":36,"description":37,"required":25,"type":16,"example":38},"fromName","Sender Name.","\u003CFROM_NAME>",{"name":40,"description":41,"required":25,"type":16,"example":42},"fromEmail","Sender email address.","email@example.com",{"name":44,"description":45,"required":25,"type":16,"example":46},"replyToName","Name set in the reply to field for the mail. Default value is sender name. Reply to name must have reply to email as well.","\u003CREPLY_TO_NAME>",{"name":48,"description":49,"required":25,"type":16,"example":42},"replyToEmail","Email set in the reply to field for the mail. Default value is sender email. Reply to email must have reply to name as well.",{"name":51,"description":52,"required":25,"type":34,"example":25},"enabled","Set as enabled.",[54],{"code":55,"contentType":56,"models":57},201,"application/json",[58],{"id":59,"name":60},"provider","Provider","post","/messaging/providers/mailgun",0,3600,"url:{url},ip:{ip}",{"id":67,"group":7,"demo":68,"title":69,"description":70,"parameters":71,"responses":83,"method":61,"url":87,"rate-limit":63,"rate-time":64,"rate-key":65},"createSendgridProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createSendgridProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CFROM_NAME>', // fromName (optional)\n    'email@example.com', // fromEmail (optional)\n    '\u003CREPLY_TO_NAME>', // replyToName (optional)\n    'email@example.com', // replyToEmail (optional)\n    false // enabled (optional)\n);\n","Create Sendgrid provider","Create a new Sendgrid provider.",[72,73,74,76,77,78,80,82],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":23,"description":75,"required":25,"type":16,"example":26},"Sendgrid API key.",{"name":36,"description":37,"required":25,"type":16,"example":38},{"name":40,"description":41,"required":25,"type":16,"example":42},{"name":44,"description":79,"required":25,"type":16,"example":46},"Name set in the reply to field for the mail. Default value is sender name.",{"name":48,"description":81,"required":25,"type":16,"example":42},"Email set in the reply to field for the mail. Default value is sender email.",{"name":51,"description":52,"required":25,"type":34,"example":25},[84],{"code":55,"contentType":56,"models":85},[86],{"id":59,"name":60},"/messaging/providers/sendgrid",{"id":89,"group":7,"demo":90,"title":91,"description":92,"parameters":93,"responses":129,"method":61,"url":133,"rate-limit":63,"rate-time":64,"rate-key":65},"createSmtpProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createSmtpProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '\u003CHOST>', // host\n    1, // port (optional)\n    '\u003CUSERNAME>', // username (optional)\n    '\u003CPASSWORD>', // password (optional)\n    sdk.SmtpEncryption.None, // encryption (optional)\n    false, // autoTLS (optional)\n    '\u003CMAILER>', // mailer (optional)\n    '\u003CFROM_NAME>', // fromName (optional)\n    'email@example.com', // fromEmail (optional)\n    '\u003CREPLY_TO_NAME>', // replyToName (optional)\n    'email@example.com', // replyToEmail (optional)\n    false // enabled (optional)\n);\n","Create SMTP provider","Create a new SMTP provider.",[94,95,96,100,105,109,113,117,120,124,125,126,127,128],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":97,"description":98,"required":15,"type":16,"example":99},"host","SMTP hosts. Either a single hostname or multiple semicolon-delimited hostnames. You can also specify a different port for each host such as `smtp1.example.com:25;smtp2.example.com`. You can also specify encryption type, for example: `tls://smtp1.example.com:587;ssl://smtp2.example.com:465\"`. Hosts will be tried in order.","\u003CHOST>",{"name":101,"description":102,"required":25,"type":103,"example":104},"port","The default SMTP server port.","integer",1,{"name":106,"description":107,"required":25,"type":16,"example":108},"username","Authentication username.","\u003CUSERNAME>",{"name":110,"description":111,"required":25,"type":16,"example":112},"password","Authentication password.","\u003CPASSWORD>",{"name":114,"description":115,"required":25,"type":16,"example":116},"encryption","Encryption type. Can be omitted, 'ssl', or 'tls'","none",{"name":118,"description":119,"required":25,"type":34,"example":25},"autoTLS","Enable SMTP AutoTLS feature.",{"name":121,"description":122,"required":25,"type":16,"example":123},"mailer","The value to use for the X-Mailer header.","\u003CMAILER>",{"name":36,"description":37,"required":25,"type":16,"example":38},{"name":40,"description":41,"required":25,"type":16,"example":42},{"name":44,"description":79,"required":25,"type":16,"example":46},{"name":48,"description":81,"required":25,"type":16,"example":42},{"name":51,"description":52,"required":25,"type":34,"example":25},[130],{"code":55,"contentType":56,"models":131},[132],{"id":59,"name":60},"/messaging/providers/smtp",{"id":135,"group":7,"demo":136,"title":137,"description":138,"parameters":139,"responses":155,"method":61,"url":159,"rate-limit":63,"rate-time":64,"rate-key":65},"createMsg91Provider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createMsg91Provider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '\u003CTEMPLATE_ID>', // templateId (optional)\n    '\u003CSENDER_ID>', // senderId (optional)\n    '\u003CAUTH_KEY>', // authKey (optional)\n    false // enabled (optional)\n);\n","Create Msg91 provider","Create a new MSG91 provider.",[140,141,142,146,150,154],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":143,"description":144,"required":25,"type":16,"example":145},"templateId","Msg91 template ID","\u003CTEMPLATE_ID>",{"name":147,"description":148,"required":25,"type":16,"example":149},"senderId","Msg91 sender ID.","\u003CSENDER_ID>",{"name":151,"description":152,"required":25,"type":16,"example":153},"authKey","Msg91 auth key.","\u003CAUTH_KEY>",{"name":51,"description":52,"required":25,"type":34,"example":25},[156],{"code":55,"contentType":56,"models":157},[158],{"id":59,"name":60},"/messaging/providers/msg91",{"id":161,"group":7,"demo":162,"title":163,"description":164,"parameters":165,"responses":179,"method":61,"url":183,"rate-limit":63,"rate-time":64,"rate-key":65},"createTelesignProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createTelesignProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '+12065550100', // from (optional)\n    '\u003CCUSTOMER_ID>', // customerId (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    false // enabled (optional)\n);\n","Create Telesign provider","Create a new Telesign provider.",[166,167,168,172,176,178],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":169,"description":170,"required":25,"type":16,"example":171},"from","Sender Phone number. Format this number with a leading '+' and a country code, e.g., +16175551212.","+12065550100",{"name":173,"description":174,"required":25,"type":16,"example":175},"customerId","Telesign customer ID.","\u003CCUSTOMER_ID>",{"name":23,"description":177,"required":25,"type":16,"example":26},"Telesign API key.",{"name":51,"description":52,"required":25,"type":34,"example":25},[180],{"code":55,"contentType":56,"models":181},[182],{"id":59,"name":60},"/messaging/providers/telesign",{"id":185,"group":7,"demo":186,"title":187,"description":188,"parameters":189,"responses":198,"method":61,"url":202,"rate-limit":63,"rate-time":64,"rate-key":65},"createTextmagicProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createTextmagicProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '+12065550100', // from (optional)\n    '\u003CUSERNAME>', // username (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    false // enabled (optional)\n);\n","Create Textmagic provider","Create a new Textmagic provider.",[190,191,192,193,195,197],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":169,"description":170,"required":25,"type":16,"example":171},{"name":106,"description":194,"required":25,"type":16,"example":108},"Textmagic username.",{"name":23,"description":196,"required":25,"type":16,"example":26},"Textmagic apiKey.",{"name":51,"description":52,"required":25,"type":34,"example":25},[199],{"code":55,"contentType":56,"models":200},[201],{"id":59,"name":60},"/messaging/providers/textmagic",{"id":204,"group":7,"demo":205,"title":206,"description":207,"parameters":208,"responses":221,"method":61,"url":225,"rate-limit":63,"rate-time":64,"rate-key":65},"createTwilioProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createTwilioProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '+12065550100', // from (optional)\n    '\u003CACCOUNT_SID>', // accountSid (optional)\n    '\u003CAUTH_TOKEN>', // authToken (optional)\n    false // enabled (optional)\n);\n","Create Twilio provider","Create a new Twilio provider.",[209,210,211,212,216,220],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":169,"description":170,"required":25,"type":16,"example":171},{"name":213,"description":214,"required":25,"type":16,"example":215},"accountSid","Twilio account secret ID.","\u003CACCOUNT_SID>",{"name":217,"description":218,"required":25,"type":16,"example":219},"authToken","Twilio authentication token.","\u003CAUTH_TOKEN>",{"name":51,"description":52,"required":25,"type":34,"example":25},[222],{"code":55,"contentType":56,"models":223},[224],{"id":59,"name":60},"/messaging/providers/twilio",{"id":227,"group":7,"demo":228,"title":229,"description":230,"parameters":231,"responses":242,"method":61,"url":246,"rate-limit":63,"rate-time":64,"rate-key":65},"createVonageProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createVonageProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '+12065550100', // from (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CAPI_SECRET>', // apiSecret (optional)\n    false // enabled (optional)\n);\n","Create Vonage provider","Create a new Vonage provider.",[232,233,234,235,237,241],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":169,"description":170,"required":25,"type":16,"example":171},{"name":23,"description":236,"required":25,"type":16,"example":26},"Vonage API key.",{"name":238,"description":239,"required":25,"type":16,"example":240},"apiSecret","Vonage API secret.","\u003CAPI_SECRET>",{"name":51,"description":52,"required":25,"type":34,"example":25},[243],{"code":55,"contentType":56,"models":244},[245],{"id":59,"name":60},"/messaging/providers/vonage",{"id":248,"group":7,"demo":249,"title":250,"description":251,"parameters":252,"responses":261,"method":61,"url":265,"rate-limit":63,"rate-time":64,"rate-key":65},"createFcmProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createFcmProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    {}, // serviceAccountJSON (optional)\n    false // enabled (optional)\n);\n","Create FCM provider","Create a new Firebase Cloud Messaging provider.",[253,254,255,260],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":256,"description":257,"required":25,"type":258,"example":259},"serviceAccountJSON","FCM service account JSON.","object","{}",{"name":51,"description":52,"required":25,"type":34,"example":25},[262],{"code":55,"contentType":56,"models":263},[264],{"id":59,"name":60},"/messaging/providers/fcm",{"id":267,"group":7,"demo":268,"title":269,"description":270,"parameters":271,"responses":292,"method":61,"url":296,"rate-limit":63,"rate-time":64,"rate-key":65},"createApnsProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createApnsProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name\n    '\u003CAUTH_KEY>', // authKey (optional)\n    '\u003CAUTH_KEY_ID>', // authKeyId (optional)\n    '\u003CTEAM_ID>', // teamId (optional)\n    '\u003CBUNDLE_ID>', // bundleId (optional)\n    false, // sandbox (optional)\n    false // enabled (optional)\n);\n","Create APNS provider","Create a new Apple Push Notification service provider.",[272,273,274,276,280,284,288,291],{"name":13,"description":14,"required":15,"type":16,"example":17},{"name":19,"description":20,"required":15,"type":16,"example":21},{"name":151,"description":275,"required":25,"type":16,"example":153},"APNS authentication key.",{"name":277,"description":278,"required":25,"type":16,"example":279},"authKeyId","APNS authentication key ID.","\u003CAUTH_KEY_ID>",{"name":281,"description":282,"required":25,"type":16,"example":283},"teamId","APNS team ID.","\u003CTEAM_ID>",{"name":285,"description":286,"required":25,"type":16,"example":287},"bundleId","APNS bundle ID.","\u003CBUNDLE_ID>",{"name":289,"description":290,"required":25,"type":34,"example":25},"sandbox","Use APNS sandbox environment.",{"name":51,"description":52,"required":25,"type":34,"example":25},[293],{"code":55,"contentType":56,"models":294},[295],{"id":59,"name":60},"/messaging/providers/apns",{"id":298,"group":7,"demo":299,"title":300,"description":301,"parameters":302,"responses":310,"method":317,"url":318,"rate-limit":63,"rate-time":64,"rate-key":65},"listProviders","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listProviders(\n    [], // queries (optional)\n    '\u003CSEARCH>' // search (optional)\n);\n","List providers","Get a list of all providers from the current Backrush project.",[303,307],{"name":304,"description":305,"required":25,"type":306,"example":-1},"queries","Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, provider, type, enabled","array",{"name":308,"description":309,"required":25,"type":16,"example":-1},"search","Search term to filter your list results. Max length: 256 chars.",[311],{"code":312,"contentType":56,"models":313},200,[314],{"id":315,"name":316},"providerList","Provider list","get","/messaging/providers",{"id":320,"group":7,"demo":321,"title":322,"description":323,"parameters":324,"responses":329,"method":317,"url":335,"rate-limit":63,"rate-time":64,"rate-key":65},"listProviderLogs","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listProviderLogs(\n    '\u003CPROVIDER_ID>', // providerId\n    [] // queries (optional)\n);\n","List provider logs","Get the provider activity logs listed by its unique ID.",[325,327],{"name":13,"description":326,"required":15,"type":16,"example":-1},"Provider ID.",{"name":304,"description":328,"required":25,"type":306,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Only supported methods are limit and offset",[330],{"code":312,"contentType":56,"models":331},[332],{"id":333,"name":334},"logList","Logs List","/messaging/providers/{providerId}/logs",{"id":337,"group":7,"demo":338,"title":339,"description":340,"parameters":341,"responses":343,"method":317,"url":347,"rate-limit":63,"rate-time":64,"rate-key":65},"getProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.getProvider(\n    '\u003CPROVIDER_ID>' // providerId\n);\n","Get provider","Get a provider by its unique ID.\n",[342],{"name":13,"description":326,"required":15,"type":16,"example":-1},[344],{"code":312,"contentType":56,"models":345},[346],{"id":59,"name":60},"/messaging/providers/{providerId}",{"id":349,"group":7,"demo":350,"title":351,"description":352,"parameters":353,"responses":365,"method":369,"url":370,"rate-limit":63,"rate-time":64,"rate-key":65},"updateMailgunProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateMailgunProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CDOMAIN>', // domain (optional)\n    false, // isEuRegion (optional)\n    false, // enabled (optional)\n    '\u003CFROM_NAME>', // fromName (optional)\n    'email@example.com', // fromEmail (optional)\n    '\u003CREPLY_TO_NAME>', // replyToName (optional)\n    '\u003CREPLY_TO_EMAIL>' // replyToEmail (optional)\n);\n","Update Mailgun provider","Update a Mailgun provider by its unique ID.",[354,355,356,357,358,359,360,361,362,363],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":23,"description":24,"required":25,"type":16,"example":26},{"name":28,"description":29,"required":25,"type":16,"example":30},{"name":32,"description":33,"required":25,"type":34,"example":25},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":36,"description":37,"required":25,"type":16,"example":38},{"name":40,"description":41,"required":25,"type":16,"example":42},{"name":44,"description":79,"required":25,"type":16,"example":46},{"name":48,"description":81,"required":25,"type":16,"example":364},"\u003CREPLY_TO_EMAIL>",[366],{"code":312,"contentType":56,"models":367},[368],{"id":59,"name":60},"patch","/messaging/providers/mailgun/{providerId}",{"id":372,"group":7,"demo":373,"title":374,"description":375,"parameters":376,"responses":387,"method":369,"url":391,"rate-limit":63,"rate-time":64,"rate-key":65},"updateSendgridProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateSendgridProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CFROM_NAME>', // fromName (optional)\n    'email@example.com', // fromEmail (optional)\n    '\u003CREPLY_TO_NAME>', // replyToName (optional)\n    '\u003CREPLY_TO_EMAIL>' // replyToEmail (optional)\n);\n","Update Sendgrid provider","Update a Sendgrid provider by its unique ID.",[377,378,379,380,381,382,383,385],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":23,"description":75,"required":25,"type":16,"example":26},{"name":36,"description":37,"required":25,"type":16,"example":38},{"name":40,"description":41,"required":25,"type":16,"example":42},{"name":44,"description":384,"required":25,"type":16,"example":46},"Name set in the Reply To field for the mail. Default value is Sender Name.",{"name":48,"description":386,"required":25,"type":16,"example":364},"Email set in the Reply To field for the mail. Default value is Sender Email.",[388],{"code":312,"contentType":56,"models":389},[390],{"id":59,"name":60},"/messaging/providers/sendgrid/{providerId}",{"id":393,"group":7,"demo":394,"title":395,"description":396,"parameters":397,"responses":414,"method":369,"url":418,"rate-limit":63,"rate-time":64,"rate-key":65},"updateSmtpProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateSmtpProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    '\u003CHOST>', // host (optional)\n    1, // port (optional)\n    '\u003CUSERNAME>', // username (optional)\n    '\u003CPASSWORD>', // password (optional)\n    sdk.SmtpEncryption.None, // encryption (optional)\n    false, // autoTLS (optional)\n    '\u003CMAILER>', // mailer (optional)\n    '\u003CFROM_NAME>', // fromName (optional)\n    'email@example.com', // fromEmail (optional)\n    '\u003CREPLY_TO_NAME>', // replyToName (optional)\n    '\u003CREPLY_TO_EMAIL>', // replyToEmail (optional)\n    false // enabled (optional)\n);\n","Update SMTP provider","Update a SMTP provider by its unique ID.",[398,399,400,401,403,404,405,407,408,409,410,411,412,413],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":97,"description":98,"required":25,"type":16,"example":99},{"name":101,"description":402,"required":25,"type":103,"example":104},"SMTP port.",{"name":106,"description":107,"required":25,"type":16,"example":108},{"name":110,"description":111,"required":25,"type":16,"example":112},{"name":114,"description":406,"required":25,"type":16,"example":116},"Encryption type. Can be 'ssl' or 'tls'",{"name":118,"description":119,"required":25,"type":34,"example":25},{"name":121,"description":122,"required":25,"type":16,"example":123},{"name":36,"description":37,"required":25,"type":16,"example":38},{"name":40,"description":41,"required":25,"type":16,"example":42},{"name":44,"description":384,"required":25,"type":16,"example":46},{"name":48,"description":386,"required":25,"type":16,"example":364},{"name":51,"description":52,"required":25,"type":34,"example":25},[415],{"code":312,"contentType":56,"models":416},[417],{"id":59,"name":60},"/messaging/providers/smtp/{providerId}",{"id":420,"group":7,"demo":421,"title":422,"description":423,"parameters":424,"responses":432,"method":369,"url":436,"rate-limit":63,"rate-time":64,"rate-key":65},"updateMsg91Provider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateMsg91Provider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    '\u003CTEMPLATE_ID>', // templateId (optional)\n    '\u003CSENDER_ID>', // senderId (optional)\n    '\u003CAUTH_KEY>' // authKey (optional)\n);\n","Update Msg91 provider","Update a MSG91 provider by its unique ID.",[425,426,427,428,430,431],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":143,"description":429,"required":25,"type":16,"example":145},"Msg91 template ID.",{"name":147,"description":148,"required":25,"type":16,"example":149},{"name":151,"description":152,"required":25,"type":16,"example":153},[433],{"code":312,"contentType":56,"models":434},[435],{"id":59,"name":60},"/messaging/providers/msg91/{providerId}",{"id":438,"group":7,"demo":439,"title":440,"description":441,"parameters":442,"responses":451,"method":369,"url":455,"rate-limit":63,"rate-time":64,"rate-key":65},"updateTelesignProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateTelesignProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    '\u003CCUSTOMER_ID>', // customerId (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CFROM>' // from (optional)\n);\n","Update Telesign provider","Update a Telesign provider by its unique ID.",[443,444,445,446,447,448],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":173,"description":174,"required":25,"type":16,"example":175},{"name":23,"description":177,"required":25,"type":16,"example":26},{"name":169,"description":449,"required":25,"type":16,"example":450},"Sender number.","\u003CFROM>",[452],{"code":312,"contentType":56,"models":453},[454],{"id":59,"name":60},"/messaging/providers/telesign/{providerId}",{"id":457,"group":7,"demo":458,"title":459,"description":460,"parameters":461,"responses":468,"method":369,"url":472,"rate-limit":63,"rate-time":64,"rate-key":65},"updateTextmagicProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateTextmagicProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    '\u003CUSERNAME>', // username (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CFROM>' // from (optional)\n);\n","Update Textmagic provider","Update a Textmagic provider by its unique ID.",[462,463,464,465,466,467],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":106,"description":194,"required":25,"type":16,"example":108},{"name":23,"description":196,"required":25,"type":16,"example":26},{"name":169,"description":449,"required":25,"type":16,"example":450},[469],{"code":312,"contentType":56,"models":470},[471],{"id":59,"name":60},"/messaging/providers/textmagic/{providerId}",{"id":474,"group":7,"demo":475,"title":476,"description":477,"parameters":478,"responses":485,"method":369,"url":489,"rate-limit":63,"rate-time":64,"rate-key":65},"updateTwilioProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateTwilioProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    '\u003CACCOUNT_SID>', // accountSid (optional)\n    '\u003CAUTH_TOKEN>', // authToken (optional)\n    '\u003CFROM>' // from (optional)\n);\n","Update Twilio provider","Update a Twilio provider by its unique ID.",[479,480,481,482,483,484],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":213,"description":214,"required":25,"type":16,"example":215},{"name":217,"description":218,"required":25,"type":16,"example":219},{"name":169,"description":449,"required":25,"type":16,"example":450},[486],{"code":312,"contentType":56,"models":487},[488],{"id":59,"name":60},"/messaging/providers/twilio/{providerId}",{"id":491,"group":7,"demo":492,"title":493,"description":494,"parameters":495,"responses":502,"method":369,"url":506,"rate-limit":63,"rate-time":64,"rate-key":65},"updateVonageProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateVonageProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    '\u003CAPI_KEY>', // apiKey (optional)\n    '\u003CAPI_SECRET>', // apiSecret (optional)\n    '\u003CFROM>' // from (optional)\n);\n","Update Vonage provider","Update a Vonage provider by its unique ID.",[496,497,498,499,500,501],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":23,"description":236,"required":25,"type":16,"example":26},{"name":238,"description":239,"required":25,"type":16,"example":240},{"name":169,"description":449,"required":25,"type":16,"example":450},[503],{"code":312,"contentType":56,"models":504},[505],{"id":59,"name":60},"/messaging/providers/vonage/{providerId}",{"id":508,"group":7,"demo":509,"title":510,"description":511,"parameters":512,"responses":517,"method":369,"url":521,"rate-limit":63,"rate-time":64,"rate-key":65},"updateFcmProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateFcmProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    {} // serviceAccountJSON (optional)\n);\n","Update FCM provider","Update a Firebase Cloud Messaging provider by its unique ID.",[513,514,515,516],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":256,"description":257,"required":25,"type":258,"example":259},[518],{"code":312,"contentType":56,"models":519},[520],{"id":59,"name":60},"/messaging/providers/fcm/{providerId}",{"id":523,"group":7,"demo":524,"title":525,"description":526,"parameters":527,"responses":536,"method":369,"url":540,"rate-limit":63,"rate-time":64,"rate-key":65},"updateApnsProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateApnsProvider(\n    '\u003CPROVIDER_ID>', // providerId\n    '\u003CNAME>', // name (optional)\n    false, // enabled (optional)\n    '\u003CAUTH_KEY>', // authKey (optional)\n    '\u003CAUTH_KEY_ID>', // authKeyId (optional)\n    '\u003CTEAM_ID>', // teamId (optional)\n    '\u003CBUNDLE_ID>', // bundleId (optional)\n    false // sandbox (optional)\n);\n","Update APNS provider","Update a Apple Push Notification service provider by its unique ID.",[528,529,530,531,532,533,534,535],{"name":13,"description":326,"required":15,"type":16,"example":-1},{"name":19,"description":20,"required":25,"type":16,"example":21},{"name":51,"description":52,"required":25,"type":34,"example":25},{"name":151,"description":275,"required":25,"type":16,"example":153},{"name":277,"description":278,"required":25,"type":16,"example":279},{"name":281,"description":282,"required":25,"type":16,"example":283},{"name":285,"description":286,"required":25,"type":16,"example":287},{"name":289,"description":290,"required":25,"type":34,"example":25},[537],{"code":312,"contentType":56,"models":538},[539],{"id":59,"name":60},"/messaging/providers/apns/{providerId}",{"id":542,"group":7,"demo":543,"title":544,"description":545,"parameters":546,"responses":548,"method":552,"url":347,"rate-limit":63,"rate-time":64,"rate-key":65},"deleteProvider","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.deleteProvider(\n    '\u003CPROVIDER_ID>' // providerId\n);\n","Delete provider","Delete a provider by its unique ID.",[547],{"name":13,"description":326,"required":15,"type":16,"example":-1},[549],{"code":550,"contentType":-1,"models":551},204,[],"delete",{"id":554,"group":555,"demo":556,"title":557,"description":558,"parameters":559,"responses":570,"method":61,"url":576,"rate-limit":63,"rate-time":64,"rate-key":65},"createTopic","topics","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createTopic(\n    '\u003CTOPIC_ID>', // topicId\n    '\u003CNAME>', // name\n    [\"any\"] // subscribe (optional)\n);\n","Create topic","Create a new topic.",[560,564,566],{"name":561,"description":562,"required":15,"type":16,"example":563},"topicId","Topic ID. Choose a custom Topic ID or a new Topic ID.","\u003CTOPIC_ID>",{"name":19,"description":565,"required":15,"type":16,"example":21},"Topic Name.",{"name":567,"description":568,"required":25,"type":306,"example":569},"subscribe","An array of role strings with subscribe permission. By default all users are granted with any subscribe permission. [learn more about roles](https://backrush.io/docs/permissions#permission-roles). Maximum of 100 roles are allowed, each 64 characters long.","[\"any\"]",[571],{"code":55,"contentType":56,"models":572},[573],{"id":574,"name":575},"topic","Topic","/messaging/topics",{"id":578,"group":555,"demo":579,"title":580,"description":581,"parameters":582,"responses":586,"method":317,"url":576,"rate-limit":63,"rate-time":64,"rate-key":65},"listTopics","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listTopics(\n    [], // queries (optional)\n    '\u003CSEARCH>' // search (optional)\n);\n","List topics","Get a list of all topics from the current Backrush project.",[583,585],{"name":304,"description":584,"required":25,"type":306,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: name, description, emailTotal, smsTotal, pushTotal",{"name":308,"description":309,"required":25,"type":16,"example":-1},[587],{"code":312,"contentType":56,"models":588},[589],{"id":590,"name":591},"topicList","Topic list",{"id":593,"group":555,"demo":594,"title":595,"description":596,"parameters":597,"responses":601,"method":317,"url":605,"rate-limit":63,"rate-time":64,"rate-key":65},"listTopicLogs","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listTopicLogs(\n    '\u003CTOPIC_ID>', // topicId\n    [] // queries (optional)\n);\n","List topic logs","Get the topic activity logs listed by its unique ID.",[598,600],{"name":561,"description":599,"required":15,"type":16,"example":-1},"Topic ID.",{"name":304,"description":328,"required":25,"type":306,"example":-1},[602],{"code":312,"contentType":56,"models":603},[604],{"id":333,"name":334},"/messaging/topics/{topicId}/logs",{"id":607,"group":555,"demo":608,"title":609,"description":610,"parameters":611,"responses":613,"method":317,"url":617,"rate-limit":63,"rate-time":64,"rate-key":65},"getTopic","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.getTopic(\n    '\u003CTOPIC_ID>' // topicId\n);\n","Get topic","Get a topic by its unique ID.\n",[612],{"name":561,"description":599,"required":15,"type":16,"example":-1},[614],{"code":312,"contentType":56,"models":615},[616],{"id":574,"name":575},"/messaging/topics/{topicId}",{"id":619,"group":555,"demo":620,"title":621,"description":622,"parameters":623,"responses":627,"method":369,"url":617,"rate-limit":63,"rate-time":64,"rate-key":65},"updateTopic","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateTopic(\n    '\u003CTOPIC_ID>', // topicId\n    '\u003CNAME>', // name (optional)\n    [\"any\"] // subscribe (optional)\n);\n","Update topic","Update a topic by its unique ID.\n",[624,625,626],{"name":561,"description":599,"required":15,"type":16,"example":-1},{"name":19,"description":565,"required":25,"type":16,"example":21},{"name":567,"description":568,"required":25,"type":306,"example":569},[628],{"code":312,"contentType":56,"models":629},[630],{"id":574,"name":575},{"id":632,"group":555,"demo":633,"title":634,"description":635,"parameters":636,"responses":638,"method":552,"url":617,"rate-limit":63,"rate-time":64,"rate-key":65},"deleteTopic","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.deleteTopic(\n    '\u003CTOPIC_ID>' // topicId\n);\n","Delete topic","Delete a topic by its unique ID.",[637],{"name":561,"description":599,"required":15,"type":16,"example":-1},[639],{"code":550,"contentType":-1,"models":640},[],{"id":642,"group":643,"demo":644,"title":645,"description":646,"parameters":647,"responses":658,"method":61,"url":664,"rate-limit":63,"rate-time":64,"rate-key":65},"createSubscriber","subscribers","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setJWT('\u003CYOUR_JWT>'); // Your secret JSON Web Token\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createSubscriber(\n    '\u003CTOPIC_ID>', // topicId\n    '\u003CSUBSCRIBER_ID>', // subscriberId\n    '\u003CTARGET_ID>' // targetId\n);\n","Create subscriber","Create a new subscriber.",[648,650,654],{"name":561,"description":649,"required":15,"type":16,"example":-1},"Topic ID. The topic ID to subscribe to.",{"name":651,"description":652,"required":15,"type":16,"example":653},"subscriberId","Subscriber ID. Choose a custom Subscriber ID or a new Subscriber ID.","\u003CSUBSCRIBER_ID>",{"name":655,"description":656,"required":15,"type":16,"example":657},"targetId","Target ID. The target ID to link to the specified Topic ID.","\u003CTARGET_ID>",[659],{"code":55,"contentType":56,"models":660},[661],{"id":662,"name":663},"subscriber","Subscriber","/messaging/topics/{topicId}/subscribers",{"id":666,"group":643,"demo":667,"title":668,"description":669,"parameters":670,"responses":675,"method":317,"url":664,"rate-limit":63,"rate-time":64,"rate-key":65},"listSubscribers","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listSubscribers(\n    '\u003CTOPIC_ID>', // topicId\n    [], // queries (optional)\n    '\u003CSEARCH>' // search (optional)\n);\n","List subscribers","Get a list of all subscribers from the current Backrush project.",[671,673,674],{"name":561,"description":672,"required":15,"type":16,"example":-1},"Topic ID. The topic ID subscribed to.",{"name":304,"description":305,"required":25,"type":306,"example":-1},{"name":308,"description":309,"required":25,"type":16,"example":-1},[676],{"code":312,"contentType":56,"models":677},[678],{"id":679,"name":680},"subscriberList","Subscriber list",{"id":682,"group":643,"demo":683,"title":684,"description":685,"parameters":686,"responses":690,"method":317,"url":694,"rate-limit":63,"rate-time":64,"rate-key":65},"listSubscriberLogs","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listSubscriberLogs(\n    '\u003CSUBSCRIBER_ID>', // subscriberId\n    [] // queries (optional)\n);\n","List subscriber logs","Get the subscriber activity logs listed by its unique ID.",[687,689],{"name":651,"description":688,"required":15,"type":16,"example":-1},"Subscriber ID.",{"name":304,"description":328,"required":25,"type":306,"example":-1},[691],{"code":312,"contentType":56,"models":692},[693],{"id":333,"name":334},"/messaging/subscribers/{subscriberId}/logs",{"id":696,"group":643,"demo":697,"title":698,"description":699,"parameters":700,"responses":703,"method":317,"url":707,"rate-limit":63,"rate-time":64,"rate-key":65},"getSubscriber","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.getSubscriber(\n    '\u003CTOPIC_ID>', // topicId\n    '\u003CSUBSCRIBER_ID>' // subscriberId\n);\n","Get subscriber","Get a subscriber by its unique ID.\n",[701,702],{"name":561,"description":672,"required":15,"type":16,"example":-1},{"name":651,"description":688,"required":15,"type":16,"example":-1},[704],{"code":312,"contentType":56,"models":705},[706],{"id":662,"name":663},"/messaging/topics/{topicId}/subscribers/{subscriberId}",{"id":709,"group":643,"demo":710,"title":711,"description":712,"parameters":713,"responses":716,"method":552,"url":707,"rate-limit":63,"rate-time":64,"rate-key":65},"deleteSubscriber","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setJWT('\u003CYOUR_JWT>'); // Your secret JSON Web Token\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.deleteSubscriber(\n    '\u003CTOPIC_ID>', // topicId\n    '\u003CSUBSCRIBER_ID>' // subscriberId\n);\n","Delete subscriber","Delete a subscriber by its unique ID.",[714,715],{"name":561,"description":672,"required":15,"type":16,"example":-1},{"name":651,"description":688,"required":15,"type":16,"example":-1},[717],{"code":550,"contentType":-1,"models":718},[],{"id":720,"group":721,"demo":722,"title":723,"description":724,"parameters":725,"responses":765,"method":61,"url":771,"rate-limit":63,"rate-time":64,"rate-key":65},"createEmail","messages","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createEmail(\n    '\u003CMESSAGE_ID>', // messageId\n    '\u003CSUBJECT>', // subject\n    '\u003CCONTENT>', // content\n    [], // topics (optional)\n    [], // users (optional)\n    [], // targets (optional)\n    [], // cc (optional)\n    [], // bcc (optional)\n    [], // attachments (optional)\n    false, // draft (optional)\n    false, // html (optional)\n    '' // scheduledAt (optional)\n);\n","Create email","Create a new email message.",[726,730,734,738,741,744,747,750,753,756,759,762],{"name":727,"description":728,"required":15,"type":16,"example":729},"messageId","Message ID. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can't start with a special char. Max length is 36 chars.","\u003CMESSAGE_ID>",{"name":731,"description":732,"required":15,"type":16,"example":733},"subject","Email Subject.","\u003CSUBJECT>",{"name":735,"description":736,"required":15,"type":16,"example":737},"content","Email Content.","\u003CCONTENT>",{"name":555,"description":739,"required":25,"type":306,"example":740},"List of Topic IDs.","",{"name":742,"description":743,"required":25,"type":306,"example":740},"users","List of User IDs.",{"name":745,"description":746,"required":25,"type":306,"example":740},"targets","List of Targets IDs.",{"name":748,"description":749,"required":25,"type":306,"example":740},"cc","Array of target IDs to be added as CC.",{"name":751,"description":752,"required":25,"type":306,"example":740},"bcc","Array of target IDs to be added as BCC.",{"name":754,"description":755,"required":25,"type":306,"example":740},"attachments","Array of compound ID strings of bucket IDs and file IDs to be attached to the email. They should be formatted as \u003CBUCKET_ID>:\u003CFILE_ID>.",{"name":757,"description":758,"required":25,"type":34,"example":25},"draft","Is message a draft",{"name":760,"description":761,"required":25,"type":34,"example":25},"html","Is content of type HTML",{"name":763,"description":764,"required":25,"type":16,"example":740},"scheduledAt","Scheduled delivery time for message in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. DateTime value must be in future.",[766],{"code":55,"contentType":56,"models":767},[768],{"id":769,"name":770},"message","Message","/messaging/messages/email",{"id":773,"group":721,"demo":774,"title":775,"description":776,"parameters":777,"responses":786,"method":61,"url":790,"rate-limit":63,"rate-time":64,"rate-key":65},"createSms","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createSms(\n    '\u003CMESSAGE_ID>', // messageId\n    '\u003CCONTENT>', // content\n    [], // topics (optional)\n    [], // users (optional)\n    [], // targets (optional)\n    false, // draft (optional)\n    '' // scheduledAt (optional)\n);\n","Create SMS","Create a new SMS message.",[778,779,781,782,783,784,785],{"name":727,"description":728,"required":15,"type":16,"example":729},{"name":735,"description":780,"required":15,"type":16,"example":737},"SMS Content.",{"name":555,"description":739,"required":25,"type":306,"example":740},{"name":742,"description":743,"required":25,"type":306,"example":740},{"name":745,"description":746,"required":25,"type":306,"example":740},{"name":757,"description":758,"required":25,"type":34,"example":25},{"name":763,"description":764,"required":25,"type":16,"example":740},[787],{"code":55,"contentType":56,"models":788},[789],{"id":769,"name":770},"/messaging/messages/sms",{"id":792,"group":721,"demo":793,"title":794,"description":795,"parameters":796,"responses":851,"method":61,"url":855,"rate-limit":63,"rate-time":64,"rate-key":65},"createPush","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.createPush(\n    '\u003CMESSAGE_ID>', // messageId\n    '\u003CTITLE>', // title (optional)\n    '\u003CBODY>', // body (optional)\n    [], // topics (optional)\n    [], // users (optional)\n    [], // targets (optional)\n    {}, // data (optional)\n    '\u003CACTION>', // action (optional)\n    '[ID1:ID2]', // image (optional)\n    '\u003CICON>', // icon (optional)\n    '\u003CSOUND>', // sound (optional)\n    '\u003CCOLOR>', // color (optional)\n    '\u003CTAG>', // tag (optional)\n    null, // badge (optional)\n    false, // draft (optional)\n    '', // scheduledAt (optional)\n    false, // contentAvailable (optional)\n    false, // critical (optional)\n    sdk.MessagePriority.Normal // priority (optional)\n);\n","Create push notification","Create a new push notification.",[797,798,802,806,807,808,809,812,816,820,824,828,832,836,839,840,841,844,847],{"name":727,"description":728,"required":15,"type":16,"example":729},{"name":799,"description":800,"required":25,"type":16,"example":801},"title","Title for push notification.","\u003CTITLE>",{"name":803,"description":804,"required":25,"type":16,"example":805},"body","Body for push notification.","\u003CBODY>",{"name":555,"description":739,"required":25,"type":306,"example":740},{"name":742,"description":743,"required":25,"type":306,"example":740},{"name":745,"description":746,"required":25,"type":306,"example":740},{"name":810,"description":811,"required":25,"type":258,"example":259},"data","Additional key-value pair data for push notification.",{"name":813,"description":814,"required":25,"type":16,"example":815},"action","Action for push notification.","\u003CACTION>",{"name":817,"description":818,"required":25,"type":16,"example":819},"image","Image for push notification. Must be a compound bucket ID to file ID of a jpeg, png, or bmp image in Backrush Storage. It should be formatted as \u003CBUCKET_ID>:\u003CFILE_ID>.","[ID1:ID2]",{"name":821,"description":822,"required":25,"type":16,"example":823},"icon","Icon for push notification. Available only for Android and Web Platform.","\u003CICON>",{"name":825,"description":826,"required":25,"type":16,"example":827},"sound","Sound for push notification. Available only for Android and iOS Platform.","\u003CSOUND>",{"name":829,"description":830,"required":25,"type":16,"example":831},"color","Color for push notification. Available only for Android Platform.","\u003CCOLOR>",{"name":833,"description":834,"required":25,"type":16,"example":835},"tag","Tag for push notification. Available only for Android Platform.","\u003CTAG>",{"name":837,"description":838,"required":25,"type":103,"example":740},"badge","Badge for push notification. Available only for iOS Platform.",{"name":757,"description":758,"required":25,"type":34,"example":25},{"name":763,"description":764,"required":25,"type":16,"example":740},{"name":842,"description":843,"required":25,"type":34,"example":25},"contentAvailable","If set to true, the notification will be delivered in the background. Available only for iOS Platform.",{"name":845,"description":846,"required":25,"type":34,"example":25},"critical","If set to true, the notification will be marked as critical. This requires the app to have the critical notification entitlement. Available only for iOS Platform.",{"name":848,"description":849,"required":25,"type":16,"example":850},"priority","Set the notification priority. \"normal\" will consider device state and may not deliver notifications immediately. \"high\" will always attempt to immediately deliver the notification.","normal",[852],{"code":55,"contentType":56,"models":853},[854],{"id":769,"name":770},"/messaging/messages/push",{"id":857,"group":721,"demo":858,"title":859,"description":860,"parameters":861,"responses":865,"method":317,"url":871,"rate-limit":63,"rate-time":64,"rate-key":65},"listMessages","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listMessages(\n    [], // queries (optional)\n    '\u003CSEARCH>' // search (optional)\n);\n","List messages","Get a list of all messages from the current Backrush project.",[862,864],{"name":304,"description":863,"required":25,"type":306,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: scheduledAt, deliveredAt, deliveredTotal, status, description, providerType",{"name":308,"description":309,"required":25,"type":16,"example":-1},[866],{"code":312,"contentType":56,"models":867},[868],{"id":869,"name":870},"messageList","Message list","/messaging/messages",{"id":873,"group":874,"demo":875,"title":876,"description":877,"parameters":878,"responses":882,"method":317,"url":886,"rate-limit":63,"rate-time":64,"rate-key":65},"listMessageLogs","logs","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listMessageLogs(\n    '\u003CMESSAGE_ID>', // messageId\n    [] // queries (optional)\n);\n","List message logs","Get the message activity logs listed by its unique ID.",[879,881],{"name":727,"description":880,"required":15,"type":16,"example":-1},"Message ID.",{"name":304,"description":328,"required":25,"type":306,"example":-1},[883],{"code":312,"contentType":56,"models":884},[885],{"id":333,"name":334},"/messaging/messages/{messageId}/logs",{"id":888,"group":721,"demo":889,"title":890,"description":891,"parameters":892,"responses":896,"method":317,"url":902,"rate-limit":63,"rate-time":64,"rate-key":65},"listTargets","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.listTargets(\n    '\u003CMESSAGE_ID>', // messageId\n    [] // queries (optional)\n);\n","List message targets","Get a list of the targets associated with a message.",[893,894],{"name":727,"description":880,"required":15,"type":16,"example":-1},{"name":304,"description":895,"required":25,"type":306,"example":-1},"Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://backrush.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: userId, providerId, identifier, providerType",[897],{"code":312,"contentType":56,"models":898},[899],{"id":900,"name":901},"targetList","Target list","/messaging/messages/{messageId}/targets",{"id":904,"group":721,"demo":905,"title":906,"description":907,"parameters":908,"responses":910,"method":317,"url":914,"rate-limit":63,"rate-time":64,"rate-key":65},"getMessage","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.getMessage(\n    '\u003CMESSAGE_ID>' // messageId\n);\n","Get message","Get a message by its unique ID.\n",[909],{"name":727,"description":880,"required":15,"type":16,"example":-1},[911],{"code":312,"contentType":56,"models":912},[913],{"id":769,"name":770},"/messaging/messages/{messageId}",{"id":916,"group":721,"demo":917,"title":918,"description":919,"parameters":920,"responses":933,"method":369,"url":937,"rate-limit":63,"rate-time":64,"rate-key":65},"updateEmail","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateEmail(\n    '\u003CMESSAGE_ID>', // messageId\n    [], // topics (optional)\n    [], // users (optional)\n    [], // targets (optional)\n    '\u003CSUBJECT>', // subject (optional)\n    '\u003CCONTENT>', // content (optional)\n    false, // draft (optional)\n    false, // html (optional)\n    [], // cc (optional)\n    [], // bcc (optional)\n    '', // scheduledAt (optional)\n    [] // attachments (optional)\n);\n","Update email","Update an email message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n",[921,922,923,924,925,926,927,928,929,930,931,932],{"name":727,"description":880,"required":15,"type":16,"example":-1},{"name":555,"description":739,"required":25,"type":306,"example":740},{"name":742,"description":743,"required":25,"type":306,"example":740},{"name":745,"description":746,"required":25,"type":306,"example":740},{"name":731,"description":732,"required":25,"type":16,"example":733},{"name":735,"description":736,"required":25,"type":16,"example":737},{"name":757,"description":758,"required":25,"type":34,"example":25},{"name":760,"description":761,"required":25,"type":34,"example":25},{"name":748,"description":749,"required":25,"type":306,"example":740},{"name":751,"description":752,"required":25,"type":306,"example":740},{"name":763,"description":764,"required":25,"type":16,"example":740},{"name":754,"description":755,"required":25,"type":306,"example":740},[934],{"code":312,"contentType":56,"models":935},[936],{"id":769,"name":770},"/messaging/messages/email/{messageId}",{"id":939,"group":721,"demo":940,"title":941,"description":942,"parameters":943,"responses":951,"method":369,"url":955,"rate-limit":63,"rate-time":64,"rate-key":65},"updateSms","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updateSms(\n    '\u003CMESSAGE_ID>', // messageId\n    [], // topics (optional)\n    [], // users (optional)\n    [], // targets (optional)\n    '\u003CCONTENT>', // content (optional)\n    false, // draft (optional)\n    '' // scheduledAt (optional)\n);\n","Update SMS","Update an SMS message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n",[944,945,946,947,948,949,950],{"name":727,"description":880,"required":15,"type":16,"example":-1},{"name":555,"description":739,"required":25,"type":306,"example":740},{"name":742,"description":743,"required":25,"type":306,"example":740},{"name":745,"description":746,"required":25,"type":306,"example":740},{"name":735,"description":736,"required":25,"type":16,"example":737},{"name":757,"description":758,"required":25,"type":34,"example":25},{"name":763,"description":764,"required":25,"type":16,"example":740},[952],{"code":312,"contentType":56,"models":953},[954],{"id":769,"name":770},"/messaging/messages/sms/{messageId}",{"id":957,"group":721,"demo":958,"title":959,"description":960,"parameters":961,"responses":988,"method":369,"url":992,"rate-limit":63,"rate-time":64,"rate-key":65},"updatePush","const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.updatePush(\n    '\u003CMESSAGE_ID>', // messageId\n    [], // topics (optional)\n    [], // users (optional)\n    [], // targets (optional)\n    '\u003CTITLE>', // title (optional)\n    '\u003CBODY>', // body (optional)\n    {}, // data (optional)\n    '\u003CACTION>', // action (optional)\n    '[ID1:ID2]', // image (optional)\n    '\u003CICON>', // icon (optional)\n    '\u003CSOUND>', // sound (optional)\n    '\u003CCOLOR>', // color (optional)\n    '\u003CTAG>', // tag (optional)\n    null, // badge (optional)\n    false, // draft (optional)\n    '', // scheduledAt (optional)\n    false, // contentAvailable (optional)\n    false, // critical (optional)\n    sdk.MessagePriority.Normal // priority (optional)\n);\n","Update push notification","Update a push notification by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n",[962,963,964,965,966,967,968,970,971,972,974,976,978,980,982,983,984,985,986],{"name":727,"description":880,"required":15,"type":16,"example":-1},{"name":555,"description":739,"required":25,"type":306,"example":740},{"name":742,"description":743,"required":25,"type":306,"example":740},{"name":745,"description":746,"required":25,"type":306,"example":740},{"name":799,"description":800,"required":25,"type":16,"example":801},{"name":803,"description":804,"required":25,"type":16,"example":805},{"name":810,"description":969,"required":25,"type":258,"example":259},"Additional Data for push notification.",{"name":813,"description":814,"required":25,"type":16,"example":815},{"name":817,"description":818,"required":25,"type":16,"example":819},{"name":821,"description":973,"required":25,"type":16,"example":823},"Icon for push notification. Available only for Android and Web platforms.",{"name":825,"description":975,"required":25,"type":16,"example":827},"Sound for push notification. Available only for Android and iOS platforms.",{"name":829,"description":977,"required":25,"type":16,"example":831},"Color for push notification. Available only for Android platforms.",{"name":833,"description":979,"required":25,"type":16,"example":835},"Tag for push notification. Available only for Android platforms.",{"name":837,"description":981,"required":25,"type":103,"example":740},"Badge for push notification. Available only for iOS platforms.",{"name":757,"description":758,"required":25,"type":34,"example":25},{"name":763,"description":764,"required":25,"type":16,"example":740},{"name":842,"description":843,"required":25,"type":34,"example":25},{"name":845,"description":846,"required":25,"type":34,"example":25},{"name":848,"description":987,"required":25,"type":16,"example":850},"Set the notification priority. \"normal\" will consider device battery state and may send notifications later. \"high\" will always attempt to immediately deliver the notification.",[989],{"code":312,"contentType":56,"models":990},[991],{"id":769,"name":770},"/messaging/messages/push/{messageId}",{"id":552,"group":721,"demo":994,"title":995,"description":996,"parameters":997,"responses":999,"method":552,"url":914,"rate-limit":63,"rate-time":64,"rate-key":65},"const sdk = require('node-backrush');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.backrush.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst messaging = new sdk.Messaging(client);\n\nconst result = await messaging.delete(\n    '\u003CMESSAGE_ID>' // messageId\n);\n","Delete message","Delete a message. If the message is not a draft or scheduled, but has been sent, this will not recall the message.",[998],{"name":727,"description":880,"required":15,"type":16,"example":-1},[1000],{"code":550,"contentType":-1,"models":1001},[]],"uses":{"params":["platform","service","version"]}}]}
