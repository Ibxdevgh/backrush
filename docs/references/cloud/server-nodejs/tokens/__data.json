{"type":"data","nodes":[{"type":"skip"},{"type":"skip"},{"type":"skip"},{"type":"data","data":[{"service":1,"methods":4},{"name":2,"description":3},"tokens","The Tokens service allows you to create, manage, and validate file tokens for your storage files. These tokens provide a way to grant temporary, controlled access to files without requiring user authentication or exposing sensitive permissions.\n\nFile tokens are particularly useful when you need to share access to private storage files with unauthenticated users or services for a limited time period. Each token is linked to a specific file and can be configured with an expiry date to ensure access is only granted for the necessary duration.\n\nYou can use tokens to generate secure URLs to view, preview, or download files. The Tokens service provides endpoints to create, list, retrieve, update, and delete tokens, giving you complete control over file access management.\n\nFor more detailed information about using file tokens in your application, refer to the [File tokens documentation](/docs/products/storage/file-tokens).\n",[5,37,55,72,87],{"id":6,"group":7,"demo":8,"title":9,"description":10,"parameters":11,"responses":25,"method":33,"url":34,"rate-limit":35,"rate-time":35,"rate-key":36},"createFileToken","files","const sdk = require('node-appwrite');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst tokens = new sdk.Tokens(client);\n\nconst result = await tokens.createFileToken(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>', // fileId\n    '' // expire (optional)\n);\n","Create file token","Create a new token. A token is linked to a file. Token can be passed as a request URL search parameter.",[12,17,20],{"name":13,"description":14,"required":15,"type":16,"example":-1},"bucketId","Storage bucket unique ID. You can create a new storage bucket using the Storage service [server integration](https://appwrite.io/docs/server/storage#createBucket).",true,"string",{"name":18,"description":19,"required":15,"type":16,"example":-1},"fileId","File unique ID.",{"name":21,"description":22,"required":23,"type":16,"example":24},"expire","Token expiry date",false,"",[26],{"code":27,"contentType":28,"models":29},201,"application/json",[30],{"id":31,"name":32},"resourceToken","ResourceToken","post","/tokens/buckets/{bucketId}/files/{fileId}",60,"ip:{ip},method:{method},url:{url},userId:{userId}",{"id":38,"group":2,"demo":39,"title":40,"description":41,"parameters":42,"responses":46,"method":38,"url":51,"rate-limit":52,"rate-time":53,"rate-key":54},"get","const sdk = require('node-appwrite');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst tokens = new sdk.Tokens(client);\n\nconst result = await tokens.get(\n    '\u003CTOKEN_ID>' // tokenId\n);\n","Get token","Get a token by its unique ID.",[43],{"name":44,"description":45,"required":15,"type":16,"example":-1},"tokenId","Token ID.",[47],{"code":48,"contentType":28,"models":49},200,[50],{"id":31,"name":32},"/tokens/{tokenId}",0,3600,"url:{url},ip:{ip}",{"id":56,"group":7,"demo":57,"title":58,"description":59,"parameters":60,"responses":66,"method":38,"url":34,"rate-limit":52,"rate-time":53,"rate-key":54},"list","const sdk = require('node-appwrite');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst tokens = new sdk.Tokens(client);\n\nconst result = await tokens.list(\n    '\u003CBUCKET_ID>', // bucketId\n    '\u003CFILE_ID>', // fileId\n    [] // queries (optional)\n);\n","List tokens","List all the tokens created for a specific file or bucket. You can use the query params to filter your results.",[61,62,63],{"name":13,"description":14,"required":15,"type":16,"example":-1},{"name":18,"description":19,"required":15,"type":16,"example":-1},{"name":64,"description":65,"required":23,"type":16,"example":-1},"queries","Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of 100 queries are allowed, each 4096 characters long. You may filter on the following attributes: expire",[67],{"code":48,"contentType":28,"models":68},[69],{"id":70,"name":71},"resourceTokenList","Resource Tokens List",{"id":73,"group":2,"demo":74,"title":75,"description":76,"parameters":77,"responses":82,"method":86,"url":51,"rate-limit":35,"rate-time":35,"rate-key":36},"update","const sdk = require('node-appwrite');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst tokens = new sdk.Tokens(client);\n\nconst result = await tokens.update(\n    '\u003CTOKEN_ID>', // tokenId\n    '' // expire (optional)\n);\n","Update token","Update a token by its unique ID. Use this endpoint to update a token's expiry date.",[78,80],{"name":44,"description":79,"required":15,"type":16,"example":-1},"Token unique ID.",{"name":21,"description":81,"required":23,"type":16,"example":24},"File token expiry date",[83],{"code":48,"contentType":28,"models":84},[85],{"id":31,"name":32},"patch",{"id":88,"group":2,"demo":89,"title":90,"description":91,"parameters":92,"responses":94,"method":88,"url":51,"rate-limit":35,"rate-time":35,"rate-key":36},"delete","const sdk = require('node-appwrite');\n\nconst client = new sdk.Client()\n    .setEndpoint('https://\u003CREGION>.cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('\u003CYOUR_PROJECT_ID>') // Your project ID\n    .setKey('\u003CYOUR_API_KEY>'); // Your secret API key\n\nconst tokens = new sdk.Tokens(client);\n\nconst result = await tokens.delete(\n    '\u003CTOKEN_ID>' // tokenId\n);\n","Delete token","Delete a token by its unique ID.",[93],{"name":44,"description":45,"required":15,"type":16,"example":-1},[95],{"code":96,"contentType":-1,"models":97},204,[]],"uses":{"params":["platform","service","version"]}}]}
